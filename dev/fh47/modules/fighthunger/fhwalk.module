<?php
// $Id: fhwalk.module,v 0.1 2007/01/09 09:02:48 ema Exp $

/**
 * @file
 * Enables users to manage fh wtw events.
 *
 * @defgroup fhwalk_core        Core drupal hooks
 * @defgroup fhwalk_helpers     various fhwalk helpers
 * @defgroup fhwalk_theme       theming functions
 * @defgroup fhwalk_administer  administer tab
 * @defgroup fhwalk_coordinate  coordinate tab
 * @defgroup fhwalk_signup      signup functions
 * @defgroup fhwalk_LCP         Local Country Page functions
 *   
 ************************************************************************
 
After installation:

- change weight to 1 in system table

- SQL queries

1 - change module weight 
UPDATE `system` SET `weight` = '1' WHERE `filename` = 'modules/fighthunger/fhwalk.module'; 

2 - add taxonomy information in term_node table

INSERT INTO `term_node` SELECT nid, 32 AS tid
FROM `node`
WHERE `type` = 'gathering-2'

Check the number (32) with vocabulary ssigned to fhwalk

3 - change gathering-n to fhwalk
UPDATE node SET `type`='fhwalk' WHERE `type` LIKE 'gather%';

4 - altering walk data (for coordinator field)
ALTER TABLE `gathering_node` ADD `cid` INT( 10 ) NULL AFTER `nid`;  


5 - lowercase on location table
UPDATE `location` SET `country`=LOWER(`country`)

6 - move data from gathering-1 and 2 to event!!
(but we have to check for time zone of ewh servers!!!)
2006-05-21 10:00:00 convert to 1148220000 ewhserver
                     should be 1148202000 so we have to subtract 18000 

FIRST check for enddate on gatherning_node;
some record is 0000-00-00

SELECT * FROM gathering_node WHERE enddate='0000-00-00';
UPDATE gathering_node SET enddate=startdate WHERE enddate='0000-00-00';

SECOND generate timestamp

INSERT INTO `event` (nid, event_start, event_end)
  SELECT `nid`, 
    UNIX_TIMESTAMP( ADDTIME( `startdate` , `starttime` ))-18000 AS event_start, 
    UNIX_TIMESTAMP( ADDTIME( `enddate`   , `endtime`   ))-18000 AS event_end 
    FROM `gathering_node`;

7 - move some data to location

UPDATE location l, gathering_node gn 
SET l.name = gn.address1, l.street = gn.address2, l.additional = gn.directions 
WHERE l.oid = gn.nid AND l.type = 'node';

8 - move gathering_node.description to node_revision.body
    ALL gathering node are without body!!!!

UPDATE node_revisions nr, gathering_node gn 
SET nr.body=gn.description, nr.format=3 
WHERE nr.nid=gn.nid AND gn.description<>'';
     

7 - altering signup data (for signup status)
ALTER TABLE `gathering_signup` ADD `stage` INT( 2 ) NOT NULL AFTER `guests` ;

*************************************************************************/

/**
 * Implementation of hook_help().
 *  
 * @ingroup fhwalk_core
 * @param $section the page which is requesting help
 * @return the help text
 */
function fhwalk_help($section) {
  switch ($section) {
    case 'admin/help#fhwalk':
      return '<p>'. t('The fhwalk module is used to manage walk events') .'</p>';
    case 'admin/modules#description':
      return t('<strong>FH:</strong> Allows managing walk events. <b>Require location, event, forward</b>');
    case 'node/add#fhwalk':
      return t('Create walk events.');
  }
}

/**
 * Implementation of hook_node_info().
 *  
 * @ingroup fhwalk_core
 */
function fhwalk_node_info() {
  return array('fhwalk' => array('name' => 'fhwalk', 'base' => 'fhwalk'));
}

/**
 * Implementation of hook_perm().
 *  
 * @ingroup fhwalk_core
 */
function fhwalk_perm() {
  $out = array('join fhwalk',
               'create fhwalk',
               'create multiple fhwalk',
               'coordinate fhwalk',
               'admin fhwalk');
  return $out;
}

/**
 * Implementation of hook_access().
 *  
 * @ingroup fhwalk_core
 */
function fhwalk_access($op, $node) {
  global $user;

  if ( ($op == 'create') || ($op == 'update') ) {
    return user_access('create fhwalk');
  }

  if ($op == 'delete') {
    return user_access('coordinate fhwalk');
  }

  if ($op == 'view') {
    return TRUE;
  }
}

/**
 * Implementation of hook_menu().
 *  
 * @ingroup fhwalk_core
 */
function fhwalk_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array(
      'title' => t('fhwalk'),
      'path' => 'admin/fhwalk', 
      'access' => user_access('admin fhwalk'),
      'callback' => 'fhwalk_admin',
    );
  } else {
    if (arg(0) == 'node' && is_numeric(arg(1))) {
      $node = node_load(array('nid' => arg(1)));
      if (($node->type=='fhwalk') && ($node->fhwalk_status==2)) {
        $items[] = array(
          'path' => 'node/'. arg(1) .'/walk_merge', 
          'title' => t('Walk Merge'),
          'callback' => 'fhwalk_merge',
          'access' => node_access('delete', $node),
          'weight' => 99,
          'type' => MENU_LOCAL_TASK
        );
      }
    }
    if (variable_get('fhwalk_vocabulary', 0)<>0) {
      $terms = taxonomy_get_tree(variable_get('fhwalk_vocabulary', 0));
      foreach($terms as $term) {
        $status_variable = 'fhwalk_' . $term->tid . '_status';
        $synonyms = taxonomy_get_synonyms($term->tid);
        $synonym = $synonyms[0];
        $items[] = array(
          'path' => $synonym,
          'callback' => 'fhwalk_overview',
          'callback arguments' => array($synonym, $term->tid),
          'access' => TRUE
        );
        $items[] = array(
          'path' => "$synonym/overview",
          'callback' => 'fhwalk_overview',
          'callback arguments' => array($synonym, $term->tid),
          'title' => t('Overview'),
          'type' => MENU_DEFAULT_LOCAL_TASK,
          'weight' => 0,
          'access' => TRUE
        );
        if( variable_get($status_variable, 0)==2) {
          $items[] = array(
            'path' => "$synonym/coordinate",
            'callback' => 'fhwalk_coordinate',
            'callback arguments' => array($synonym, $term->tid),
            'title' => t('Coordinate'),
            'access' => user_access('coordinate fhwalk'),
            'weight' => 1,
            'type' => MENU_LOCAL_TASK
          );
          $items[] = array(
            'path' => "$synonym/administer",
            'callback' => 'fhwalk_administer',
            'callback arguments' => array($synonym, $term->tid),
            'title' => t('Administer'),
            'access' => user_access('admin fhwalk'),
            'weight' => 2,
            'type' => MENU_LOCAL_TASK
          );
        }
      }
    }
/*    
    if (arg(0) == 'node' && is_numeric(arg(1))) {
      $node = node_load(array('nid' => arg(1)));
      if ($node->type=='fhwalk') {
        $items[] = array(
          'path' => 'node/'. arg(1) .'/signup_admin', 
          'title' => t('Signup Admin'),
          'callback' => 'fhwalk_signup_admin',
          'access' => user_access('create fhwalk'),
          'weight' => 1,
          'type' => MENU_LOCAL_TASK
        );
      }
    }
*/        
  }
  return $items;
}


/**
 * Implementation of hook_settings().
 *  
 * @ingroup fhwalk_core
 */
function fhwalk_settings() {
  
  $term_options = array();
  $vocabularies = taxonomy_get_vocabularies('fhwalk');

  foreach($vocabularies as $voc) {
    $voc_options[$voc->vid] = "$voc->name";
  }  
  $form['fhwalk_vocabulary'] = array(
    '#type' => 'radios', 
    '#title' => t('fhwalk vocabulary'),
    '#default_value' => variable_get('fhwalk_vocabulary', 0),
    '#options' => $voc_options
  );
  $form['fhwalk_signup_waiver'] = array(
    '#title' => t('fhwalk Standard Waiver'),
    '#type' => 'textarea',
    '#cols' => 75,
    '#rows' => 15,
    '#default_value' => variable_get('fhwalk_signup_waiver', ''),
    '#description' => t("Standard insurance waiver text."),
  );
  
  return $form;
}

/**
 * Implementation of hook_load().
 *  
 * @ingroup fhwalk_core
 */ 
function fhwalk_load($node) {
  $fields = "cid, route";
  $sql = "SELECT $fields FROM {gathering_node} WHERE nid = %d";
  $additions = db_fetch_object(db_query($sql, $node->nid));

// Get fhwalk_vocabulary
  $additions->fhwalk_vid = variable_get('fhwalk_vocabulary', 0);
  
// Get fhwalk campaign and status
  $term = array_pop(taxonomy_node_get_terms_by_vocabulary($node->nid, $additions->fhwalk_vid));
  $additions->fhwalk_tid = $term->tid;
  $status_variable = 'fhwalk_' . $term->tid . '_status';
  $additions->fhwalk_status = variable_get("$status_variable", 0);
  
  return $additions;
}

/**
 * Implementation of hook_insert().
 *  
 * @ingroup fhwalk_core
 */ 
function fhwalk_insert($node) {
  $fields = "cid, route";
  $sql = "INSERT INTO {gathering_node} (nid, $fields) VALUES (%d, %d, %s)";
  db_query($sql, $node->nid, $node->cid, $node->route); 
}

/**
 * Implementation of hook_update().
 *  
 * @ingroup fhwalk_core
 */ 
function fhwalk_update($node) {
  $fields = "cid=%d, route = %s";
  $sql = "UPDATE {gathering_node} SET $fields WHERE nid = %d";
  db_query($sql, $node->cid, $node->route); 
} 

/************************
 *
 * Path alias helpers
 *  
 ************************/
/**
 * Clean string from accent, umlaut, circ, etc...
 *  
 * @ingroup fhwalk_helpers
 * @param $sString string to clean
 * @return string cleaned
 */
function getRewriteString($sString) {
   $string = strtolower(htmlentities($sString));
   $string = preg_replace("/&(.)(uml);/", "$1e", $string);
   $string = preg_replace("/&(.)(acute|cedil|circ|ring|tilde|uml);/", "$1", $string);
   $string = preg_replace("/([^a-z0-9]+)/", "-", html_entity_decode($string));
   $string = trim($string, "-");
   return $string;
}

/**
 * Check if url exist.
 *  
 * @ingroup fhwalk_helpers
 * @param $url
 * @return TRUE if alias exist
 */
function _fhwalk_get_alias_check($alias) {
  return (db_num_rows(db_query("SELECT dst FROM {url_alias} WHERE dst='%s'",$alias))>0);
}

/**
 * Fetch or create a URL alias for this node.
 *  
 * @ingroup fhwalk_helpers
 * @param $node
 * @return node alias
 */
function _fhwalk_get_alias($node) {
  // check if there is already an alias
  $alias = db_result(db_query("SELECT dst FROM {url_alias} WHERE src='node/%d'",$node->nid));
  
  if (!($alias)) {
    $pre = $node->H_syn;
    $post = getRewriteString($node->location['city']);
    
// check plained $url
    $alias = "$pre/$post";
    if( !(drupal_lookup_path('source', $alias)) ) {
// check with country    
      $alias = $alias . '_' . $node->location['country'];
      if( !(drupal_lookup_path('source', $alias)) ) {
        $alias = $alias . '_' . $node->location['province'];
        while( !(drupal_lookup_path('source', $alias)) ) {
          $alias =  $alias . '_' . ++$i;
        }
      }
    }
  } 
  return $alias;
}

/**
 * Implementation of hook_submit().
 *  
 * @ingroup fhwalk_core
 */ 
function fhwalk_submit($node) {
// recover end date
  $node->end_day  =  $node->start_day;
  $node->end_month = $node->start_month;
  $node->end_year =  $node->start_year;
  
// get path alias
  $node->path =  _fhwalk_get_alias($node);
  
//  $msg = "<h2>fhwalk_submit</h2>" . print_r($node, true);
//  drupal_set_message($msg);
}

/**
 * Get coordinators.
 *  
 * @ingroup fhwalk_helpers
 * @return array of coordinators (user with 'coordinate fhwalk' permission)
 */ 
function _fhwalk_get_coordinators() {
  $sql = "SELECT DISTINCT u.uid, u.name FROM {users} u " . 
      "JOIN  {users_roles} ur ON u.uid=ur.uid " .
      "JOIN {permission} p ON ur.rid=p.rid " .
      "WHERE p.perm LIKE '%coordinate fhwalk%'" .
      "ORDER BY u.name";
  $result = db_query($sql);
  while($row = db_fetch_array($result)) $coords[$row['uid']] = $row['name'] . ' - ' . $row['uid'];
  return $coords;   
}

/**
 * Merge walks
 *  
 * @ingroup fhwalk_helpers
 * @param $node_from 
 * @param $node_to 
 */
function fhwalk_merge_events($nid_from, $nid_to) {
  $node_from = node_load($nid_from);
  $node_to   = node_load($nid_to);
  
  $msg = "Signup from walk in <b>" . $node_from->location['city'] . "</b> ($node_from->title) " . 
    "merged with signup for walk in <b>" . $node_to->location['city'] . "</b> ($node_to->title)."; 
//  $msg = "$node_from->title -> $node_to->title";
  drupal_set_message(t($msg));
}

/**
 * Custom delete/merge form submit
 *  
 * @ingroup fhwalk_helpers
 */
function fhwalk_merge_submit($form_id, $form_values) {
//  $msg = print_r($form_values, true);
//  drupal_set_message("pippo dice: $msg");
  switch($form_values['action']) {
    case 'merge':
      fhwalk_merge_events($form_values['nid_from'], $form_values['nid_to']);
      
      drupal_goto('node/' . $form_values['nid_to']);
//      drupal_goto('node/'. $form_values['nid_from'] .'/delete');
      break;
    case 'delete':
      drupal_goto('node/'. $form_values['nid_from'] .'/delete');
      break;
  }
}

/**
 * Custom delete/merge form
 *  
 * @ingroup fhwalk_helpers
 */
function fhwalk_merge() {
  $node = node_load(array('nid' => arg(1)));
  drupal_set_title(t('Merge Walk') . ": " . $node->location['city']);

  $form['delete_merge'] = array(
    '#type'   => 'fieldset',
    '#title'  => t('Delete or Merge walk'),
    '#weight' => 1
  );
  
  $options = array('merge' => t('Merge'), 'delete' => t('Delete'));
  $form['delete_merge']['action'] = array(
    '#type' => 'select',
    '#title' => t('Select action'),
    '#options' => $options,
  );
  
  $walk_list = _fhwalk_getwalks($node->fhwalk_tid, $node->location['country']);
  foreach($walk_list as $walk) $walk_option[$walk['nid']] = $walk['city'] . ' (' . $walk['title'] . ')';
  unset($walk_option[$node->nid]);
  $form['delete_merge']['nid_to'] = array(
    '#type' => 'select',
    '#title' => t('Select a walk to merge with.'),
    '#options' => $walk_option,
  );
  $form['delete_merge']['nid_from'] = array('#type' => 'hidden', '#value' => $node->nid); 
  $form['delete_merge']['submit'] = array('#type' => 'submit', '#value' => t('Submit')); 
  
  $output .= drupal_get_form('fhwalk_merge', $form);

  return $output;
}

/**
 * Implementation of hook_form().
 *  
 * @ingroup fhwalk_core
 */
function fhwalk_form(&$node) {
global $user;

// Little occitan trick
  $op = isset($_POST['op']) ? $_POST['op'] : '';
  if($op==t('Delete Walk')) drupal_goto("node/$node->nid/walk_merge");

// callback parameters
  if(arg(1)=='add') {
    $form['H_tid'] = array('#type' => 'hidden', '#value' => (arg(3) ? arg(3) : 0) );
    $form['H_country'] = array('#type' => 'hidden', '#value' => (arg(4) ? arg(4) : '-') );
  }
  $form['H_organiser'] = array('#type' => 'hidden', '#value' => $node->name ? $node->name : '');
  $form['H_coordinator'] = array('#type' => 'hidden', '#value' => $node->cid ? $node->cid : '');

  // general settings
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#description' => t("Name of this walk."),
    '#required' => TRUE,
    '#weight' => -9,
  );
  $form['body'] = array(
    '#type' => 'textarea',
    '#title' => t('Basic Information'),
    '#default_value' => $node->body,
    '#rows' => 5,
    '#description' => t('Enter basic information for the walk.'),
    '#weight' => -8,
  );
  $form['format'] = filter_form($node->format);
  $form['format']['#weight'] = -7;
  $form['route'] = array(
    '#type' => 'textarea',
    '#title' => t('Route'),
    '#default_value' => $node->route,
    '#rows' => 5,
    '#description' => t("Describe the general route for your walk, including approximate length and any landmarks."),
    '#weight' => -6,
  );


// set walk organiser and walk coordinator form
  $form['organise'] = array(
    '#type' => 'fieldset', 
    '#title' => t('Organising information'),
    '#collapsible' => TRUE, 
    '#collapsed' => TRUE, 
    '#weight' => 0);
  $form['organise']['name'] = array(
    '#type' => 'textfield', 
    '#title' => t('Organiser'), 
    '#maxlength' => 60, 
    '#autocomplete_path' => 'user/autocomplete', 
    '#default_value' => $node->name ? $node->name : '',
    '#weight' => -2,
    '#description' => t('Enter walk organiser'));
      
       
  if (user_access('admin fhwalk')) {
/*    
      $sql = "SELECT DISTINCT u.uid, u.name FROM {users} u " . 
          "JOIN  {users_roles} ur ON u.uid=ur.uid " .
          "JOIN {permission} p ON ur.rid=p.rid " .
          "WHERE p.perm LIKE '%coordinate fhwalk%'" .
          "ORDER BY u.name";
      $result = db_query($sql);
      while($row = db_fetch_array($result)) $coords[$row['uid']] = $row['name'];   
*/
    $coords = _fhwalk_get_coordinators(); 
    $coords[-1] = '[ MAKE A SELECTION ]';
    $form['organise']['cid'] = array(
      '#type' => 'select', 
      '#title' => t('Coordinator'), 
      '#options' => $coords, 
      '#default_value' => $node->cid ? $node->cid : -1, 
      '#weight' => -1, 
      '#description' => t('Enter walk coordinator'));
  }

//  $form['ssignup'] = _fhwalk_signup_edit($node);

  return $form;
}

/**
 * Get provinces for a given country.
 *  
 * @ingroup fhwalk_helpers
 * @param $country 
 * @return provinces array related to the country
 */
function _fhwalk_countryprovinces($country='zzz') {
  $province_listing_function = 'location_province_list_'. $country;
  // Trying to return options in case of only 1 country is configured into system or if $country != null
  if (function_exists($province_listing_function)) {
    $province_list = $province_listing_function();
    if (count($province_list)) {
      $options_list[$country .'000'] = '[ ----- '. t('MAKE A SELECTION') .' ----- ]';
      foreach ($province_list as $province_code => $province_name) {
        $options_list[$country . '-' . $province_code] = $province_name;
      }
    }
  }
  return $options_list;
}

/**
 * Implementation of hook_form_alter().
 *  
 * @ingroup fhwalk_core
 */
function fhwalk_form_alter($form_id, &$form) {
global $user;

  switch ($form_id) {
  
    case 'fhwalk_node_form':

    
      if (isset($form['delete'])) {
//        $form['merge'] = array('#type' => 'button', '#value' => t('Merge Walk'), '#weight' => 51);
        $form['delete']['#value'] = t('Delete Walk');
      }
    
/*
    $form['taxdump1'] = array('#value' => '<hr/>' . print_r($form['taxonomy'] , true).'<hr/>');  
*/  

// set proper taxonomy choices
      $vid = variable_get('fhwalk_vocabulary', 0);
// recover $tid and reset $form['taxonomy'][$vid]
      if(isset($form['H_tid'])) {
        $tid = $form['H_tid']['#value'];
        list($day, $month, $year) = explode("/", variable_get("fhwalk_date_$tid", '13/05/2007'));
        $form['event_start']['date']['start_day']['#default_value']   = $day;
        $form['event_start']['date']['start_month']['#default_value'] = $month;
        $form['event_start']['date']['start_year']['#default_value']  = $year;
        unset($form['H_tid']);
      } else {
        $tid = $form['taxonomy'][$vid]['#default_value'][0];
      }
      $term = taxonomy_get_term($tid);
      $synonyms = taxonomy_get_synonyms($term->tid);
      $form['H_syn'] = array('#type' => 'hidden',  '#value' => $synonyms[0]);
      $tid_form      = array('#type'  => 'hidden', '#value' => $tid); 
// check for other vocabularies
      $i = 0;
      foreach($form['taxonomy'] as $key => $value) if(is_numeric($key)) $i++;
      unset($form['taxonomy'][$vid]);
  
      if ($i==1) {  // only $vid      
        unset($form['taxonomy']);
        $form['taxonomy'] = array(
          '#type' => 'hidden',
          '#tree' => TRUE,
        );
      }
      $form['taxonomy'][$vid] = $tid_form;
    

/*
    $form['taxdump2'] = array('#value' => '<hr/>' .  print_r($form['taxonomy'], true) . '<hr/>');  
    $form['taxdump3'] = array('#value' => "i = $i<hr/>");  
*/


// change location form
      $form['location']['name']['#title'] = t('Start Location');  
      $form['location']['street']['#title'] = t('Street Address');  
      $form['location']['street']['#required'] = 1;  
      $form['location']['additional']['#title'] = t('Direction');  
      $form['location']['additional']['#type'] = 'textarea';
      unset($form['location']['additional']['#size']);
      unset($form['location']['additional']['#maxlength']);
      if(isset($form['H_country'])) {
        $form['location']['country']['#default_value'] = $form['H_country']['#value'];
      }
      if( $form['location']['country']['#default_value']<>'' ) {
        $form['location']['province']['#options'] = _fhwalk_countryprovinces($form['location']['country']['#default_value']);
      }

      
// modify date form
/*
  $form[$prefix .'_day'] = array(
    '#prefix' => '<div class="container-inline"><div class="day">',
  $form[$prefix .'_hour'] = array(
    '#prefix' => '</div>&#8212;<div class="time">',
  $form[$prefix .'_close'] = array(
    '#type' => 'markup',
    '#value' => '</div></div>');
*/
      unset( $form['event_start']['date']['start_hour']['#prefix'] );
      unset( $form['event_start']['date']['start_day']['#prefix'] );
      unset( $form['event_end']['date']['end_hour']['#prefix'] );
      unset( $form['event_end']['date']['end_day']['#prefix'] );

  // ...minutes options (with leading 0s)
      for ($i = 0; $i <= 59; $i += 5) $minutes[$i] = $i < 10 ? "0$i" : $i;


// reorder form element
      $form['basic'] = array(
        '#type'   => 'fieldset',
        '#title'  => t('Basic Information'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#weight' => 1
      );
      $form['basic']['location']['city']     = $form['location']['city'];
      $form['basic']['location']['province'] = $form['location']['province'];
      $form['basic']['location']['country']  = $form['location']['country'];
      $form['basic']['location']['#tree'] = true;
  
      $form['whenwhere'] = array(
        '#type'   => 'fieldset',
        '#title'  => t('When & Where') . " - " . $node->event_start,
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#weight' => 2
      );

// day form
      if(user_access('coordinate fhwalk')) {
        $form['whenwhere']['start_day']   = $form['event_start']['date']['start_day'];
        $form['whenwhere']['start_month'] = $form['event_start']['date']['start_month'];
        $form['whenwhere']['start_year']  = $form['event_start']['date']['start_year'];
        $form['whenwhere']['start_day']['#prefix'] = '<div class="container-inline"><div class="day"><h4>' . t('Day') . ':</h4>';
        $form['whenwhere']['close_day'] = array('#type' => 'markup','#value' => '</div></div>');
      } else {
        list($day, $month, $year) = explode("/", variable_get("fhwalk_date_$tid", '13/05/2007'));
        
        $form['whenwhere']['start_day']   = array('#type' => 'hidden', '#value' => $day );
        $form['whenwhere']['start_month'] = array('#type' => 'hidden', '#value' => $month );
        $form['whenwhere']['start_year']  = array('#type' => 'hidden', '#value' => $year );
        $form['whenwhere']['day'] = array('#type' => 'markup', 
            '#value' => '<div class="container-inline"><div class="day"><h4>' . t('Day') . ":</h4>\n" .
            '<strong>' . variable_get("fhwalk_date_$tid", '13/05/2007') . "</strong>\n" .
            '</div></div>');
      }

// start time form
      $form['whenwhere']['start_hour']   = $form['event_start']['date']['start_hour'];
      $form['whenwhere']['start_minute'] = $form['event_start']['date']['start_minute'];
      $form['whenwhere']['start_hour']['#prefix'] = '<div class="container-inline"><div class="time"><h4>' . t('Start Time') . ':</h4>';
      $form['whenwhere']['start_minute']['#options'] = $minutes;
      $form['whenwhere']['start_minute']['#description'] = t('local time');
      $form['whenwhere']['close_start'] = array('#type' => 'markup','#value' => '</div></div>');

// end time form
      $form['whenwhere']['end_hour']   = $form['event_end']['date']['end_hour'];
      $form['whenwhere']['end_minute'] = $form['event_end']['date']['end_minute'];
      $form['whenwhere']['end_hour']['#prefix'] = '<div class="container-inline"><div class="time"><h4>' . t('End Time') . ':</h4>';
      $form['whenwhere']['end_minute']['#options'] = $minutes;
      $form['whenwhere']['end_minute']['#description'] = t('local time');
      $form['whenwhere']['close_end'] = array('#type' => 'markup','#value' => '</div></div>');

// other location info
      $form['whenwhere']['location']['#tree'] = true;
      $form['whenwhere']['location']['name'] = $form['location']['name'];
      $form['whenwhere']['location']['street'] = $form['location']['street'];  
      $form['whenwhere']['location']['additional'] = $form['location']['additional'];  

// fhpartners
      $form['fhpartners']['#weight'] = 4;

// fhsignup
      $form['signup']['#weight'] = 5;


//  if (isset($form['event_end'])) $form['event_end']['#weight'] = 22;
     

// unset event.module forms
      unset($form['event_start']);
      unset($form['event_end']);
      unset($form['timezone']);
      unset($form['location']);
 
// delete product form
      if (isset($form['product_transform'])) unset($form['product_transform']);
    
// delete og form
      if (isset($form['og_nodeapi'])) unset($form['og_nodeapi']);

//    if (isset($form['fhevent']))    $form['fhevent']['#weight'] = 1;
      if (isset($form['event_start'])) $form['event_start']['#weight'] = 21;
      if (isset($form['event_end']))   $form['event_end']['#weight'] = 22;
      if (isset($form['location']))    $form['location']['#weight'] = 23;
      if (isset($form['donation']))    $form['donation']['#weight'] = 24;

/*
      if (($node->nid && node_access('delete', $node)) {
        $form['delete'] = array('#type' => 'button', '#value' => t('Delete'), '#weight' => 50);
      }
*/

// DEBUG
/*
    if (variable_get('fhwalk_vocabulary', 0)<>0) {
      $terms = taxonomy_get_tree(variable_get('fhwalk_vocabulary', 0));
      foreach($terms as $term) {
        $synonyms = taxonomy_get_synonyms($term->tid);
        $synonym = $synonyms[0];
        
        $output .= "<h4>$term->name - $synonym</h4>" . print_r($term, true);
      }
      $output .= "<hr />";
    }
*/


/*
    foreach ($form as $category => $items) {
      if (is_array($items)) {
        $output .= "<h4>$category - weigth:" . $items['#weight'] . "</h4>";
      }
      $output .= print_r($items, true);
    }
    $form['dumpq'] = array('#type' => 'markup', '#value' => $output,  '#weight' => 15);
*/
      break;

    case 'forward_form':
      unset($form['message']['#title']);
      unset($form['message']['#collapsible']);
      unset($form['message']['#collapsed']);
      
      break;

  }

  return $form;
}

/**
 * Themed actions.
 *  
 * @ingroup fhwalk_theme
 * @param $actions array with action data (title, content, weigth)
 * @return rendered js tabs
 */
function theme_fhwalk_actions($actions) {
  $form['tabset'] = array(
    '#type' => 'tabset'
  );
  foreach($actions as $key => $actions_data) {
    $form['tabset'][$key] = array(
      '#type'   => 'tabpage',
      '#title'  => $actions_data['#title'],
      '#weight' => $actions_data['#weight']
    );
    $form['tabset'][$key]['action'] = array('#value' => $actions_data['#value']);
  }
  $output = form_render($form);
  return $output;
}

/**
 * Themed LCP list.
 *  
 * @ingroup fhwalk_theme
 * @param $LCP_list array with LCP data (nid, title, language)
 * @return rendered js tabs
 */
function theme_fhwalk_LCP($LCP_list) {
  if($LCP_list) { 
    if(count($LCP_list)==1) {
      $LCPvalue = array_shift($LCP_list);
      $output = node_view(node_load($LCPvalue['nid']), FALSE);
    } else {
      $form['LCPtabset'] = array(
        '#type' => 'tabset'
      );
      foreach($LCP_list as $LCPkey => $LCPvalue) {
        $LCPnode = node_view(node_load($LCPvalue['nid']), FALSE);
        $form['LCPtabset'][$LCPkey] = array(
          '#type' => 'tabpage',
          '#title' => $LCPvalue['language']
        );
        $form['LCPtabset'][$LCPkey]['node'] = array('#value' => $LCPnode);
      }
      $output = form_render($form);
    }
  } else {
    $output = '';
  }
  return $output;
}

/**
 * Implementation of hook_view().
 * Call all module hook but don't append to body
 * Save return value in $node->hook_view[$name]   *  
 *  
 * @ingroup fhwalk_core
 */ 
function fhwalk_view($node, $teaser = FALSE, $page = FALSE) { 
  $node = (object)$node;

  $node = node_prepare($node, $teaser);

  $node->body_plain = $node->body;
//  $node->body_hooked = $node->body;
  $node->body = '';

  foreach (module_implements('nodeapi') as $name) {
    $function = $name .'_nodeapi';
    $result = $function($node, 'view', $teaser, $page);
    $node->hook_view[$name] = $node->body;
    $node->body_hooked .= $node->body;
    $node->body = '';
  }
  $node->hook_view_array = $return;
  $node->body = $node->body_plain;

// Fetch signup like from an external module
//  $node->hook_view['signup'] = _fhwalk_signup_nodeapi($node);

// Fix Location without direction
  $node->hook_view['location']  = '<h3>'. t('Location') .'</h3>';
  $node->hook_view['location'] .=  theme('location', $node->location, array('country', 'additional'));

// Details
  if($node->route<>'') {
    $walk_details  = '<h3>' . t('Route') . '</h3>'; 
    $walk_details .= $node->route;
  }
  if($node->body_plain) {
    $walk_details .= '<h3>' . t('Walk Information') . '</h3>'; 
    $walk_details .= $node->body_plain;
  }
   
  $details['details']  = array(
    '#title'  => t('Details'),
    '#weight' => 0,
    '#value'  => $walk_details
  );
  if($node->fhwalk_status<2) {
    $details['scrapbook']  = array(
      '#title'  => t('Scrapbook'),
      '#weight' => -1,
      '#value'  => fhwalk_get_photos($node)
    );
  }
  $node->details = theme('fhwalk_actions', $details);


// Theme action tabs
  if($node->fhwalk_status==2) {
    $actions['signup'] = array(
      '#title'  => t('Signup'),
      '#weight' => 0,
      '#value'  => $node->hook_view['fhsignup']
    );
    $actions['taf'] = array(
      '#title'  => t('Invite others to this walk'),
      '#weight' => 1,
      '#value'  => $node->hook_view['forward']
    );
  } else {
    $actions['taf'] = array(
      '#title'  => t('Tell others about this walk'),
      '#weight' => 1,
      '#value'  => $node->hook_view['forward']
    );
  }
  $node->actions = theme('fhwalk_actions', $actions);
  
// Fetch LCP nids and titles and theme
  $LCP_list = fhwalk_LCP_get_nodes($node->location['country'], $node->fhwalk_tid);
  $node->LCP = theme('fhwalk_LCP',$LCP_list);
}

/**
 * Themed walk list.
 *  
 * @ingroup fhwalk_theme
 * @param $walk_list array with walk
 * @return a <ul><li> html list
 */
function theme_fhwalk_walklist($walk_list) {
  $countrywithstate = array('us', 'au', 'br', 'ca');
  if($walk_list) {
    $out  = '<h4>' . t('events in your country:') . "</h4>\n";
    $out .= "<ul>\n";
    foreach($walk_list as $walk) {
      $location = $walk['city'];    
      if( in_array( $walk['country'], $countrywithstate ) && ($walk['province']<>'') ) {
        $location .= ' [' . $walk['province'] . ']';
      }    
      $url = l($walk['title'], 'node/' . $walk['nid']);
      $out  .= "<li>$location: $url</li>\n"; 
    }
    $out  .= "</ul>\n";
  }
  return $out;
}

// CHECK IF NEEDED !!!!
function fhwalk_overview_submit($form_id, $form_values) {
  return $form_values['synonym'] . '/' . $form_values['country'];  
}

/**
 * Get walk for a given campaign.
 *  
 * @ingroup fhwalk_helpers
 * @param $tid the tid of taxonomy campaign term 
 * @param $country (optional) country to look for
 * @return the walks array
 */
function _fhwalk_getwalks($tid, $country='%') {
  $sql = "SELECT n.nid, n.title, l.city, l.province, l.country, l.latitude, l.longitude " .
         "FROM {node} n " .
         "LEFT JOIN {location} l ON n.nid = l.oid " . 
         "LEFT JOIN {term_node} tn ON n.nid= tn.nid " . 
         "WHERE tn.tid = %d AND l.country LIKE '%s' AND n.type='fhwalk' " . 
         "ORDER BY l.city"; 
  $rs = db_query($sql, $tid, $country);
  $walk_list = array();
  while ($walk_data = db_fetch_array($rs)) {
    $walk_list[$walk_data['nid']] =  $walk_data;
  }
  return $walk_list;
}

/**
 * Themed walk creation button.
 *  
 * @ingroup fhwalk_theme
 * @param $url
 * @return a button (check on files directory !!!)
 */
function theme_fhwalk_btn_create($url) {
  $out  = "<a href='".$url."'>\n";
  $out .= "<img src='/files/event_create.png' width='79' height='80' class='event_create'/>";
  $out .= "</a>";
  return $out;
}

/**
 * Themed overview page.
 *  
 * @ingroup fhwalk_theme
 * @param $fhwalk_overview array with data to render
 * @return HTML code
 */
function theme_fhwalk_overview_node($fhwalk_overview) {

// Map
  $out = gmap_draw_map($fhwalk_overview['gmap_array']);

// Presentation
  $out .= '<div>' . $fhwalk_overview['term']->description . '</div>';

// Country search
  $out .= $fhwalk_overview['country_search'];
  
// Country event list
  $out .= theme('fhwalk_walklist', $fhwalk_overview['walk_list']);

// Create event
  if($fhwalk_overview['status']==2) {
    $uri = "node/add/fhwalk/" . $fhwalk_overview['term']->tid;
    if($fhwalk_overview['country']<>'-') {
      $uri .= '/' . $fhwalk_overview['country'];
      if($fhwalk_overview['walk_list']) {
        $create_msg = t("Don't see an event near you?"). "&nbsp;";
      } else {
        $create_msg = t("Don't see an event in this country?"). "&nbsp;";
      }
    } else {
      $create_msg = t("Create an event!"). "&nbsp;";
    }
    $create_link = l(t('Click here to start your own!'),$uri);
    $out .= $create_msg . $create_link;
    $out .= theme("fhwalk_btn_create",$uri);
  }

  return $out;  
}

/**
 * Get gmap array
 *  
 * @ingroup fhwalk_core
 * @param $synonym path for campaign
 * @param $tid taxonomy campaign tid
 * @param $country optional country 
 * @return array for gmap module processing
 */
function _fhwalk_get_gmap_array($walk_list, $country) {
  $lat_max  = NULL;
  $long_max = NULL;
  $lat_min  = NULL;
  $long_min = NULL;

  $gmap_array =array(
    'id' => 'map',
    'width'   => '500px',
    'height'  => '400px',
    'control' => 'Small', 
    'type'    => 'Map',
    'markers' => array()
  );
  
  foreach($walk_list as $key => $value) {
    if(($value['latitude']<>0) && ($value['longitude']<>0)) {
      $lat_max  = ($lat_max)  ?  max($lat_max,  $value['latitude'])  : $value['latitude'];
      $long_max = ($long_max) ?  max($long_max, $value['longitude']) : $value['longitude'];
      $lat_min  = ($lat_min)  ?  min($lat_min,  $value['latitude'])  : $value['latitude'];
      $long_min = ($long_min) ?  min($long_min, $value['longitude']) : $value['longitude'];

      $label  = '<h3>' . $value['city'] . '</h3>' . $value['title'] . '<br /><br/>' . 
        '<a href="/' . drupal_get_path_alias("node/$key") . '"><i>' . t('Visit Walk Page') . '</i></a>';
/*
      // get flickr photo
      list($tag_campaign, $tag_event) = split('/',  $path_alias );
      $tag_flickr = _tags4flickr ($tag_event); 
      $sql  = "SELECT * FROM {wtw_gallery_tags} WHERE tag = '$%s'";
      $row = db_fetch_array(db_query($sql, $tag_flickr));
      if($row) {
        $pid = $row['photo_id'];
        $secret = $row['secret'];
        $server = $row['server'];
        
        $flickr_link = "http://www.flickr.com/photos/walktheworld/$pid/";
        $flickr_square = "http://static.flickr.com/$server/" . $pid . "_" . $secret . "_s.jpg";
        $popup .= "<a href='$flickr_link'><img src='$flickr_square' width='75' height='75' vspace='5' hspace='5'></a>";
      }
*/
      $gmap_array['markers'][] = array(
        'label'      => $label,
        'tooltip'    => $value['city'],
//        'link'       => "/node/$key",
        'latitude'   => $value['latitude'],
        'longitude'  => $value['longitude'],
        'markername' => 'blue'        
      );    
    }
  }
  $gmap_array['latitude']  = ($lat_max + $lat_min)/2; 
  $gmap_array['longitude'] = ($long_max + $long_min)/2;
  $span = max( ($lat_max - $lat_min)/180, ($long_max - $long_min)/360 );
//  $span = 0.1;
  $gmap_array['span'] = $span;
  $gmap_array['zoom'] = (int)(floor(5 - $span * 10));
// $gmap_array['zoom'] = 4;
  
  return $gmap_array;
  
}

/**
 * Walk campaign home page
 *  
 * @ingroup fhwalk_core
 * @param $synonym path for campaign
 * @param $tid taxonomy campaign tid
 * @param $country optional country 
 * @return overview campaign page
 */  
function fhwalk_overview($synonym, $tid, $country='-' ) {

  $term = taxonomy_get_term($tid);
  drupal_set_title($term->name);

// Walk status
  $status = variable_get("fhwalk_" . $tid . "_status", 0);
  $fhwalk_overview['status'] = $status;

  
// Walk list
  if( $country <> '-') {
    $walk_list = _fhwalk_getwalks($tid, $country);
    $fhwalk_overview['walk_list'] = $walk_list;
  } else {
    $walk_list = _fhwalk_getwalks($tid);
  }

// Map
  $lat_max  = NULL;
  $long_max = NULL;
  $lat_min  = NULL;
  $long_min = NULL;
  foreach($walk_list as $key => $value) {
    $lat_max  = ($lat_max)  ?  max($lat_max,  $value['latitude'])  : $value['latitude'];
    $long_max = ($long_max) ?  max($long_max, $value['longitude']) : $value['longitude'];
    $lat_min  = ($lat_min)  ?  min($lat_min,  $value['latitude'])  : $value['latitude'];
    $long_min = ($long_min) ?  min($long_min, $value['longitude']) : $value['longitude'];
  }
/*      
  $gmap_string = "[gmap |id=map |center=$gmap_center_lat, $gmap_center_long " .
    "|zoom=$gmap_zoom |width=500px |height=400px |control=Small |type=Map " .
    "|markers=blue::$gmap_markers]";
*/ 

  $gmap_array = _fhwalk_get_gmap_array($walk_list, $country);
  $fhwalk_overview['gmap_array'] = $gmap_array ;
//  $fhwalk_overview['gmap'] = gmap_draw_map($fhwalk_overview['gmap_array']);

// Term
  $fhwalk_overview['term'] = $term;

// Country selection
  if( $fhwalk_overview['status']==2 ) {
    $country_list = fh_get_country_list();
  } else {
    $country_list = array('' => '--') + _fhwalk_get_country_campaign($tid);
  }


  $form['tid'] = array('#type' => 'hidden', '#value' => $tid);
  $form['synonym'] = array('#type' => 'hidden', '#value' => $synonym);
  $form['country'] = array(
    '#type' => 'select',
    '#title' => t('Select a country'),
    '#options' => $country_list,
    '#default_value' => $country,
    '#attributes' => array('onchange' => 'submit()'),
  );
  $form['submit'] = array(
    '#type' => 'submit', 
    '#value' => t('Submit'), 
    '#attributes' => array( 'style' => 'visibility:hidden' ) //trick to use fhwalk_overview_submit
  );
  $fhwalk_overview['country'] = $country;
  $fhwalk_overview['country_search_form'] = $form;
  $fhwalk_overview['country_search'] = drupal_get_form('fhwalk_overview', $form);
    

// print node
//  $out .= gmap_draw_map($gmap_array);

//  $out .= $term->description;
//  $out .= $country_search;
//  $out .= theme('fhwalk_walklist', $walk_list);

  $out = theme('fhwalk_overview_node', $fhwalk_overview);     
    
// debug

//  $out .= "<hr />" . htmlentities($gmap_string) . "";
//  $out .= '<hr />$gmap_array: ' . htmlentities( print_r($gmap_array, true) );
/*
  $out .= "<hr />lat_max $lat_max, long_max $long_max, lat_min $lat_min, long_min $long_min";
  $span_lat = ($lat_max - $lat_min) / 180;
  $span_long = ($long_max - $long_min) / 360;
  $out .= '<hr />' . "span_lat: $span_lat, span_long: $span_long";
  $out .= '<br/> zoom: ' . $gmap_array['zoom'] . ' - ' . $gmap_array['span'];
*/ 

/*
  $out .= '<hr />' . "tid: $tid";
  $out .= '<hr />' . "country: $country";
  $out .= '<hr />' . "fhwalk_overview: " . print_r($fhwalk_overview, true);
*/  
  return $out;
}

/**********************
 *
 * ADMINISTER TAB
 *  
 **********************/ 
 
/**
 * Get a list of walk coordinate by the user.
 *  
 * @ingroup fhwalk_administer
 * @param $tid taxonomy campaign tid
 * @param $sql_array array with search condition
 * @return walk themed table
 */
function _fhwalk_administer_get_walk($tid, $sql_array) {

  $header = array(
    array('data' => t('Event'),       'field' => 'title'),
    array('data' => t('City'),        'field' => 'city'),
    array('data' => t('Country'),     'field' => 'cname', 'sort' => 'asc'),
    array('data' => t('Organiser'),   'field' => 'coord_name'),
    array('data' => t('Coordinator'), 'field' => 'name'),
    array('data' => t('Operations'),  '')
  );

  $sql = "SELECT n.nid, n.title, u.name, uc.name AS coord_name, l.city, l.country, c.name AS cname FROM {node} n " . 
    "LEFT JOIN {gathering_node} gn ON n.nid=gn.nid " .
    "LEFT JOIN {location} l ON n.nid=l.oid " .
    "LEFT JOIN {countries} c ON UPPER(l.country)=c.ccid " .
    "LEFT JOIN {users} uc ON gn.cid=uc.uid " .
    "JOIN {users} u ON u.uid=n.uid " .
    "JOIN {term_node} tn ON tn.nid=n.nid " .
    "WHERE l.type='node' AND tn.tid=%d";
    
// set condition from array
  foreach($sql_array as $key => $value) {
    switch ($key) {
      case 'coord':
        $sql .= ($value=='none') ? ' AND gn.cid IS NULL' : " AND gn.cid=$value ";
        break;
      case 'country':
        $sql .= " AND l.country='$value'";
    }
  }

  $num_rows_total = db_num_rows(db_query($sql, $tid));
  $tablesort = tablesort_sql($header);
  $result = pager_query($sql . $tablesort, 20, 0, NULL, $tid);

  while ($walk = db_fetch_object($result)) {
    $operations = l(t('Edit'),  'node/' . $walk->nid . '/edit');
    $rows[] = array(
      'data' => array(
          l($walk->title, 'node/' . $walk->nid),
          $walk->city,
          $walk->cname,
          $walk->name,
          $walk->coord_name,
          $operations));
  }

  if (!$rows) {
    $rows[] = array(array('data' => t('No walk available.'), 'colspan' => 6));
  }
  
  $output .= '<h2>' . t("Walk selected") . ": $num_rows_total</h2>";
  $output .= theme('table', $header, $rows);
  $output .= theme('pager', NULL, 50, 0);
  return $output;
}

/**
 * Process administer search form.
 * Convert POST request value in GET value 
 *  
 * @ingroup fhwalk_administer
 * @param $form_id 
 * @param $form_values
 */
function fhwalk_administer_search_submit($form_id, $form_values) {
  $msg = print_r($form_values, true);

  $get = array();
  if($form_values['country']<>'') $get['country'] = $form_values['country'];
  if($form_values['coordinator']<>'all') $get['coord']   = $form_values['coordinator'];
  unset($get[0]);
  $URLquerystring = drupal_query_string_encode($get);
  $url = $form_values['syn'] . '/administer';

	drupal_goto($url, $URLquerystring);
}

/**
 * Get a list of country for a given campaign
 *  
 * @ingroup fhwalk_helpers
 * @param $tid taxonomy campaign tid
 * @return countries array
 */
function _fhwalk_get_country_campaign($tid) {
  $sql = "SELECT l.country, c.name FROM {location} l " . 
    "JOIN {node} n ON n.nid=l.oid " .
    "JOIN {countries} c ON UPPER(l.country)=c.ccid " .
    "JOIN {term_node} tn ON tn.nid=n.nid " .
    "WHERE l.type='node' AND tn.tid=%d " .
    "ORDER BY c.name";
  $result=db_query($sql, $tid);
  while($row = db_fetch_array($result)) $countries[$row['country']] = $row['name'];
  return $countries;
}

/**
 * Walk campaign administrator page.
 * (param come from callback on menu hook) 
 *  
 * @ingroup fhwalk_administer
 * @param $synonym campaign path
 * @param $tid taxonomy campaign tid
 */  
function fhwalk_administer($synonym, $tid) {
global $user;

//  array_intersect_key() only in php 5.1
//  $search_keys = array('coord'=> 1, 'country' => 2);
//  $sql_array = ($_REQUEST) ? array_intersect_key($_REQUEST, $search_keys) : array();
  $sql_array = array();
  if($_REQUEST['coord'])   $sql_array['coord']   = $_REQUEST['coord'];
  if($_REQUEST['country']) $sql_array['country'] = $_REQUEST['country'];

  $term = taxonomy_get_term($tid);
  drupal_set_title(t('Administer') . ": $term->name");
  
// Get list of walk coordinated
  $form['walk_status'] = array(
    '#type' => 'fieldset',
    '#title' => t('Walk List'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#weight' => -1
  );

  $form['walk_status']['list'] = array(
    '#value' => _fhwalk_administer_get_walk($tid, $sql_array),
  );
  
  $form['walk_status']['search'] = array(
    '#type' => 'fieldset',
    '#title' => t('Search'),
    '#collapsible' => TRUE,
    '#collapsed' => (count($sql_array)===0),
    '#weight' => 1
  );

// fetch only country with a campaign
  $countries = _fhwalk_get_country_campaign($tid);
  $countries[''] = '< ALL >';
  $form['walk_status']['search']['country'] = array(
    '#type' => 'select',
    '#title' => t("Country"),
    '#options' => $countries,
    '#default_value' => ($sql_array['country'] ? $sql_array['country'] : ''), 
  );
  
  $coords = _fhwalk_get_coordinators();
  $coords['all'] = '< ALL >'; 
  $coords['none'] = '< WITHOUT COORDINATOR >';
//  $coords = array_merge($coords, _fhwalk_get_coordinators());

  $form['walk_status']['search']['coordinator'] = array(
    '#type' => 'select',
    '#title' => t("Coordinator"),
    '#options' => $coords, 
    '#default_value' => ($sql_array['coord'] ? $sql_array['coord'] : 'all'),
  );
  $form['walk_status']['search']['syn'] = array('#type' => 'hidden', '#value' => $synonym);
  $form['walk_status']['search']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search')
  );
  
  $output = drupal_get_form('fhwalk_administer_search', $form);

/*
  $output .= "pippo dice ciao a tutti e stampa la request: $request";
  $output .= "e stampa la post: $post";
  $output .= "e stampa i coord: " . print_r(_fhwalk_get_coordinators(), true);
*/
  return $output;
}

/**********************
 *
 * COORDINATE TAB
 *  
 **********************/ 
/**
 * Get a list of walk coordinate by the user.
 * 
 * @ingroup fhwalk_coordinate
 * @param $tid taxonomy campaign tid
 * @param $uid user id of coordinator
 * @return walk themed table
 */
function _fhwalk_coordinate_get_walk($tid, $cid) {

  $header = array(
    array('data' => t('Event'),     'field' => 'title'),
    array('data' => t('City'),      'field' => 'city'),
    array('data' => t('Country'),   'field' => 'cname', 'sort' => 'asc'),
    array('data' => t('Organiser'), 'field' => 'name'),
    array('data' => t('Operations'), '')
  );

  $sql = "SELECT n.nid, n.title, u.name, l.city, l.country, c.name AS cname FROM {node} n " . 
    "LEFT JOIN {location} l ON n.nid=l.oid " .
    "LEFT JOIN {countries} c ON UPPER(l.country)=c.ccid " .
    "JOIN {gathering_node} gn ON n.nid=gn.nid " .
    "JOIN {users} u ON u.uid=n.uid " .
    "JOIN {term_node} tn ON tn.nid=n.nid " .
    "WHERE l.type='node' AND tn.tid=%d AND gn.cid=%d";
    
  $tablesort = tablesort_sql($header);
  $result = pager_query($sql . $tablesort, 20, 0, NULL, $tid, $cid);

  while ($walk = db_fetch_object($result)) {
    $operations = t('Approve') . ' - ' . t('Deny');
    $rows[] = array(
      'data' => array(
          l($walk->title, 'node/' . $walk->nid),
          $walk->city,
          $walk->cname,
          $walk->name,
          $operations));
  }

  if (!$rows) {
    $rows[] = array(array('data' => t('No walk available.'), 'colspan' => 5));
  }
  
  $output .= '<h2>' . t("Walk you're coordinating") . ': ' . db_num_rows($result) . '</h2>';
  $output .= theme('table', $header, $rows);
  $output .= theme('pager', NULL, 50, 0);

  return $output;
}

/**
 * Process coordinate form mail to organisers
 * use forward.module 
 * CHECK IF WE NEED SOME ENQUEUE SYSTEM
 *  
 * @ingroup fhwalk_coordinate
 * @param $form_id 
 * @param $form_values
 */ 
function fhwalk_coordinate_email_submit($form_id, $form_values) {

// Set sql query to fetch recipients
  $sql = "SELECT DISTINCT u.mail FROM {node} n " . 
    "LEFT JOIN {location} l ON n.nid=l.oid " .
    "LEFT JOIN {countries} c ON UPPER(l.country)=c.ccid " .
    "JOIN {users} u ON u.uid=n.uid " .
    "JOIN {term_node} tn ON tn.nid=n.nid " .
    "WHERE l.type='node' AND tn.tid=" . $form_values['tid'];

  if($form_values['recipient_country']<>'all') $sql .= " AND c.ccid='" . $form_values['recipient_country'] . "'"; 
  $result = db_query($sql);

  if(db_num_rows($result)>0) {
// Fetching recipients
    while($row = db_fetch_array($result))  $dbrecipients[] = $row['mail'];
    $recipients = implode(',', $dbrecipients);

// Set subject  
    if($form_values['subject']<>'') {
      $subject = $form_values['subject'];
    } else {
      $subject = "News from  '" .  $form_values['title'] . "'";
    }

// Set content 
    $content->title  = $form_values['title'];
//    $content->nid    = $form_values['nid']; CHECK IF IS A PROBLEM!!!!
    $content->teaser = $form_values['content'];
    $content->type = 'fhwalk';
  
// Set vars for theming
    $vars = array(
  	  'forward_header_image' => variable_get('forward_header_image', ''),
  	  'site_name' => variable_get('site_name', 'Drupal'),
  	  'yemail' => $form_values['yemail'],
  	  'forward_message' => '',
  	  'message' => '',
  	  'base_url' => $base_url,
  	  'content' => $content,
  	  'dynamic_content' => '',
  	  'forward_ad_footer' => variable_get('forward_ad_footer', ''),
  	  'forward_footer' => variable_get('forward_footer', '')
    );

// Theming body
    $body = theme('forward_email', $vars);
  
// Set headers
    $headers = "From: ".$form_values['yemail']."\n";
    $headers .= "MIME-Version: 1.0\n";
    $headers .= "Content-type: text/html; charset=utf-8\n";

// Forward emails
//    forward_mail($recipients,$subject,$body,$headers);
  
// insert record into db to record nid, type and timestamp of send
    db_query("INSERT INTO {forward_log} (nid, type, timestamp) VALUES ('%d', '%s', %d)", $nid, "SENT", time());
    variable_set('forward_total', variable_get('forward_total', 0) +1);
    variable_set('forward_recipients', variable_get('forward_recipients', 0) + substr_count($recipients, ",") + 1);
    flood_register_event('forward');

    drupal_set_message("You sent the message to " . db_num_rows($result) . " recipient(s)", 'status');
  } else {
    drupal_set_message("No recipients selected!", 'status');
  }


// debug
//  $msg = print_r($form_values, true);
//  drupal_set_message("pippo dice: $msg E POI $sql");
}

/**
 * Mail form to sent email to organisers.
 * 
 * @ingroup fhwalk_coordinate
 * @param $term campaign taxonomy term
 */ 
function fhwalk_coordinate_email_form($term) {
global $user;

  $form['coordinator_message'] = array(
    '#type' => 'fieldset',
    '#title' => t('Send messages'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $from_name =  $user->name;
  $from_email = $user->mail; 
  $form['coordinator_message']['yname']  = array('#type' => 'hidden', '#value' => $from_name);
  $form['coordinator_message']['yemail'] = array('#type' => 'hidden', '#value' => $from_email);
  $form['coordinator_message']['tid']    = array('#type' => 'hidden', '#value' => $term->tid);
  $form['coordinator_message']['title']  = array('#type' => 'hidden', '#value' => $term->name);
   
  $form['coordinator_message']['subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject of the message'),
    '#default_value' => "News from  '$term->name'",
    '#description' => t('This will be the subject of message sent to selected organisers.'),
  );
  $form['coordinator_message']['content'] = array(
    '#type' => 'textarea',
    '#title' => t('Message to sent'),
    '#cols' => 75,
    '#rows' => 5,
    '#description' => t('This will be the content of message sent to selected organisers.'),
  );

// fetch countries where is a walk coordinated
  $sql = "SELECT l.country, c.name AS cname FROM {node} n " . 
    "LEFT JOIN {location} l ON n.nid=l.oid " .
    "LEFT JOIN {countries} c ON UPPER(l.country)=c.ccid " .
    "JOIN {users} u ON u.uid=n.uid " .
    "JOIN {term_node} tn ON tn.nid=n.nid " .
    "WHERE l.type='node' AND tn.tid=%d";
  $result = db_query($sql, $term->tid);
  $countries['all'] = 'all';
  while($row = db_fetch_array($result)) $countries[$row['country']] = $row['cname'];   

  $form['coordinator_message']['recipient_country'] = array(
    '#type' => 'select',
    '#title' => t('Country'),
    '#default_value' => 'all',
    '#options' => $countries,
    '#description' => t('Select organisers country'),  
  );

  $form['coordinator_message']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Send'),
  );

  return drupal_get_form('fhwalk_coordinate_email', $form);
}

/**
 * Walk campaign coordinate page
 * (param come from callback on menu hook)
 *  
 * @ingroup fhwalk_coordinate
 * @param $synonym campaign path
 * @param $tid taxonomy campaign tid
 */  
function fhwalk_coordinate($synonym, $tid) {
global $user;

  $term = taxonomy_get_term($tid);
  drupal_set_title(t('Coordinate') . ": $term->name");

// Get list of walk coordinated
  $form['walk_status'] = array(
    '#type' => 'fieldset',
    '#title' => t('Organiser Status') . $user->uid,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#weight' => -1
  );
  $form['walk_status']['list'] = array(
    '#value' => _fhwalk_coordinate_get_walk($tid, $user->uid),
  );
  $output = drupal_get_form('', $form);

// Get email form
  $output .= fhwalk_coordinate_email_form($term);


  return $output;
}


/**
 * Get fhwalk campaign status
 *  
 * @ingroup fhwalk_helpers
 * @param $sid  status id
 * @return status or array of status (if $sid=-1)
 */ 
function _fhwalk_status($sid=-1) {
  $status_options = array( 0=>"Closed", 1=>"Post Action", 2=>"Active" );
  if($sid>=0) {
    return $status_options[$sid];
  } else {
    return $status_options;
  }
}

/**
 * Get taxonomy options (only active campaign terms).
 *  
 * @ingroup fhwalk_helpers
 * @return  array of vocabulary terms corresponding to active campaigns
 */ 
function fhwalk_get_active_campaigns() {
  $options = array();
  $terms = taxonomy_get_tree(variable_get('fhwalk_vocabulary', 0));
  foreach($terms as $term) {
    $status_variable = 'fhwalk_' . $term->tid . '_status';
    if(variable_get("$status_variable", 0)) $options[$term->tid] = $term->name;   
  }
  return $options;
}

/**
 * Process admin page.
 *  
 * @ingroup fhwalk_core
 */
function fhwalk_admin_submit($form_id, $form_values) {
  $msg = print_r($form_values, true);
  $variable = 'fhwalk_' . $form_values['tid'] . '_status';
//  drupal_set_message("pippo dice: $form_id - $msg - $variable");
// set walk name and description
  $sql = "UPDATE {term_data} SET name = '%s', description = '%s' WHERE tid = %d";
  db_query($sql, $form_values['name'], $form_values['description'], $form_values['tid'] );
// set status
  variable_set("$variable", $form_values['status']);  
}

/**
 * fhwalk admin page.
 *  
 * @ingroup fhwalk_core
 */  
function fhwalk_admin() {
  if (variable_get('fhwalk_vocabulary', 0)==0) {
    drupal_set_message(t('First select a fhwalk vocabulary!'));
    drupal_goto('/admin/settings/fhwalk');
  };
  $terms = taxonomy_get_tree(variable_get('fhwalk_vocabulary', 0));
  $status_options = array( 0=>"Closed", 1=>"Post Action", 2=>"Active" );

  foreach($terms as $term) {
    $synonyms = taxonomy_get_synonyms($term->tid);
    $synonym = $synonyms[0];
    $status_variable = 'fhwalk_' . $term->tid . '_status';

    $form = array();
    $form["fhwalk_admin_$term->tid"] = array(
      '#type' => 'fieldset',
      '#title' => $term->name . ' - ' . $status_options[variable_get("$status_variable", 0)],
      '#collapsible' => TRUE,
      '#collapsed' => (variable_get("$status_variable", 0) == 0),
    );
//    $form_out = taxonomy_admin_term_edit($term->tid);
    $form["fhwalk_admin_$term->tid"]['name'] = array(
      '#type' => 'textfield', 
      '#title' => t('Campaign name'), 
      '#default_value' => $term->name, 
      '#maxlength' => 64, 
      '#required' => TRUE
    );
    $form["fhwalk_admin_$term->tid"]['description'] = array(
      '#type' => 'textarea', 
      '#title' => t('Description'), 
      '#default_value' => $term->description, 
      '#description' => t('A description of the walk campaign.')
    );
    $form["fhwalk_admin_$term->tid"]['date'] = array(
      '#type' => 'textarea', 
      '#title' => t('Date'), 
      '#default_value' => variable_get("fhwalk_date_$term->tid", '13/05/2007'), 
      '#description' => t('Enter the date (format day/month/year i.e. 13/05/2007).')
    );
    
    $status_help  = "<dl><dt><b>Campaign status</b></dt>";
    $status_help .= "<dt>Closed</dt><dd><b>Prohibit</b> new events from being added <b>and</b> comments</dd>";
    $status_help .= "<dt>Post Action</dt><dd><b>Prohibit</b> new events from being added <b>allows</b> comments</dd>";
    $status_help .= "<dt>Active</dt><dd><b>Allows</b> new events</dd>";
    $form["fhwalk_admin_$term->tid"]['status'] = array(
      '#type' => 'select', 
      '#title' => t('Status'), 
      '#options' => $status_options,
      '#default_value' => variable_get("$status_variable", 0), 
      '#description' => $status_help
    );
    $form["fhwalk_admin_$term->tid"]['tid'] = array(
      '#type' => 'textfield', 
      '#default_value' => $term->tid,
      '#attributes' => array( 'style' => 'visibility:hidden' ), //trick to use fhwalk_overview_submit
      '#weight' => 99
    );
    $form["fhwalk_admin_$term->tid"]['link'] = array(
      '#title'  => t('walk home page'),
      '#prefix' => "<div class='form-item'><label for='edit-name'>" . t('home') . ':</label>',
      '#value'  => l($term->name, $synonym),
      '#suffix' => '</div>',
    ); 
    $form["fhwalk_admin_$term->tid"]['submit'] = array('#type' => 'submit', '#value' => t('Submit')); 
    $out .=  drupal_get_form("fhwalk_admin", $form);

/*    
    $out .= taxonomy_admin_term_edit($term->tid);
*/
  }
//  $out = drupal_get_form('fhwalk_admin_form_term', $form); 
  return $out;
}

/******************************
 *
 * Local Country Pages function and helpers
 *
 *******************************/  

/**
 * Get LCP nodes.
 * 
 * @ingroup fhwalk_LCP
 * @param $country string (country)
 * @param $tid integer (campaign)
 * @return an array (indexed by language) with nid and title.
 */

function fhwalk_LCP_get_nodes($country, $tid) {
  $sql = 'SELECT n.nid, n.title, i18n.language FROM {node} n ' .
    'JOIN term_node tn ON tn.nid=n.nid ' .
    'JOIN location l ON l.oid=n.nid ' .
    'JOIN i18n_node i18n ON n.nid=i18n.nid ' .
    "WHERE l.country='%s' AND tn.tid=%d";
  $result=db_query($sql, $country, $tid);
  while($row=db_fetch_array($result)) {
    $nodes[$row['language']] = array(
      'language' => _fhlocalpage_getlang($row['language']),
      'nid'      => $row['nid'],
      'title'    => $row['title'],
      );
  }
//  $nodes= "$sql, $country, $tid " . db_num_rows($result);
  return $nodes;
}




function theme_event_album_flash($node) {

  list($tag_campaign, $tag_event) = split('/',  $node->path );
  $tags = "$tag_campaign,$tag_event";
  
  $qry_params  = "user_id=62728578@N00";
  $qry_params .= "&tags=$tags&tag_mode=all";
  $qry_params .= "&nsid=&text=&firstId=&v=1.6&codeV=1.26";
  $src = "http://www.flickr.com/slideShow/index.gne?$qry_params";
  $style  = "style='margin-top:10px' ";
  $style .= "frameBorder='0' width='500' height='500' scrolling='no'";
  $out = "<iframe src='$src' $style></iframe>";
//  $out .= "<p>$src</p>";
  return $out;
}

// remove _ and / from tag for flickr search
function _tags4flickr ($tag) {
  return str_replace(array("/","_"), "", $tag);
}

function theme_event_album_plain($node) {
//  global $flickr;
  list($tag_campaign, $tag_event) = split('/',  $node->path );
  $tags = "$tag_campaign $tag_event";
/*  
  $photos = $flickr->searchForTags('rome', 'all', 300);
  for ($j = 0; $j < count($photos); $j++) {
    $out .= print_r($photos[$j],true) . "<br />\n";
  }
*/
//  $out = print_r(_echo_slideshow_list_photos('cus'),true);
  $tag_flickr = _tags4flickr ($tag_event); 
  $query  = "SELECT * FROM {wtw_gallery_tags} WHERE tag = '$tag_flickr'";

  $photos_x_rows = 5;
  $num_rows = 6;
  $photos_x_page = $photos_x_rows * $num_rows;
  $result = pager_query($query, $photos_x_page);
//  $result = db_query($query);
  
  $out_album = "\n<!-- event_album_plain START -->\n";
  $out_album .= "<table class='photo_album' style='padding:5px; margin: auto;'>\n";
  $i = 0;
  while ($row = db_fetch_array($result)) {
    $pid = $row['photo_id'];
    $secret = $row['secret'];
    $server = $row['server'];
    
    $flickr_link = "http://www.flickr.com/photos/walktheworld/$pid/";
    $flickr_square = "http://static.flickr.com/$server/" . $pid . "_" . $secret . "_s.jpg";
/*
<img src="http://static.flickr.com/15/18866088_94e31da099_s.jpg" width="75" height="75" alt="Nyc registration" />    
*/
//    $base = 'http://www1.fighthunger.org/modules/echo_slideshow/photo.php/';
    if (($i%$photos_x_rows)==0) $out_album.= "  <tr class='photo_album'>\n";
    
    $out_album .= "    <td class='photo_album'>\n";
    $out_album .= "<a href='$flickr_link'><img src='$flickr_square' width='75' height='75' vspace='5' hspace='5'></a>\n";
    $out_album .= "    </td>\n";
//    $out_album .= "    <td style='border: 1px; solid #ddd; padding: 5px'><a href='$flickr_link'><img src='' width='75' height='75'></a></td>\n";
//    $out_album .= "    <td><img src=''><br />$i</td>\n";
    if (($i%$photos_x_rows)==($photos_x_rows-1)) $out_album .= "  </tr>\n";
    $i++;
  }
  $out_album .= "</table>\n";
  $out_album .= theme('pager', NULL, $photos_x_page);
  $out_album .= "\n<!-- event_album_plain END -->\n";
  
//  $photo_info = $flickr->getPhotoInfo(18873349);
  
//  $out_album .= $pid . " - " . print_r($photo_info,true);
//  $out_album .= print_r($flickr,true);
  

//  $out .= $out_album . theme('pager', 10, 0, array('noflash' => 'value'));

  return $out_album;
}


function fhwalk_get_photos($node, $instructions=NULL) {
  $flash = (isset($_GET['flash']));
//  $out .= echo_slideshow_slideshow($tags, $instructions, $flash);
  $out ='';
  if ($flash) {
    $out = theme('event_album_flash',$node);
    $msg = "If you'd like to see these photos without Flash, " .
      "<a href='node/$node->nid' class='active'>click here</a>";
    $out .= "<p align='center'><font size='-2'>$msg</font></p>";
  } else {
    $out = theme('event_album_plain',$node);
    $msg .= "If you'd like to see these photos in Flash, " .
      "<a href='node/$node->nid?flash' class='active'>click here</a>";
    $out .= "<p align='center'><font size='-2'>$msg</font></p>";
  }
  return $out;
}


/* gmap key
dev.fighthunger.org 
ABQIAAAAbfOVykIDfWkLXGy0_OSL9BT-NiS1gmUMH_veYwnhh1Z0wNDNpBRzS1akGbaMeYKibiyI1jmmBu83RA

www.fighthunger.org 
ABQIAAAAbfOVykIDfWkLXGy0_OSL9BRgf3C9hf3-9QMTBHhlaRzlk7IiGRSANts4wuV54Vxca7J9SJp4BcALeQ
*/


?> 

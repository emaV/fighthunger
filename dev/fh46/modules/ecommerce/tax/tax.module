<?php
// $Id: tax.module,v 1.6.2.1 2005/10/30 19:11:22 mathias Exp $

/********************************************************************
 * Drupal Hooks
 ********************************************************************/

/**
 * Implementation of hook_help()
 */
function tax_help($section = 'admin/help#tax') {
  switch ($section) {
    case 'admin/modules#description':
      return t('Enable a tax API for ecommerce.');
    case 'admin/store/tax':
      return t('Enter tax rules here.');
    case 'admin/settings/tax':
      return t('tax calculation methods are <a href="%tax_calc_url">here</a>.', array('%tax_calc_url' => url('admin/store/tax')));
  }

  return $output;
}

/**
 * Implementation of hook_menu()
 */
function tax_menu($may_cache) {
  $items = array();
  $access = user_access('administer store');
  if ($may_cache) {
    $items[] = array('path' => 'admin/store/tax', 'title' => t('taxes'), 'access' => $access, 'callback'=>'tax_admin_controller');
    $items[] = array('path' => 'admin/store/tax/list', 'title' => t('taxes'), 'access' => $access, 'type' => MENU_DEFAULT_LOCAL_TASK, 'weight' => -10);
    $items[] = array('path' => 'admin/store/tax/add', 'title' => t('add tax'), 'access' => $access, 'type' => MENU_LOCAL_TASK);
    $items[] = array('path' => 'admin/store/tax/edit', 'title' => t('edit tax'), 'access' => $access, 'type' => MENU_CALLBACK);
    $items[] = array('path' => 'admin/store/tax/delete', 'title' => t('delete tax'), 'access' => $access, 'type' => MENU_CALLBACK);
    $items[] = array('path' => 'admin/store/tax/add/autocomplete', 'title' => t('tax autocomplete'), 'callback' => 'tax_autocomplete_state', 'access' => $access, 'type' => MENU_CALLBACK);
  }
  return $items;
}

/**
 * Implementation of hook_checkoutapi().
 */
function tax_checkoutapi(&$txn, $op, $arg3 = NULL, $arg4 = NULL) {
  $output = '';
  switch ($op) {
    case 'review':
      if ($txn == 'tax') return TRUE;
      $box['subject'] = t('Tax');
      $billing = address_get_address($txn->billing_address);
      $rules = tax_get_rules();
      $states = address_build_states();
      $total_tax = 0;
      $taxable_amount = 0;

      foreach ($txn->items as $item) {
        if (product_is_shippable($item->nid)) {
          $taxable_amount += product_adjust_price($item) * $item->qty;
        }
      }

      foreach ($rules as $rule) {
        switch ($rule->realm) {
          case 'city':
            if ($billing->city == $rule->realm_value && tax_rule_product_match($txn, $rule)) {
              if ($tax = tax_calculate($taxable_amount, $rule->operand, $rule->operator)) {
                $total_tax += $tax;
              }
            }
            break;
          case 'country':
            if ($billing->country == $rule->realm_value && tax_rule_product_match($txn, $rule)) {
              if ($tax = tax_calculate($taxable_amount, $rule->operand, $rule->operator)) {
                $total_tax += $tax;
              }
            }
            break;
          case 'state':
            if ($billing->state) {
              if ($states[$billing->state] == $rule->realm_value && tax_rule_product_match($txn, $rule)) {
                if ($tax = tax_calculate($taxable_amount, $rule->operand, $rule->operator)) {
                  $total_tax += $tax;
                }
              }
            }
            break;
        }
      }
      $txn->gross += $total_tax;

      $box['content'] = payment_format($total_tax);
      return $box;
  }
}

/********************************************************************
 * Module Functions :: Controllers
 ********************************************************************/

/**
 * Controller. This callback is invoked via menu() when "admin/store/tax*" is hit.
 */
function tax_admin_controller($action = '') {
  $edit = $_POST['edit'];
  $op = $_POST["op"];

  switch ($op ? $op : $action) {
    case 'add':
      $output = form(tax_form_screen1($edit));
      break;

    // Step 2 of adding new tax rule.
    case t('Next'):
      $output = form(tax_form_screen2($edit));
      break;

    case 'edit':
      $edit = tax_get_rule(arg(4));
      $output = tax_form_screen1($edit);
      $output .= tax_form_screen2($edit);
      $output = form($output);
      break;

    case 'delete':
      if (is_numeric(arg(4))) {
        db_query('DELETE FROM {ec_tax} WHERE taxid = %d', arg(4));
        drupal_set_message(t('tax rule deleted'));
        drupal_goto('admin/store/tax');
      }
      break;

    case t('Submit'):
    case t('Update');
      if (tax_admin_form_validate($edit)) {
        tax_save_rule($edit);
        drupal_goto('admin/store/tax');
      }
      else {
        $output = form(tax_form_screen2($edit));
      }
      break;

    default:
      $output = tax_admin_overview();
  }

  print theme('page', $output);
}

/**
 * Show an overview of all the tax rules.
 */
function tax_admin_overview() {
  $output = '';
  $header = array(t('rule'), t('operations'));

  $result = db_query('SELECT * FROM {ec_tax}');
  while ($rule = db_fetch_object($result)) {
    $rows[] = array(t("Add %operator%operand where %realm = '%realm-value'", array('%operator' => $rule->operator, '%operand' => ($rule->operand == '+' ? '' : '%'), '%realm' => $rule->realm, '%realm-value' => $rule->realm_value)), l(t('edit'), "admin/store/tax/edit/$rule->taxid"). ' | '. l(t('delete'), "admin/store/tax/delete/$rule->taxid"));
  }

  if (count($rows) == 0) {
    $rows[] = array(array('data' => '<em>'. t('There are currently no tax rules.') .'</em>', 'colspan' => 5));
  }
  $output .= theme('table', $header, $rows);

  return $output;
}

/********************************************************************
 * Module Functions :: Validators
 ********************************************************************/

/**
 * Validate a tax rule.
 */
function tax_admin_form_validate(&$edit) {
  $errors = array();
  if (!$edit['realm_value']) {
    $errors['realm_value'] = t('You must enter a location value.');
  }

  if (empty($edit['ptype'])) {
    $errors['ptype'] = t('You must choose a product type.');
  }

  if (isset($edit['rate'])) {
    if (strstr($edit['rate'], '%')) {
      $edit['operand']  = '%';
      $edit['operator'] = rtrim($edit['rate'], '%');
    }
    else {
      $edit['operand']  = '+';
      $edit['operator'] = ltrim($edit['rate'], '+');
    }

    if (!is_numeric($edit['operator'])) {
      $errors['operator'] = t('Invalid operator');
    }
  }
  else {
    $errors['rate'] = t('You must enter a rate.');
  }

  foreach ($errors as $name => $message) {
    form_set_error($name, $message);
  }

  return count($errors) == 0;
}

/********************************************************************
 * Module Functions :: Save Routines
 ********************************************************************/

function tax_save_rule($edit) {
  $fields = tax_fields();
  if ($edit['taxid'] > 0 && db_result(db_query('SELECT COUNT(taxid) FROM {ec_tax} WHERE taxid = %d', $edit['taxid']))) {
    // Prepare the query:
    foreach ($edit as $key => $value) {
      if (in_array($key, $fields)) {
        if ($key == 'ptype') {
          $value = implode(',', $value);
        }
        $q[] = db_escape_string($key) ." = '%s'";
        $v[] = $value;
      }
    }

    db_query("UPDATE {ec_tax} SET ". implode(', ', $q) ." WHERE taxid = ". (int) $edit['taxid'], $v);
  }
  else {
    $edit['taxid'] = db_next_id('{ec_tax}_taxid');
    // Prepare the query:
    foreach ($edit as $key => $value) {
      if (in_array((string) $key, $fields)) {
        if ($key == 'ptype') {
          $value = implode(',', $value);
        }
        $k[] = db_escape_string($key);
        $v[] = $value;
        $s[] = "'%s'";
      }
    }

    db_query("INSERT INTO {ec_tax} (". implode(", ", $k) .") VALUES(". implode(", ", $s) .")", $v);
  }
}

function tax_form_screen1($edit = array()) {
  $output = NULL;
  $name = tax_invoke_taxapi($edit, 'name');
  $output .= form_select(t('Type of Location to define the new tax rule for'), 'realm', $edit['realm'], array_merge(array('state' => t('State / Province / Region'), 'country' => t('Country'), 'city' => t('City')), $name));
  $output .= form_submit(t('Next'));

  return $output;
}

function tax_form_screen2($edit = array()) {
  $output = NULL;
  $help = t('This value will be checked against the customer\'s shipping address.');
  if ($edit['realm'] == 'state') {
    $output .= form_textfield(t('Value for State / Province / Region'), 'realm_value', $edit['realm_value'], 32, 32, $help);
  }
  elseif ($edit['realm'] == 'country') {
    $country = address_build_countries();
    array_unshift($country, t('Please choose...'));
    $output .= form_select(t('Country'), 'realm_value', ($edit['realm_value'] ? $edit['realm_value'] : variable_get('ec_country', '')), $country, $help, 0, false, true);
  }
  elseif ($edit['realm'] == 'city') {
    $output .= form_textfield(t('Value for City'), 'realm_value', $edit['realm_value'], 32, 32, t('This value will be checked against the customer\'s shipping address.'));
  }
  else {
    $form = tax_invoke_taxapi($edit, 'admin form');
    $output .= $form[0];
  }

  $output .= form_hidden('realm', $edit['realm']);
  $output .= form_textfield(t('Adjustment'), 'rate', $edit['rate'], 10, 13, t('This rate can be a simple price addition or a percentage multiplier. For example, to add a 5.00 tax, enter +5.00. To multiply the gross price times 75%, enter 75%. If no operand is given, addition is assumed.'));
  $ptypes = product_invoke_productapi($name, 'wizard_select');
  asort($ptypes);
  $output .= form_checkboxes(t('Product type'), 'ptype', $edit['ptype'], $ptypes, t('Check the product types this tax rule applies to.'), NULL, TRUE);

  if ($edit['taxid']) {
    $output .= form_hidden('taxid', $edit['taxid']);
    $output .= form_submit(t('Update'));
  }
  else {
    $output .= form_submit(t('Submit'));
  }

  return $output;
}

/**
 * Retrieve a pipe delimited string of autocomplete suggestions for existing locations
 */
function tax_autocomplete_state($string) {
  $states = address_build_states();
  $matches = array();
  foreach ($states as $state) {
    if (preg_match("/^$string(.+?)/i", $state)) {
      $matches[$state] = $state;
    }
  }
  print drupal_implode_autocomplete($matches);
  exit();
}

/**
 * Invoke a hook_nodeapi() operation in all modules.
 *
 * @param &$txn
 *   A txn object.
 * @param $op
 *   A string containing the name of the taxapi operation.
 * @param $a3, $a4
 *   Arguments to pass on to the hook, after the $txn and $op arguments.
 * @return
 *   The returned value of the invoked hooks.
 */
function tax_invoke_taxapi(&$txn, $op, $a3 = NULL, $a4 = NULL) {
  $return = array();
  foreach (module_list() as $name) {
    $function = $name .'_taxapi';
    if (function_exists($function)) {
      $result = $function($txn, $op, $a3, $a4);
      if (is_array($result)) {
        $return = array_merge($return, $result);
      }
      else if (isset($result)) {
        $return[] = $result;
      }
    }
  }
  return $return;
}

/**
 * Get tax rule from the DB.
 */
function tax_get_rule($tid) {
  $result = db_query('SELECT * FROM {ec_tax} WHERE taxid = %d', (int) $tid);
  $rule = db_fetch_array($result);
  $rule['rate'] = $rule['operand'] == '%' ? $rule['operator'] . $rule['operand'] : $rule['operand'] . $rule['operator'];
  $rule['ptype'] = explode(',', $rule['ptype']);
  return $rule;
}

/**
 * Get all rules from the DB.
 */
function tax_get_rules() {
  $rules = array();
  $result = db_query('SELECT * FROM {ec_tax}');
  while ($rule = db_fetch_object($result)) {
    $rules[] = $rule;
  }
  return $rules;
}

/**
 * Return the tax cost for a given rule.
 */
function tax_calculate($gross, $operand, $op2) {
  switch ($operand) {
    case '+':
      return $op2;
    case '%':
      return($gross * ($op2/100));
  }
}

/**
 * Return TRUE if $rule applies to the current products in the cart.
 */
function tax_rule_product_match($txn, $rule) {
  $ptypes = explode(',', $rule->ptype);
  foreach ($txn->items as $item) {
    if (in_array($item->ptype, $ptypes)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Returnt the table names in the database.
 */
function tax_fields() {
  return array('taxid', 'realm', 'realm_value', 'ptype', 'operator', 'operand');
}
?>

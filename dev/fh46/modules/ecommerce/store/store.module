<?php
// $Id: store.module,v 1.44.2.20 2006/04/20 06:11:18 gordon Exp $

require_once(drupal_get_path('module', 'store'). '/store.inc');

/********************************************************************
 * Drupal Hooks
 ********************************************************************/

/**
 * Implementation of hook_cron().
 */
function store_cron() {
  /* Any item whose workflow is 'shipped', move it to 'completed'. This does
     seem presumptous. Ideally we'd email the user a list of shipped items for
     day and then adjust the shipping workflow after a given time period, such
     as 2 week (in case of returns or something) rather than automatically
     closing it here.  */
  db_query('UPDATE {ec_transaction} SET workflow = 6 WHERE workflow = 3 AND payment_status = 2');

  if (variable_get('payment_notices', 0)) {
    global $base_url;

    // Find order(s) with a 'cleared' payment status needs action.
    if ($count = db_result(db_query("SELECT COUNT(st.txnid) FROM {ec_transaction} AS st WHERE st.payment_status = '2' AND (st.workflow = '1' OR st.workflow = '2' OR st.workflow = '3' OR st.workflow = '4')"))) {

      $beg_month    = mktime(0, 0, 0, date('m'), 1, date('Y'));
      $mon_orders  = db_result(db_query("SELECT COUNT(txnid) FROM {ec_transaction} where created >= '%d' AND payment_status = '2' AND workflow = '6'", $beg_month));
      $mon_sales    = '$'. number_format(db_result(db_query("SELECT SUM(gross) FROM {ec_transaction} where created >= '%d' AND payment_status = '2' AND workflow = '6'", $beg_month)), 2);

      $buf = t("%count order(s) with a 'cleared' payment status needs action: \n", array('%count' => $count));
      $result = db_query("SELECT * FROM {ec_transaction} AS st WHERE st.payment_status = '2' AND (st.workflow = '1' OR st.workflow = '2' OR st.workflow = '3' OR st.workflow = '4') ORDER BY st.txnid DESC");
      while ($data = db_fetch_object($result)) {

        $buf .= t('Order #%txnid created %timestamp ago', array('%txnid' => $data->txnid, '%timestamp' => format_interval(time() - $data->created, 2))). "\n";
        $buf .= t('Workflow status: %transaction-workflow', array('%transaction-workflow' => transaction_get_workflow($data->workflow))). "\n";
        $buf .= t('Email: %email', array('%email' => $data->mail)). "\n";
        $buf .= t('Total: %gross', array('%gross' => payment_format($data->gross))). "\n";

        $r = db_query("SELECT stp.*, st.payment_status, st.workflow FROM {ec_transaction} AS st, {ec_transaction_product} AS stp WHERE st.txnid = '%d' AND st.txnid = stp.txnid ORDER BY st.txnid DESC", $data->txnid);
        $items = NULL;
        $has_shippable_item = FALSE;
        while ($item = db_fetch_object($r)) {
          foreach(product_load($item) as $key => $value) {
            if ($key != 'title' && $key != 'price') {
              $item->$key = $value;
            }
          }

          if (product_is_shippable($item->nid)) {
            $has_shippable_item = TRUE;
          }

          $sku = ($item->sku) ? " [$item->sku]" : "";
          $items .= t('%order of %title at %price each', array('%order' => format_plural($item->qty, '1 order', '%count orders'), '%title' => $item->title. $sku, '%price' => payment_format($item->price)));
        }

        /* If the transaction has no shippable items and the payment status is
           'complete' and the workflow is 'transaction received', set the
           workflow to 'complete' */
        if (!$has_shippable_item && $data->payment_status == 2 && $data->workflow == 1) {
          db_query("UPDATE {ec_transaction} SET workflow = '6' WHERE txnid = %d", $data->txnid);
        }

        $shipping_to = store_format_address($data, 'shipping', 'text');
        $billing_to = store_format_address($data, 'billing', 'text');

        $buf .= "Shipping to:\n$shipping_to\nBilling to:\n$billing_to\n";
        $buf .= "$items";
        $buf .= "\nUpdate: $base_url/admin/store/transaction/edit/$data->txnid\n";
        $buf .= "=====\n";

      }

      $output = $buf;
      $output .= t("(These orders will no longer be listed once the transaction workflow is set to either 'Completed' or 'Canceled')");
      $output .= t("\nMonthly Summary\nNumber of completed orders: %monthly-orders\nSales: %monthly-sales\n", array('%monthly-orders' => $mon_orders, '%monthly-sales' => $mon_sales));
      $output .= t("Want more reports? Visit %base_url/admin/store\n", array('%base_url' => $base_url));

      $subject    = t('%site-name transaction summary', array('%site-name' => variable_get('site_name', 'Drupal')));
      $to         = variable_get("site_mail", ini_get("sendmail_from"));
      $from       = variable_get("site_mail", ini_get("sendmail_from"));
      $headers    = "From: $from\nReply-to: $from\nX-Mailer: PHP\nReturn-path: $from\nErrors-to: $from";

      user_mail($to, $subject, $output, $headers);
    }
  } // End receive payment notices.

  // Handle recurring payment notifications
  if (variable_get('payment_recurring', 0) == 1) {
    product_send_recurring_payment_notifications();
  }
}

/**
 * Implementation of help_hook()
 */
function store_help($section = 'admin/help#store') {
  switch ($section) {
    case 'admin/modules#description':
      return t("Configuration module for ecommerce.");

    case 'admin/store/search':
      $output = t("<p>Use this search form to find transaction related information.</p>
          <h2>Advanced search techniques</h2>
          <p>The textfields in this form recognize special operators like greater than (&gt;), less than (&lt;), comma separated values and equals to, which is also the default option if none is specified. This allows you to easily find ranges and multiple values and works with IDs and dates.</p>
      ");
      return $output;

    case 'admin/store/transaction':
      return t("<p>This is all the transactions for your store. Use the search form if you want to <a href=\"%transaction_search\">search the data and filter the results</a>.</p>", array("%transaction_search" => url("admin/store/search")));

    case 'admin/store/transaction/add':
      return t("<p>No mail will be sent to the user.</p>");

    case 'admin/store':
      return t("<p>Can't find an order?  <a href=\"%show_all_transactions\">View</a> or <a href=\"%transaction_search\">search</a> all transactions.</p>", array("%transaction_search" => url("admin/store/search"), "%show_all_transactions" => url("admin/store/search&txnid=>0")));
  }
}

/**
 * Implementation of menu_hook()
 */
function store_menu($may_cache) {
  global $user;
  $items  = array();

  $access = user_access('administer store');

  if ($may_cache) {
    $items[] = array('path' => 'admin/store', 'title' => t('store'), 'callback' => 'store_admin', 'access' => $access);
    $items[] = array('path' => 'admin/store/transaction', 'title' => t('transactions'), 'access' => $access);
    $items[] = array('path' => 'admin/store/search', 'title' => t('search'), 'access' => $access);
    $items[] = array('path' => 'admin/store/transaction/create', 'title' => t('create transaction'), 'access' => $access);
    $items[] = array('path' => 'admin/store/transaction/print', 'title' => t('print invoice'),
      'callback' => 'store_invoice', 'access' => $access, 'type' => MENU_CALLBACK);
    $items[] = array('path' => 'admin/store/transaction/product/view', 'title' => t('admin items ordered'),
      'callback' => 'store_transaction_items', 'access' => $access, 'type' => MENU_CALLBACK);
    $items[] = array('path' => 'admin/store/settings', 'title' => t('settings'),
      'callback' => 'store_settings_controller', 'access' => user_access('administer store'));
  }
  else {
    $txnid = arg(4);
    if (!is_numeric($txnid)) {
      $txnid= arg(3);
    }

    global $user;

    $user_access = false;
    $uid = $user->uid;
    if ($user->uid == 1 || user_access('administer store')) {
      if (arg(2) > 0) {
        $uid = arg(2);
      }
      $user_access = true;
    }
    elseif ($user->uid == arg(2)) {
      $user_access = true;
    }


    $view_transaction = false;
    if (is_numeric($txnid) && ($access || db_result(db_query('SELECT COUNT(uid) FROM {ec_transaction} WHERE txnid = %d AND uid = %d', $txnid, $uid)))) {
      $view_transaction = true;
    }

    $items[] = array('path' => 'store/transaction/view', 'title' => t('view transaction'),
      'callback' => 'store_transaction_view', 'access' => $view_transaction, 'type' => MENU_CALLBACK);
    $items[] = array('path' => 'store/transaction/address/edit', 'title' => t('Update shipping address'),
      'callback' => 'store_user_address_edit', 'access' => $view_transaction, 'type' => MENU_CALLBACK);
    $items[] = array('path' => 'store/transaction/product/view', 'title' => t('user items ordered'),
      'callback' => 'store_user_history_items', 'access' => $view_transaction, 'type' => MENU_CALLBACK);

    $items[] = array('path' => "store/history/$uid", 'title' => t('order history'),
      'callback' => 'store_user_history', 'access' => $user_access, 'type' => MENU_CALLBACK);

    $items[] = array('path' => "store/history/$uid/subscriptions", 'title' => t('order history'),
      'callback' => 'store_user_subscriptions', 'access' => $user_access, 'type' => MENU_CALLBACK);
  }

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function store_perm() {
  return array('administer store');
}

/**
 * Implementation of hook_settings().
 */
function store_settings() {
  $options = array(
      t('Customers do not have to create accounts in order to purchase items from this site.'),
      t('Customers must create accounts before purchasing an item from this site.'));
  $output = form_radios(t('Authenticated customers'), 'store_auth_cust', variable_get('store_auth_cust', 1), $options, t('There are several advantages in having customers create accounts. When they shop, the items in their cart will be remembered from visit to visit, and they can store their shipping and billing addresses in an address book at this site.'));

  $site_mail = variable_get('site_mail', ini_get('sendmail_from'));
  if (!$site_mail) {
    $site_mail = 'no e-mail address found';
  }

  $output .= form_radios(t('Transaction notices'), 'payment_notices', variable_get('payment_notices', 0), array(t('Disabled'), t('Enabled')), t("Enable or disable transaction notifications.  If enabled, the site administrator (%site_mail) will receive an email summarizing the status of all orders. The frequency of emails is dependent on how often the site administrator has scheduled to run cron jobs.  Finally, The site administrator e-mail address can be changed in the <a href=\"%general_config_screen\">general configuration screen</a>,", array('%site_mail' => $site_mail, '%general_config_screen' => url('admin/settings'))));

  $output .= t('<h3>Store module dependencies</h3>');
  $header = array(t('Module name'), t('Status'));
  $store_mods = array('address' => 'address', 'parcel' => 'parcel', 'payment' => 'payment', 'paypal' => 'paypal', 'product' => 'product', 'shipping' => 'shipping', 'cart' => 'cart', 'tangible' => 'tangible', 'file' => 'file');
  foreach ($store_mods as $name => $mod_name) {
    if (module_exist($mod_name)) {
      $row[] = array($name, t('Installed'));
    }
    else {
      $row[] = array($name, t('Not found'));
    }
  }
  $output .= theme('table', $header, $row);
  $output .= form_textarea(t('Order history overview'), 'ec_order_overview', variable_get('ec_order_overview', ''), 70, 5, t('This text will be displayed at the top of users\' order history pages.'));
  $output .= form_checkbox(t('Hide product page.'), 'ec_hide_product_page', 1, variable_get('ec_hide_product_page', 0), t('Enable this option if you are using a custom product page.'));

  return $output;
}

/**
 * Implementation of hook_user().
 */
function store_user($type, &$edit, &$user) {
  // Only display the link for the user who owns it.
  if ($type == 'view' && $GLOBALS['user']->uid == $user->uid) {
    return array(t('History') => form_item(t('Orders'), l(t('View your order history'), "store/history/$user->uid")));
  }
}

/********************************************************************
 * Themeable Functions
 ********************************************************************/

function theme_store_invoice($txnid, $print_mode = TRUE) {
  global $base_url;

  $header = array();
  $row    = array();
  $t      = store_transaction_load($txnid);

  if (empty($t->mail) && $t->uid > 0) {
    $t->mail = db_result(db_query('SELECT mail FROM {users} WHERE uid = %d', $t->uid));
  }

  if ($t->items) {
    $header = array(t('Quantity'), t('Item'), t('Price'));

    $shippable = FALSE;
    foreach ($t->items as $p) {
      $prod = product_load($p);
      if (product_is_shippable($p->nid)) $shippable = TRUE;

      $subtotal += $p->qty *  $p->price;
      $details = '';
      if (is_array($p->data)) {
        foreach ($p->data as $key => $value) {
          if ($value) {
            $items[] = '<strong>'. check_plain($key). ': </strong>'. check_plain($value);
          }
        }
        if ($items) {
          $details = theme('item_list', $items);
        }
      }

      $row[] = array(array('data' => $p->qty, 'align' => 'center', 'valign' => 'top'), '<em>'. check_plain($p->title). '</em> '. (($prod->sku != '') ? "[". check_plain($prod->sku) ."]" : ''). '<br />'. $details, array('data' => payment_format($p->price), 'valign' => 'top'));
    }

    if ($shippable) {
      $row[] = array(array('data' => t('<strong>Shipping:</strong> %shipping-price', array('%shipping-price' => payment_format($t->shipping_cost))), 'colspan' => 3, 'align' => 'right'));
    }
    $row[] = array(array('data' => '<hr size="1" noshade="noshade" />', 'colspan' => 3, 'align' => 'right'));
    $row[] = array(array('data' => t('<strong>Total:</strong> %total', array('%total' => payment_format($t->gross))), 'colspan' => 3, 'align' => 'right'));
  }

  $payment_info  = t('<div><strong>Ordered On:</strong> %order-date</div>', array('%order-date' => format_date($t->created)));
  $payment_info .= t('<div><strong>Transaction ID:</strong> %txnid</div>', array('%txnid' => $t->txnid));

  $css        = $base_url .'/'. drupal_get_path('module', 'store') .'/invoice.css';
  $site_name  = t('%site-name Invoice', array('%site-name' => variable_get("site_name", "drupal")));

  if ($shipping_to = store_format_address($t, 'shipping', 'html')) {
    $shipping_label = t('Shipping to');
  }

  if ($billing_to = store_format_address($t, 'billing', 'html')) {
    $billing_label = t('Billing to');
  }

  $email_label = t('E-mail:');
  $items_label = t('Items ordered');
  $items_view = theme('table', $header, $row, array('cellpadding' => 3, 'cellspacing' => 3));

  $payment_label = t('Payment Info');

  if ($print_mode) {
    $output .= <<<EOD
<html>
  <head>
    <style type="text/css" media="all">@import url('. $css .');</style>
  </head>
  <body>    
EOD;
  }

$output .= <<<EOD
    <h1>$site_name</h1>

    <table cellspacing="5">
      <tr>
        <th align="left">$shipping_label</th>
        <th align="left">$billing_label</th>
      </tr>
      <tr>
        <td>$shipping_to</td>
        <td>$billing_to</td>
      </tr>
    </table>

    <p><strong>$email_label</strong> $t->mail</p>

    <h2>$items_label</h2>
    $items_view

    <h2>$payment_label</h2>
    $payment_info
EOD;

if ($print_mode) {
  $output .= <<<EOD
    </body>
  </html>
EOD;
}

  if (!$print_mode) {  
    return $output;
  }
  print $output;
}

/********************************************************************
 * Module Functions
 ********************************************************************/

/**
 * Controller for the URI's of admin/store*
 */
function store_admin() {

  $edit = $_POST['edit'];
  $op = $_POST["op"];

  if (!$op) {
    $op = arg(2);
  }

  switch ($op) {
    case 'search':
    case 'Search':
      if ($_GET['txnid'] == '>0') menu_set_location(array(array('path' => 'admin/store/transaction')));
      $output = store_query();
      break;

    case 'transaction':
      if (arg(3) == 'edit') {
        $output = store_transaction_form(store_transaction_load(arg(4)));
      }
      elseif (arg(3) == 'send') {
        $title = t('Message preview');
        $output = store_send_invoice_email(arg(4), 1);
      }
      elseif (arg(3) == 'create') {
        $title = t('Create new transaction');
        $edit = array('destination' => urlencode(base64_encode('admin/store/search?sort=desc&order=txnid&txnid=>0&dsp_details=1')));
        $output = store_transaction_form($edit);
      }
      else {
        $output = store_transaction_default();
      }
      break;

    case t('Update transaction'):
    case t('Create new transaction'):
      if (store_transaction_validate($edit)) {
        $edit['txnid'] = store_transaction_save($edit);
        if ($edit['destination']) {
          unset($_REQUEST['destination']);
          unset($_REQUEST['edit']['destination']);
          drupal_goto(base64_decode(urldecode($edit['destination'])));
        }
        else {
          $output = store_admin_overview();
        }
      }
      else {
        $output = store_transaction_form($edit);
      }
      break;

    case 'Delete':
      $output = store_transaction_confirm_delete(arg(4));
      break;

    case 'Confirm delete':
      $output = store_transaction_delete($edit['txnid']);
      if ($edit['destination']) {
        unset($_REQUEST['destination']);
        unset($_REQUEST['edit']['destination']);
        drupal_goto(base64_decode(urldecode($edit['destination'])));
      }
      else {
        $output = store_admin_overview();
      }
      break;

    default:
      drupal_set_title(t('Store (%revision)', array('%revision' => '$Revision: 1.44.2.20 $')));
      $output = store_admin_overview();
  }

  drupal_set_title($title);
  print theme('page', $output);
}

function store_settings_controller() {
  print theme('page', t('Eventually, all store settings will be listed here.'));
}

function store_transaction_default() {
  drupal_goto('admin/store/search&txnid=>0');
}

function store_transaction_confirm_delete($txnid) {
  $form = t('<p>Are you sure you want to delete transaction #%txnid?</p>', array('%txnid' => $txnid));
  $form .= form_hidden('txnid', $txnid);
  $edit['destination'] = ($edit['destination']) ? $edit['destination'] : $_GET['destination'];
  $form .= form_hidden('destination', $edit['destination']);
  $form .= form_submit('Confirm delete') . form_submit('Cancel');

  return form($form);
}

function store_transaction_delete($txnid) {

  $t = store_transaction_load($txnid);
  db_query('DELETE FROM {ec_transaction} WHERE txnid = %d', $txnid);
  db_query('DELETE FROM {ec_transaction_product} WHERE txnid = %d', $txnid);
  db_query('DELETE FROM {ec_renewal} WHERE txnid = %d', $txnid);
  store_invoke_ec_transactionapi($t, 'delete');
}

/**
 * Return an array of transaction workflow settings.
 */
function store_transaction_workflow() {
  $transaction_workflow = array (
    1 => t('transaction received'),
    2 => t('invoiced'),
    3 => t('shipped'),
    4 => t('awaiting customer response'),
    5 => t('canceled'),
    6 => t('completed'),
  );

  return $transaction_workflow;
}

function transaction_get_workflow_id($name) {
  return array_search(strtolower(t('%transaction-status', array('%transaction-status' => $name))), store_transaction_workflow());
}

function transaction_get_workflow($id) {
  $workflow = store_transaction_workflow();
  return t('%transaction-status', array('%transaction-status' => $workflow[$id]));
}

function store_transaction_validate(&$edit) {
  $edit['section'] = $edit['section'] ? strtoupper($edit['section']) : 'ALL';

  switch ($edit['section']) {

    case 'OVERVIEW':
      store_transaction_validate_overview($edit);
      break;

    case 'ADDRESSES':
      store_transaction_validate_addresses($edit);
      break;

    case 'ITEMS':
      store_transaction_validate_item($edit);
      break;

    default:
      store_transaction_validate_overview($edit);
      store_transaction_validate_addresses($edit);
      store_transaction_validate_item($edit);
  }

  store_invoke_ec_transactionapi($edit, 'validate', strtoupper($edit['section']));

  return ((form_get_errors()) ? false : true);
}

function store_transaction_fields() {
  return array('txnid', 'uid', 'mail', 'shipping_firstname', 'shipping_lastname', 'shipping_street1', 'shipping_street2', 'shipping_zip', 'shipping_city', 'shipping_state', 'shipping_country', 'shipping_cost', 'billing_firstname', 'billing_lastname', 'billing_street1', 'billing_street2', 'billing_zip', 'billing_city', 'billing_state', 'billing_country', 'payment_method', 'payment_status', 'coupon', 'workflow', 'gross', 'expires', 'created', 'changed');
}

function store_transaction_product_fields() {
  return array('txnid', 'nid', 'title', 'price', 'qty', 'expires', 'is_recurring', 'price_interval', 'price_unit', 'price_cycle', 'auto_charge', 'last_notify', 'data');
}

/**
 * Save a transaction to the database.
 */
function store_transaction_save($edit) {
  $edit = object2array($edit);
  global $user;

  if (!$edit['changed']) {
    $edit['changed'] = time();
  }

  $transaction_fields = store_transaction_fields();
  $product_fields = store_transaction_product_fields();
  $paid = FALSE;
  $add_to_roles = FALSE;

  if ($edit['txnid']) { // Update
    $completed = payment_get_status_id('completed');
    $previous_payment_status = db_result(db_query('SELECT payment_status FROM {ec_transaction} AS st WHERE st.txnid = %d', $edit['txnid']));

    // Trigger the PAID event only
    if ($edit['payment_status'] == $completed && $previous_payment_status != $completed) {
      $paid = TRUE;
    }

    foreach ($transaction_fields as $key) {
      if (isset($edit[$key])) {
        $q[] = db_escape_string($key) ." = '%s'";
        $v[] = $edit[$key];
      }
    }
    if (is_array($q) && is_array($v)) {
      db_query('UPDATE {ec_transaction} SET '. implode(', ', $q) ." WHERE txnid = $edit[txnid]", $v);
    }

    // Handle renewals.
    if (is_array($edit['renewal'])) {
      db_query('DELETE FROM {ec_renewal} WHERE txnid = %d', $edit['txnid']);
      foreach ($edit['renewal'] as $rnid => $rtxnid) {
        db_query('INSERT INTO {ec_renewal} (txnid, rtxnid, rnid) VALUES (%d, %d, %d)', $edit['txnid'], $rtxnid, $rnid);
      }
    }

    if (is_array($edit['items'])) {
      foreach ($edit['items'] as $item) {
        $node = node_load(array("nid" => $item->nid));
        $item->price = product_adjust_price($node);
        if ($item->price_interval) {
          $item->is_recurring = 1;
          if ($paid) $add_to_roles = TRUE;
        }
        else {
          $item->is_recurring = 0;
        }
        $item->data = serialize($item->data);
        unset($q, $v);
        foreach($product_fields as $key) {
          if (isset($item->$key)) {
            $q[] = db_escape_string($key) ." = '%s'";
            $v[] = $item->$key;
          }
        }
        db_query('UPDATE {ec_transaction_product} SET '. implode(', ', $q) ." WHERE txnid = '". $edit['txnid'] ."' AND nid = '".$item->nid  ."'", $v);
      }
    }
    elseif ($edit['nids']) {
      store_transaction_save_nids($edit);
    }

    $edit = array2object($edit);
    store_invoke_ec_transactionapi($edit, 'update');
    $edit = object2array($edit);

    /* Update inventory for transactions that just gained a payment status of 'completed' */
    if ($paid) {
      store_payment_status_complete_callback($edit);
    }
  }
  else { // INSERT
    if (!$edit['created']) {
      $edit['created'] = time();
    }

    if (!$edit['payment_status']) {
      /* Default payment status is pending. */
      $edit['payment_status'] = payment_get_status_id('pending');
    }

    if (!$edit['workflow']) {
      /* Default transaction is Transaction received. */
      $edit['workflow'] = 1;
    }

    $edit['txnid'] = db_next_id('{ec_transaction}_txnid');

    foreach ($transaction_fields as $key) {
      if (isset($edit[$key])) {
        $k[] = db_escape_string($key);
        $v[] = $edit[$key];
        $s[] = "'%s'";
      }
    }
    db_query('INSERT INTO {ec_transaction} ('. implode(', ', $k) .') VALUES('. implode(', ', $s) .')', $v);

    // Insert the metadata for transactions that contain renewals.
    foreach ((array) $edit['renewal'] as $rnid => $rtxnid) {
      db_query('INSERT INTO {ec_renewal} (txnid, rtxnid, rnid) VALUES (%d, %d, %d)', $edit['txnid'], $rtxnid, $rnid);
    }

    if ($edit['items']) {

      foreach ($edit['items'] as $item) {
        $node = node_load(array("nid" => $item->nid));
        $item->price = product_adjust_price($node);
        $item->is_recurring = ($item->price_interval) ? 1 : 0;
        if ($item->is_recurring) {
          if (!$item->expires) {
            $item->expires = strtotime($item->price_interval. ' '. product_unit_nice_name($item->price_unit, $item->price_interval), time());
          }
          if ($paid) $add_to_roles = TRUE;
        }
        $item->txnid = $edit['txnid'];
        $item->title = db_result(db_query('SELECT title FROM {node} WHERE nid = %d', $item->nid));
        $item->ptype = db_result(db_query('SELECT ptype FROM {ec_product} WHERE nid = %d', $item->nid));

        unset($k, $v, $s);
        foreach ($product_fields as $key) {
          if (isset($item->$key)) {
            $k[] = db_escape_string($key);
            $v[] = $item->$key;
            $s[] = "'%s'";
          }
        }
        db_query('INSERT INTO {ec_transaction_product} ('. implode(', ', $k) .') VALUES('. implode(', ', $s) .')', $v);
        module_invoke($item->ptype, 'productapi', $item, 'transaction', 'insert');
      }
    }
    elseif ($edit['nids']) {
      store_transaction_save_nids($edit);
    }

    /* Empty the shopping cart. */
    cart_empty($edit['uid']);

    $edit = array2object($edit);
    store_invoke_ec_transactionapi($edit, 'insert');
    $edit = object2array($edit);
    /* Update inventory for new transactions that have a payment status of 'completed' */
    $paid = FALSE;
    if ($edit['payment_status'] == payment_get_status_id('completed')) {
      $paid = TRUE;
      store_payment_status_complete_callback($edit);
    }
  }
  store_change_role($edit, $add_to_roles);

  if (strstr($_GET['q'], 'transaction/create')) {
    drupal_set_message(t('the transaction has been created'));
  }

  return $edit['txnid'];
}

function store_transaction_save_nids($txn) {
  $paid = FALSE;
  $add_to_roles = FALSE;
  if ($txn['payment_status'] == payment_get_status_id('completed')) $paid = TRUE;
  $product_fields = store_transaction_product_fields();
  /* Let's look for a CSV of nids, which is used in manual transaction creation. */
  $nids = explode(',', $txn['nids']);
  $numset = count($nids);
  for ($i = 0; $i < $numset; $i++) {
    $item->nid = trim($nids[$i]);
    $item = node_load(array('nid' => $item->nid));
    $item->qty = 1;
    $item->txnid = $txn['txnid'];

    if ($item->is_recurring) {
      if (!$item->expires) {
        $item->expires = strtotime($item->price_interval. ' '. product_unit_nice_name($item->price_unit, $item->price_interval), time());
      }
      $add_to_roles = TRUE;
    }

    db_query('DELETE FROM {ec_transaction_product} WHERE txnid = %d AND nid = %d', $item->txnid, $item->nid);
    $k = $v = $s = array();
    foreach ($item as $key => $value) {
      if (in_array($key, $product_fields)) {
        $k[] = db_escape_string($key);
        $v[] = $value;
        $s[] = "'%s'";
      }
    }
    db_query('INSERT INTO {ec_transaction_product} ('. implode(', ', $k) .') VALUES('. implode(', ', $s) .')', $v);
    module_invoke($item->ptype, 'productapi', $item, 'transaction', 'insert');
  }
  store_change_role($txn, $add_to_roles);
}

/**
 * Assign or remove a user from a role based on payment status and product expiration.
 *
 */
function store_change_role($txn, $add_to_roles) {
  $txn = array2object($txn);
  $u = user_load(array('uid' => $txn->uid));
  $on_payment_roles = array_flip((array) variable_get('on_payment_roles', ''));
  $roles = user_roles();

  if ($u->uid >= 1 && is_array($on_payment_roles)) {

    // If PAID - add user to role, else drop 'em
    if ($add_to_roles) {
      foreach($on_payment_roles as $rid => $rname) {
        if (!isset($u->roles[$rid])) {
          watchdog('ecommerce', t('Adding %name to role %role.', array('%name' => theme('placeholder', $u->name), '%role' => theme('placeholder', $roles[$rid]))));
          $u->roles[$rid] = '';
        }
      }
      user_save($u, array('roles' => $u->roles));
    }
    else {
      // When unsetting a role, we have to check if the user has any purchases from other
      // transactions that'll keep him/her in the paid member role.
      $remove_from_role = TRUE;
      $rp = product_find_recurring_payments($u->uid);
      foreach ((array) $rp as $p) {
        if (!$p->expired && $p->payment_status == payment_get_status_id('completed')) {
          $remove_from_role = FALSE;
        }
      }
      if ($remove_from_role) {
        foreach($u->roles as $rid => $rname) {
          if (isset($on_payment_roles[$rid])) {
            watchdog('ecommerce', t('Removing %name from role %role.', array('%name' => theme('placeholder', $u->name), '%role' => theme('placeholder', $roles[$rid]))));
            unset($u->roles[$rid]);
          }
        }
      }
      user_save($u, array('roles' => $u->roles));
    }
  }
}

/**
 * When the payment_status is marked complete invoke the
 * 'on payment completion' callback.  This is only when the payment status
 * changes to complete, so it's good place for things like inventory updates and
 * account credits.
 *
 * $t array of transaction details
 */
function store_payment_status_complete_callback($t) {
  /* Reload the complete transaction from the database so that all the
   * items get processed for the "on payment completion" and recurring
   * payments get updated for all items. */
  $t = object2array($t);
  $t = object2array(store_transaction_load($t['txnid']));
  if (is_array($t['items'])) {
    foreach ($t['items'] as $nid => $item) {
      $item = object2array($item);
      $node = node_load(array('nid' => $item['nid']));
      // Reset/extend the expiration date for recurring payments.
      if ($item['rtxnid'] && $item['rnid']) {
        $ritem = db_fetch_object(db_query('SELECT stp.expires, stp.price_interval, stp.price_unit FROM {ec_transaction} AS st, {ec_transaction_product} AS stp WHERE stp.is_recurring = 1 AND st.txnid = stp.txnid AND stp.txnid = %d AND stp.nid = %d', $item['rtxnid'], $item['rnid']));
        $foo->nid = $item['rnid'];
        $rnode = product_load($foo);
        // We should use the data from the current existing product first. If
        // that doesn't work (e.g., the node is deleted), use the previous
        //transactions price interval data
        if ($node->is_recurring) {
          $item['expires'] = strtotime($rnode->price_interval. ' '. product_unit_nice_name($rnode->price_unit, $rnode->price_interval), $ritem->expires);
        }
        else {
          $item['expires'] = strtotime($ritem->price_interval. ' '. product_unit_nice_name($ritem->price_unit, $ritem->price_interval), $ritem->expires);
        }
        db_query('UPDATE {ec_transaction_product} SET expires = %d WHERE txnid = %d AND nid = %d', $item['expires'], $item['rtxnid'], $item['rnid']);
      }

      foreach ($item as $key => $value) {
        $node->$key = $value;
      }
      $node->uid = $t['uid'];
      module_invoke($node->ptype, 'productapi', $node, 'on payment completion');
    }
  }
  // give all modules a chance to react to payment completion event
  module_invoke_all('ecommerceapi', $t, 'on payment completion');
}

/**
 * Valid sections are
 *    - overview: changing workflow, timestamps, and totals
 *      admin/store/transaction
 *
 *    - addresses: shipping and billing info
 *      admin/store/transaction/address
 *
 *    - items: editing and adding items
 *      admin/store/transaction/item/
 */
function store_transaction_form($edit = null) {
  $edit = is_array($edit) ? array2object($edit) : $edit;

  $section = $edit->section ? $edit->section : $_GET['section'];

  switch (strtoupper($section)) {

    case 'OVERVIEW':
      $form = store_transaction_overview_form($edit);
      break;

    case 'ADDRESSES':
      $form = store_transaction_addresses_form($edit);
      break;

    case 'ITEMS':
      $form = store_transaction_item_form($edit);
      break;

    default:
      $form = store_transaction_overview_form($edit);
      $form .= store_transaction_addresses_form($edit);
      $form .= store_transaction_item_form($edit);
  }

  if ($edit->uid && is_numeric($edit->uid)) {
    $edit->uid = db_result(db_query('SELECT name FROM {users} WHERE uid = %d', $edit->uid));
  }

  $edit->destination = $edit->destination ? $edit->destination : $_GET['destination'];
  $form .= form_hidden('destination', $edit->destination);

  if ($edit->txnid) {
    $form .= form_hidden('txnid', $edit->txnid);
    $form .= form_submit('Update transaction') . form_submit(t('Delete'));
  }
  else {
    $form .= form_submit(t('Create new transaction'));
  }

  $form .= form_hidden('section', $section);
  $output = form($form);

  return $output;
}

function store_send_invoice_email($txnid, $preview = null) {

  $t = store_transaction_load($txnid);

  $user_data = t("Shipping to:\n%shipping-address\n", array('%shipping-address' => store_format_address($t, 'shipping')));
  $user_data .= t("\nBilling to:\n%billing-address\n", array('%billing-address' => store_format_address($t, 'billing')));

  $billing_name = ucfirst($t->billing_firstname). ' '. ucfirst($t->billing_lastname);

  $items = "";
  if ($t->items) {
    foreach ($t->items as $p) {
      $product = product_load($p);
      $subtotal += $p->qty * $p->price;
      $items .= t('%order of %title at %price each', array('%order' => format_plural($p->qty, '1 order', '%count orders'), '%title' => $p->title, '%price' => payment_format($p->price))). "\n";
      if ($p->data) {
        foreach ($p->data as $key => $value) {
          $items .= " - {$key}: $value\n";
        }
      }
    }
  }

  global $base_url;
  $variables  = array("%order_date" => format_date($t->created), "%txnid" => $t->txnid, "%billing_name" => $billing_name, "%user_data" => $user_data, "%items" => $items, "%email" => variable_get("site_mail", ini_get("sendmail_from")), "%site" => variable_get("site_name", "drupal"), "%uri" => $base_url, "%uri_brief" => substr($base_url, strlen("http://")), "%date" => format_date(time()));
  $from       = variable_get("site_mail", ini_get("sendmail_from"));

  if ($t->mail && valid_email_address($t->mail)) {
    $to = $t->mail;
  } elseif ($t->uid != 0) {
    $to = db_result(db_query("SELECT mail FROM {users} WHERE uid = '%d'", $t->uid));
  }

  $subject    = strtr(variable_get("payment_new_subject", "Your %site order"), $variables);
  $body       = strtr(variable_get("payment_new", payment_help("Customer invoice email")), $variables);
  $headers    = "From: $from\nReply-to: $from\nX-Mailer: PHP\nReturn-path: $from\nErrors-to: $from";

  if ($preview) {

    $output = t('<p>This is a preview of the message to be sent.</p>');
    $output .= t('<p>To: <strong>%to</strong><br />', array('%to' => $to));
    $output .= t('From: <strong>%from</strong><br />', array('%from' => $from));
    $output .= t('Subject: <strong>%subject</strong></p>', array('%subject' => $subject));
    $output .= t('Body: <pre>%body</pre>', array('%body' => wordwrap($body)));

    return $output;
  }
  elseif ($to && valid_email_address($to)) {
    return user_mail($to, $subject, $body, $headers);
  }
  else {
    return false;
  }
}

function store_send_error_email($txnid, $preview = null) {

  $t = store_transaction_load($txnid);

  global $base_url;
  $variables  = array(
      "%email" => variable_get("site_mail", ini_get("sendmail_from")),
      "%txnid" => $txnid,
      "%site" => variable_get("site_name", "drupal"),
      "%uri" => $base_url,
      "%uri_brief" => substr($base_url, strlen("http://")),
      "%date" => format_date(time())
  );

  if ($t->mail && valid_email_address($t->mail)) {
    $to = $t->mail;
  } elseif ($t->uid != 0) {
    $to = db_result(db_query('SELECT mail FROM {users} WHERE uid = %d', $t->uid));
  }

  $from       = variable_get("site_mail", ini_get("sendmail_from"));
  $subject    = strtr(variable_get("payment_error_subject", "Purchase problem, %site"), $variables);
  $body       = strtr(variable_get("payment_error", payment_help("Processing error")), $variables);
  $headers    = "From: $from\nReply-to: $from\nX-Mailer: PHP\nReturn-path: $from\nErrors-to: $from";

  if ($preview) {

    $output = t('<p>This is a preview of the message to be sent.</p>');
    $output .= t('<p>To: <strong>%to</strong><br />', array('%to' => $to));
    $output .= t('From: <strong>%from</strong><br />', array('%from' => $from));
    $output .= t('Subject: <strong>%subject</strong></p>', array('%subject' => $subject));
    $output .= t('Body: <pre>%body</pre>', array('%body' => wordwrap($body)));

    return $output;
  }
  elseif ($to && valid_email_address($to)) {
    return user_mail($to, $subject, $body, $headers);
  }
  else {
    return false;
  }
}

function store_transaction_load($txnid) {

  $t = db_fetch_object(db_query("SELECT * FROM {ec_transaction} AS st WHERE st.txnid = '%d'", $txnid));

  $result = db_query('SELECT stp.*, r.rtxnid as rtxnid, r.rnid as rnid, p.ptype FROM {ec_transaction_product} stp LEFT JOIN {ec_renewal} r ON stp.txnid = r.txnid LEFT JOIN {ec_product} p ON stp.nid = p.nid WHERE stp.txnid = %d', $t->txnid);
  while ($data = db_fetch_object($result)) {
    $data->data = unserialize($data->data);
    if ($data->rtxnid) {
      $t->renewal[$data->rnid] = $data->rtxnid;
    }
    $items[] = $data;
  }
  $t->items = $items;
  if ($extra = store_invoke_ec_transactionapi($t, 'load')) {
    foreach ($extra as $key => $value) {
      $t->$key = $value;
    }
  }

  return $t;
}

/**
 * Default view of the admin store link.
 *
 * Generates statistical data of the store with links to view and the details
 * of transactions.
 */
function store_admin_overview() {

  $num_pending    = db_result(db_query("SELECT COUNT(txnid) FROM {ec_transaction} WHERE payment_status = '%d' AND (workflow = '%d' OR workflow = '%d' OR workflow = '%d' OR workflow = '%d')", payment_get_status_id('pending'), transaction_get_workflow_id("transaction received"), transaction_get_workflow_id("invoiced"), transaction_get_workflow_id("shipped"), transaction_get_workflow_id("awaiting customer response")));
  $num_processing = db_result(db_query("SELECT COUNT(txnid) FROM {ec_transaction} WHERE payment_status = '%d' AND (workflow = '%d' OR workflow = '%d' OR workflow = '%d' OR workflow = '%d')", payment_get_status_id('completed'), transaction_get_workflow_id("transaction received"), transaction_get_workflow_id("invoiced"), transaction_get_workflow_id("shipped"), transaction_get_workflow_id("awaiting customer response")));
  $num_completed  = db_result(db_query("SELECT COUNT(txnid) FROM {ec_transaction} WHERE payment_status = '%d' and workflow = '%d'", payment_get_status_id('completed'), transaction_get_workflow_id("completed")));

  /* Counter the new table width: 100% in drupal.css */
  $style = array('style' => 'width:auto;');

  $header = array(array("data" => t('Orders'), 'colspan' => 2));
  $row[] = array(array("data" => l(t("payments pending"), "admin/store/search&status=1&workflow=1,2,3,4"), 'align' => 'right', 'title' => t('payment status: Pending, workflow: Not Complete')), $num_pending);
  $row[] = array(array("data" => l(t("orders needing action"), "admin/store/search&status=2&workflow=1,2,3,4"), 'align' => 'right', 'title' => t('payment status: Complete, workflow: Not Complete')), $num_processing);
  $row[] = array(array("data" => l(t("completed"), "admin/store/search&workflow=6"), "align" => "right"), $num_completed);

  $output = theme("table", $header, $row, $style) . '<br />';
  $row = null;

  $beg_month   = mktime(0, 0, 0, date('m'), 1, date('Y'));
  $num_orders  = db_result(db_query("SELECT COUNT(txnid) FROM {ec_transaction} where created >= '%d' AND payment_status = '2' AND workflow = '6'", $beg_month));
  $mon_sales   = payment_format(db_result(db_query("SELECT SUM(gross) FROM {ec_transaction} where created >= '%d' AND payment_status = '2' AND workflow = '6'", $beg_month)));

  $header = array(array("data" => t('Monthly figures'), 'colspan' => 2));
  $row[] = array(array("data" => l(t("monthly orders"), "admin/store/search&date=>". date('m/d/Y', $beg_month)), "align" => "right"), $num_orders);
  $row[] = array(array("data" => t('monthly sales'), "align" => "right"), $mon_sales);

  $output .= theme("table", $header, $row, $style) . '<br />';
  $row = null;

  if (variable_get('payment_recurring', 0)) {
    $num_orders  = db_result(db_query("SELECT COUNT(st.txnid) FROM {ec_transaction} AS st, {ec_product} AS p, {ec_transaction_product} AS stp WHERE 1 AND p.nid = stp.nid AND st.txnid = stp.txnid AND stp.expires > %d AND payment_status = 2 AND workflow = 6", time()));
    $header = array(array("data" => t('Recurring Payments'), "colspan" => 2));
    $row[] = array(array("data" => l(t("active transactions"), "admin/store/search&is_recurring=1&nid_expires=>now&workflow=6"), "align" => "right"), $num_orders);
    $output .= theme("table", $header, $row, $style) . '<br />';
    $row = null;
  }

  $beg_year       = mktime(0, 0, 0, 1, 1, date('Y'));
  $num_customers  = db_result(db_query("SELECT COUNT(DISTINCT uid) FROM {ec_transaction}"));
  $num_products   = db_result(db_query("SELECT COUNT(nid) FROM {ec_product}"));
  $year_sales     = payment_format(db_result(db_query("SELECT SUM(gross) FROM {ec_transaction} where created >= '%d' AND payment_status = '2' AND workflow = '6'", $beg_year)));

  $header = array(array("data" => t('General statistics'), "colspan" => 2));
  $row[] = array(array("data" => l(t("customers"), "admin/user"), "align" => "right"), $num_customers);
  $row[] = array(array("data" => l(t('products'), 'product'), "align" => "right"), $num_products);
  $row[] = array(array("data" => t('yearly sales'), "align" => "right"), $year_sales);

  /*
  // Started to work on some queries to generate top selling product reports.
  $result = db_query("SELECT nid, title, COUNT(*) as count FROM {ec_transaction_product} GROUP BY nid ORDER BY count DESC");
  $header = array(array("data" => "Product statistics", "colspan" => 2));
  $row[] = array(array("data" => l(t("Top selling"), "products/top"), "align" => "right"), $num_customers);
  */

  $output .= theme("table", $header, $row, $style);
  $row = null;

  return $output;
}

/**
 * Query the transaction (and other associated tables) via $_REQUEST in a myriad of ways.
 *
 * This is a dense function, and i just don't have the energy to document it
 * right now. This function is called from admin/store/search.
 */
function store_query() {

  /* List the available items to search for. */
  $fields = array('text', 'txnid', 'uid', 'is_recurring', 'nid', 'nid_expires', 'date', 'gross', 'status', 'workflow', 'method', 'ptype');

  /* If we have an edit array, recompose the array into separate stand-alone variables. */
  $edit = ($_POST['edit']) ? $_POST['edit'] : array();
  foreach($edit as $key => $value) {
    if ($value) {
      /* I had to recompose the $_POST vars to make tablesort smile at me. */
      $_POST[$key] = (is_array($value)) ? implode(',', $value) : $value;
      $_REQUEST[$key] = $_POST[$key];
    }
  }
  unset($_POST['edit']); // Again, an all too famous tablesort issue.

  /* Grab the values we need from the $_REQUEST object. */
  foreach($fields as $field) {
    $value = $_REQUEST[$field];
    if (array_key_exists($field, $_REQUEST) === true && $value != "") {
      $query->$field = $value;
    }
  }

  /* If we have a query object, let's hit the database. */
  if ($query) {

    $select = array();
    $from   = array();
    $where  = array();

    /* I DON'T WANT ANY ARRAYS BEYOND THIS POINT! */
    foreach ($query as $k => $v) {
      $data = null;
      $operator = null;
      $v = trim($v);

      /* Handle any comparison operators */
      if (strpos($v, ',') !== false) {
        $operator = ',';
        $data     = explode(',', $v);
        $data = array_map('db_escape_string', $data);
      }
      elseif (strpos($v, '-') !== false) {
        $operator = '-';
        $data     = explode('-', $v);
        $data = array_map('db_escape_string', $data);
      }
      else {
        /* This order is important */
        $operators = array('>=', '<=', '>', '<', '=');
        foreach ($operators as $o) {
          $n = strlen($o);
          /* Only catch these operators at the beginning of the value. */
          if (strlen($v) >= $n && substr($v, 0, $n) == $o) {
            $operator = '<>';
            $data['op']    = $o;
            $data[0] = db_escape_string(trim(substr($v, $n)));
            break;
          }
        }
      }

      if ($operator == null) {
        $data[] = db_escape_string($v);
      }

      $select[] = "st.*";
      $from[]   = "{ec_transaction} AS st";

      switch ($k) {
        case "text":
          $from[]   = "{node} AS n";
          $from[]   = "{ec_transaction_product} AS stp";
          $where[]  = "AND (n.title LIKE '%$data[0]%' OR n.body LIKE '%$data[0]%')";
          $where[]  = "AND n.nid = stp.nid";
          $where[]  = "AND st.txnid = stp.txnid";
          $condition['Text'] = build_query_details($data, $operator);
          break;

        case "txnid":
          $where[]  = operator_sql($data, $operator, 'st.txnid');
          $condition['Transaction id'] = build_query_details($data, $operator);
          break;

        case "uid":
          $from[]   = "{users} AS u";
          $where[]  = "AND u.uid = st.uid";

          $d = $data;
          $i = 0;
          $query = '';
          $op = ($d['op']) ? $d['op'] : '=';
          unset($d['op']);
          foreach ($d as $v) {
            if (is_numeric($v)) {
              $query .= ($i == 0) ? "AND (" : " OR ";
              $query .= "st.uid $op '$v'";
            }
            else {
              $query .= ($i == 0) ? "AND (" : " OR ";
              $query .= "u.name LIKE '%$v%'";
            }
            $i++;
          }
          $query .= ")";

          $where[] = $query;
          $condition['User'] = build_query_details($data, $operator);
          break;

        case "nid":
          $from[]   = "{ec_product} AS p";
          $from[]   = "{ec_transaction_product} AS stp";
          $where[]  = "AND p.nid = stp.nid";
          $where[]  = "AND st.txnid = stp.txnid";
          $where[]  = operator_sql($data, $operator, 'p.nid');
          $condition['Product id'] = build_query_details($data, $operator);
          break;

        case "nid_expires":
          $from[]   = "{ec_product} AS p";
          $from[]   = "{ec_transaction_product} AS stp";
          $where[]  = "AND p.nid = stp.nid";
          $where[]  = "AND st.txnid = stp.txnid";
          foreach ($data as $key => $v) {
            if ($key !== 'op') {
              $mod[$key] = format_date(strtotime($v), 'small');
            }
          }
          $where[]  = operator_sql($data, $operator, 'stp.expires', 'strtotime');
          $condition['Product expires'] = build_query_details($mod, $operator);
          break;

        case "is_recurring":
          $from[]   = "{ec_product} AS p";
          $from[]   = "{ec_transaction_product} AS stp";
          $where[]  = "AND p.nid = stp.nid";
          $where[]  = "AND st.txnid = stp.txnid";
          $where[]  = operator_sql($data, $operator, 'stp.is_recurring');
          $condition['Recurring payment'] = build_query_details($data, $operator);
          break;

        case "date":
          foreach ($data as $key => $v) {
            if ($key !== 'op') {
              $mod[$key] = format_date(strtotime($v), 'small');
            }
          }
          $where[]  = operator_sql($data, $operator, 'st.created', 'strtotime');
          $condition['Date'] = build_query_details($mod, $operator);
          break;

        case "gross":
          $where[]  = operator_sql($data, $operator, 'st.gross + st.shipping_cost');
          $condition['Cost'] = build_query_details($data, $operator);
          break;

        case "status":
          foreach ($data as $key => $v) {
            $v = ($key !== 'op') ? payment_get_status($v) : $v;
            $mod[$key] = $v;
          }
          $where[]  = operator_sql($data, $operator, 'st.payment_status');
          $condition['payment status'] = build_query_details($mod, $operator);
          break;

        case "workflow":
          foreach ($data as $key => $v) {
            $v = ($key !== 'op') ? transaction_get_workflow($v) : $v;
            $mod[$key] = $v;
          }
          $where[]  = operator_sql($data, $operator, 'st.workflow');
          $condition['workflow'] = build_query_details($mod, $operator);
          break;

        case "method":
          $where[]  = operator_sql($data, $operator, 'st.payment_method');
          $condition['payment method'] = build_query_details($data, $operator);
          break;

        case "ptype":
          $from[]   = "{ec_product} AS p";
          $from[]   = "{ec_transaction_product} AS stp";
          $where[]  = operator_sql($data, $operator, 'p.ptype');
          $where[]  = "AND p.nid = stp.nid";
          $where[]  = "AND st.txnid = stp.txnid";
          $condition['product type'] = build_query_details($data, $operator);
          break;
      }
      $get[$k] = build_get_uri($data);
    } //The end of a really really long for loop.

    /* Now that we know the tables, apply the correct column display map */
    $column_map = array(
        'users'                   => array(array('data' => t('user'), 'field' => 'u.uid'), array('data' => t('username'), 'field' => 'u.name')),
        'ec_transaction'          => array(array('data' => t('txnid'), 'field' => 'st.txnid', 'sort' => 'desc'), array('data' => t('user'), 'field' => 'st.uid'), array('data' => t('payment status'), 'field' => 'st.payment_status'), array('data' => t('workflow'), 'field' => 'st.workflow'), array('data' => t('gross'), 'field' => 'st.gross'), array('data' => t('created'), 'field' => 'st.created'), array('data' => t('changed'), 'field' => 'st.changed')),
        'ec_transaction_product'  => array(array('data' => t('txnid'), 'field' => 'stp.txnid'), array('data' => t('nid'), 'field' => 'stp.nid'), array('data' => t('title'), 'field' => 'stp.title'), array('data' => t('price'), 'field' => 'stp.price'), array('data' => t('qty'), 'field' => 'stp.qty')),
        'node'                    => array(array('data' => t('nid'), 'field' => 'n.nid'), array('data' => t('title'), 'field' => 'n.title')),
        'ec_product'              => array(array('data' => t('nid'), 'field' => 'p.nid'), array('data' => t('price'), 'field' => 'p.price'), array('data' => t('ptype'), 'field' => 'p.ptype'))
    );

    /* Merge all table columns that exist in the current query into an array. */
    $table = array();
    foreach (extract_tablenames(array_unique($from)) as $key) {
      if (array_key_exists($key, $column_map)) {
        $table = array_merge($table, $column_map[$key]);

        foreach ($column_map[$key] as $v) {
          $columns[]  = substr($v['field'], strpos($v['field'], '.') + 1);
        }
      }
    }
    $columns = array_unique($columns);
    $header = unique_multi_array($table, 'data');
    $header[] = t('items ordered');
    $header[] = t('operations');

    /* Expand all query parts */
    $s = implode(', ', array_unique($select));
    $f = implode(', ', array_unique($from));
    $w = implode(' ', array_unique($where));
    $l = tablesort_sql($header);

    $numset = db_result(db_query("SELECT COUNT(*) FROM $f WHERE 1 $w"));

    if (is_null($_GET['dsp_details']) || $_GET['dsp_details'] == '') {
      $_GET['dsp_details'] = 1;
    }

    if ($_GET['dsp_details'] == 1) {
      foreach ($condition as $key => $value) {
        $items[] = '<strong>'. check_plain($key). '</strong>'. check_plain($value);
      }
      $output .= theme('item_list', $items, t('Display details'));
    }

    $sep = '&';
    foreach($get as $key => $value) {
      $uri .= $sep . $key . '=' . $value;
    }

    $result = pager_query("SELECT $s FROM $f WHERE 1 $w $l", 50);
    while ($data = db_fetch_object($result)) {

      $destination = urlencode(base64_encode($_GET['q'].$uri));
      $edit_uri = "admin/store/transaction/edit/$data->txnid&section=overview&destination=$destination";

      // Before we hand over the table row to the table() function, some
      // fields need special formatting.
      foreach ($columns as $col) {

        if (($col == 'created' || $col == 'changed' || $col == 'expires') && $data->$col != 0) {
          $r[] = format_date($data->$col, 'small');
        }
        elseif ($col == 'uid') {
          $username = db_result(db_query('SELECT name FROM {users} WHERE uid = %d', $data->$col));
          if ($data->billing_firstname && $data->billing_lastname) {
            $name = "$data->billing_firstname $data->billing_lastname";
            $name = l($name, "admin/store/transaction/edit/$data->txnid&section=addresses&destination=$destination");
            if (user_access('administer users')) {
              $username = l($username, 'user/'. $data->$col);
            }
            $name .= '<br />('. $username .')';
          }
          else {
            $name = l($username, "admin/store/transaction/edit/$data->txnid&section=addresses&destination=$destination");
          }
          $r[] = array('data' => $name, 'nowrap' => 'nowrap');
        }
        elseif ($col == 'payment_status') {
          $r[] = payment_get_status($data->$col);
        }
        elseif ($col == 'workflow') {
          // invoiced = 2, shipped = 3

          $print_invoice = l(t('*print invoice'), "admin/store/transaction/print/$data->txnid&wf=2"). "<br />";
          $ship_notify = l(t('*shipping notify'), "admin/store/shipping/send/$data->txnid&wf=3&destination=$destination");

          if ($data->$col == 2) {
            $print_invoice = l(t('print invoice'), "admin/store/transaction/print/$data->txnid"). "<br />";
          }
          elseif ($data->$col > 4) {
            $print_invoice = l(t('print invoice'), "admin/store/transaction/print/$data->txnid"). "<br />";
            $ship_notify = l(t('shipping notify'), "admin/store/shipping/send/$data->txnid&destination=$destination");
          }

          $r[] = array('data' => l(transaction_get_workflow($data->$col), $edit_uri, array('title' => t('Click to adjust the transaction workflow.'))). "<br />&nbsp;&nbsp;$print_invoice&nbsp;&nbsp;$ship_notify", 'nowrap' => 'nowrap');
        } elseif ($col == 'gross') {
          $r[] =  payment_format($data->$col);
        }
        else {
          $r[] = $data->$col;
        }
      }

      // Count the number of items in this transaction
      $resultset  = db_query("SELECT stp.qty FROM {ec_transaction} AS st, {ec_transaction_product} AS stp WHERE st.txnid = '%d' AND st.txnid = stp.txnid", $data->txnid);
      $num_items = 0;
      while ($i = db_fetch_object($resultset)) {
        $num_items += $i->qty;
      }
      $r[] = l(t('%item', array('%item' => format_plural($num_items, '1 item', '%count items'))), "admin/store/transaction/product/view/$data->txnid", array('onclick' => "window.open(this.href, 'items_ordered', 'width=480,height=480,scrollbars=yes,status=yes'); return false"));

      $r[] = l(t('edit'), $edit_uri) .
             '<br />&nbsp;&nbsp;&nbsp;'. l(t('addresses'), "admin/store/transaction/edit/$data->txnid&section=addresses&destination=$destination") .
             '<br />&nbsp;&nbsp;&nbsp;'. l(t('items'), "admin/store/transaction/edit/$data->txnid&section=items&destination=$destination");
      $row[] = $r;
      $r = null;
    }

    // There is a line of code in includes/menu.inc that modifies $_GET['q'] to align 
    // with the current Drupal menu path. It looks like this:
    //
    // $_GET['q'] = $path;
    //
    // The two should stay separate in this case, because the menu item path redirects
    // to a search function.
    $q = $_GET['q'];
    $_GET['q'] = $_REQUEST['q'];
    $pager = theme('pager', NULL, 50, 0, tablesort_pager());
    $_GET['q'] = $q;
    if (!empty($pager)) {
      $row[] = array(array("data" => $pager, "colspan" => count($header)));
    }

    $output .= "<p>". l(t("#"), "admin/store/search$uri", array('title' => 'Permanent link to this search query.')) ."</p>";

    $output .= t('<h2>%result found</h2>', array('%result' => format_plural($numset, '1 result', '%count results')));

    if ($numset) {
      $output .= theme('table', $header, $row);
      /* If we have links that, when clicked change the workflow, give the user some warning. */
      $output .= '<div id="help"><strong>*</strong>'. t('Clicking links marked with an asterisk will also cause the transaction to shift into it\'s respective workflow state.'). '</div>';
    }
  }
  else {
    $rows[] = array(array('data' => form_textfield(t('Search for'), 'text', $query->text, 60, 255, t('Searches the title and content of a product for a string of text.')), 'colspan' => 2));
    $rows[] = array(
      array('data' => form_textfield(t('Transaction ID'), 'txnid', $query->txnid, 60, 255, t('The ID number of a transaction.')), 'colspan' => 2)
    );
    $rows[] = array(
      array('data' => form_textfield(t('Username or ID'), 'uid', $query->uid, 60, 255, t('The user that placed the order.')), 'colspan' => 2)
    );
    $rows[] = array(
      array('data' => form_textfield(t('Product ID'), 'nid', $query->nid, 60, 255, t('Find a transaction that has the following product(s).')), 'colspan' => 2)
    );
    $rows[] = array(
        array('data' => form_textfield(t('Product expiration'), 'nid_expires', $query->nid_expires, 25, 255, t('Date product expires.')), 'colspan' => 2)
    );
    $rows[] = array(
      array('data' => form_checkbox(t('Recurring payments only'), 'is_recurring', 1, ($query->is_recurring) ? true : false, t('Check this box if you only want transactions containing recurring payments.')), 'colspan' => 2)

    );
    $rows[] = array(
        array('data' => form_textfield(t('Date created'), 'date', $query->date, 25, 255, t('Date transaction was created.')), 'colspan' => 2)
    );
    $rows[] = array(
      array('data' => form_textfield(t('Total cost'), 'gross', $query->gross, 60, 255), 'colspan' => 2)
    );
    $rows[] = array(
        form_select(t('Payment status'), 'status', $query->status, payment_build_status(), '', 'size="5"', 1),
        form_select(t('Workflow'), 'workflow', $query->workflow, store_transaction_workflow(), '', 'size="5"', 1)
    );
    $rows[] = array(
        form_select(t('Payment method'), 'method', $query->method, payment_get_methods(), '', 'size="5"', 1),
        form_select(t('Product type'), 'ptype', $query->ptype, product_invoke_productapi($name, 'wizard_select'), '', 'size="5"', 1)
    );
    $rows[] = array(
      array('data' => form_submit(t('Search')), 'colspan' => 2)
    );

    $output = form(theme('table', NULL, $rows, array('cellpadding' => 0, 'cellspacing' => 0)));
  }

  return $output;
}

function store_transaction_items($txnid) {
  global $base_url;
  $base_url .= '/';

  $html = "<html>\n<head>\n<base href=\"$base_url\" />\n<style type=\"text/css\" media=\"all\">\n@import url(misc/drupal.css);\nbody, table {font-size: 0.9em;}</style>\n</head>\n<body>\n";

  $header = array(
    array('data' => t('nid'), 'field' => 'p.nid'),
    array('data' => t('sku'), 'field' => 'p.sku'),
    array('data' => t('title'), 'field' => 'stp.title', 'sort' => 'asc'),
    array('data' => t('qty'), 'field' => 'stp.qty'),
    array('data' => t('type'), 'field' => 'p.ptype')
  );

  if ($count = db_result(db_query('SELECT COUNT(p.nid) FROM {ec_transaction_product} as stp, {ec_product} as p WHERE stp.nid = p.nid AND stp.txnid = %d', $txnid))) {
    $sql = 'SELECT * FROM {ec_transaction_product} as stp, {ec_product} as p WHERE stp.nid = p.nid AND stp.txnid = %d'. tablesort_sql($header);
  }
  else {
    $sql = 'SELECT * FROM {ec_transaction_product} as stp WHERE stp.txnid = %d'. tablesort_sql($header);
  }
  $result = pager_query($sql, 50, 0, NULL, $txnid);

  $num_items = 0;
  while ($data = db_fetch_object($result)) {
    $num_items++;
    $qty += $data->qty;

    $rows[] = array($data->nid, $data->sku, l($data->title, "node/$data->nid", array('target' => '_blank')), $data->qty, $data->ptype);
  }

  $r[] = array(array('data' => 'Unique items:', 'align' => 'right'), array('data' => t('<strong>%num_items</strong>', array('%num_items' => $num_items))));
  $r[] = array(array('data' => 'Total quantity:', 'align' => 'right'), array('data' => t('<strong>%quantity</strong>', array('%quantity' => $qty))));
  $table = theme('table', null, $r, array('border' => 0));

  $rows[] = array(array('data' => $table, 'colspan' => 5, 'align' => 'right'));

  $pager = theme('pager', NULL, 50, 0, tablesort_pager());
  if (!empty($pager)) {
    $rows[] = array(array('data' => $pager, 'colspan' => 5));
  }

  print $html;
  if ($rows) {
    print theme("table", $header, $rows);
  }
  else {
    print t('<p>There are no transactions to view. You can manually <a href="%add_transaction">add transactions</a>, however.</p>', array('%add_transaction' => 'admin/store/transaction/add'));
  }
  print '</body></html>';
}

function operator_sql($data, $operator, $column, $callback = null) {

  $query = '';

  switch ($operator) {

    case "-";
      $data = ($callback) ? array_map($callback, $data) : $data;
      for ($i = 0; $i < 2; $i++) {
        $query .= ($i == 0) ? "AND ($column >= '$data[$i]'" : " AND $column <= '$data[$i]'";
      }
      return $query . ')';
      break;

    case ",";
      $numset = count($data);
      $data = ($callback) ? array_map($callback, $data) : $data;
      for ($i = 0; $i < $numset; $i++) {
        $query .= ($i == 0) ? "AND (" : " OR ";
        $query .= "$column = '$data[$i]'";
      }
      return $query . ')';
      break;

    case "<>";
      $data[0] = ($callback) ? $callback($data[0]) : $data[0];
      return "AND $column ". $data['op']. " '$data[0]'";
      break;

    default:
      $data[0] = ($callback) ? $callback($data[0]) : $data[0];
      return "AND $column = '$data[0]'";
  }

  return false;
}

function build_query_details($data, $operator) {

  switch ($operator) {

    case ',':
      return ' = '. implode(',', $data);
      break;

    case '<>':
      $op = $data['op'];
      unset($data['op']);
      return " $op ". implode(',', $data);
      break;

    case '-':
      return " $data[0] - $data[1]";
      break;

    default:
      return ' = '. implode(',', $data);
  }
}

function build_get_uri($data) {

  $data[0] = ($data['op']) ? $data['op'] . $data[0] : $data[0];
  unset($data['op']);
  return implode(',', array_map('urlencode', $data));
}

/**
 *  Make a multi-dimensional array have only DISTINCT values for a certain "column".
 *
 * It's like using the DISTINCT parameter on a SELECT sql statement.
 * This function was taken from http://php.net/array_unique and contributed by
 * tru at ascribedata dot com
 */
function unique_multi_array($array, $sub_key) {
  $target = array();
  $existing_sub_key_values = array();
  foreach ($array as $key => $sub_array) {
    if (!in_array($sub_array[$sub_key], $existing_sub_key_values)) {
      $existing_sub_key_values[] = $sub_array[$sub_key];
      $target[$key] = $sub_array;
    }
  }

  return $target;
}

function extract_tablenames($from) {

  foreach ($from as $v) {
    preg_match("/{([a-zA-Z0-9_.]+)}/", $v, $match);
    $table[] = $match[1];
  }

  return $table;
}

/**
 * A wrapper for theme('store_invoice')
 *
 * Because the menu callback can only handle functions with no parameters, we
 * use this function as a wrapper.
 */
function store_invoice() {

  $txnid = (int) arg(4);
  $wf = (int) $_GET['wf'];

  /* Adjust the workflow.. */
  if ($wf && $txnid) {
    db_query("UPDATE {ec_transaction} SET workflow = %d WHERE txnid = %d", $wf, $txnid);
  }

  return theme('store_invoice', $txnid);
}

function store_user_history() {
  global $user;

  if (!$user->uid) {
    drupal_access_denied();
    exit();
  }
  
  $output = variable_get('ec_order_overview', '');

  $uid = $user->uid;
  if ($user->uid == 1 || user_access('administer store')) {
    $uid = arg(2);
  }
  $name = db_result(db_query('SELECT name FROM {users} WHERE uid = %d', $uid));
  $title = t('%username\'s order history', array('%username' => $name));

  $header = array(
    array('data' => t('ID'), 'field' => 'st.txnid', 'sort' => 'desc'),
    array('data' => t('payment method'), 'field' => 'st.payment_method'),
    array('data' => t('payment status'), 'field' => 'st.payment_status'),
    array('data' => t('workflow'), 'field' => 'st.workflow'),
    array('data' => t('total'), 'field' => 'st.gross'),
    array('data' => t('created'), 'field' => 'st.created'),
    array('data' => t('changed'), 'field' => 'st.changed'),
    t('items ordered'),
    t('operations')
  );

  $sql = 'SELECT * FROM {ec_transaction} AS st WHERE st.uid = %d'. tablesort_sql($header);
  $result = pager_query($sql, 25, 0, NULL, $uid);

  while ($txn = db_fetch_object($result)) {
    /* Count how many items in this transaction */
    $resultset  = db_query("SELECT stp.qty FROM {ec_transaction} AS st, {ec_transaction_product} AS stp WHERE st.txnid = '%d' AND st.txnid = stp.txnid", $txn->txnid);
    $num_items = 0;
    while ($i = db_fetch_object($resultset)) {
      $num_items += $i->qty;
    }
    $item = l(t('%item', array('%item' => format_plural($num_items, '1 item', '%count items'))), "store/transaction/product/view/$txn->txnid", array('onclick' => "window.open(this.href, 'items_ordered', 'width=480,height=480,scrollbars=yes,status=yes'); return false"));

    $rows[] = array($txn->txnid, $txn->payment_method, payment_get_status($txn->payment_status), transaction_get_workflow($txn->workflow), $txn->gross, format_date($txn->created, 'small'), format_interval(time() - $txn->changed), $item, l(t('view'), "store/transaction/view/$txn->txnid"));
  }

  $pager = theme('pager', NULL, 25, 0, tablesort_pager());
  if (!empty($pager)) {
    $rows[] = array(array('data' => $pager, 'colspan' => 9));
  }
  $output .= theme("table", $header, $rows);

  drupal_set_title($title);
  print theme('page', $output);
}

/**
 * The correct format for renewal links is:
 *   cart/renew/nid/txnid
 */
function store_user_subscriptions() {
  global $user;

  $uid = $user->uid;
  if ($user->uid == 1 || user_access('administer store')) {
    $uid = arg(2);
  }
  $name = db_result(db_query('SELECT name FROM {users} WHERE uid = %d', $uid));
  $title = t('%username\'s subscriptions', array('%username' => $name));

  $items = product_find_recurring_payments($uid);
  $cart = cart_get_items();

  $header = array(t('ID'), t('name'), t('price'), t('expires'), t('operations'));
  foreach((array) $items as $item) {
    if (!$item->expired) {
      $item_name = $item->title. '<br>('. product_recurring_nice_string($item). ')';
      $renew = t('This item is in <a href="%cart_view">your shopping cart</a>.', array('%cart_view' => url('cart/view')));
      if (!$cart[$item->nid]->qty) {
        $renew = l(t('renew'), "cart/renew/$item->nid/$item->txnid");
      }
      if (product_is_shippable($item->nid)) {
        $edit_address = '<br />'. l(t('edit'), "store/transaction/address/edit/$item->txnid");
      }
      $rows[] = array($item->txnid, $item_name, payment_format($item->price), format_interval($item->expires - time()), $renew . $edit_address);
    }
  }

  if ($rows) {
    $output = theme('table', $header, $rows);
  }
  else {
    $output = t('<p>You have no active subscriptions.</p>');
  }

  drupal_set_title($title);
  print theme('page', $output);
}

function store_user_address_edit($txnid) {
  $edit = $_POST['edit'];
  $op = $_POST['op'];

  if ($op == t('update address')) {
    if (store_transaction_validate_addresses($edit, 'shipping')) {
      global $user;
      store_transaction_save($edit);
      drupal_set_message(t('updated shipping address'));
      drupal_goto("store/history/$user->uid/subscriptions");
    }
  }
  else {
    $edit = empty($edit) ? store_transaction_load($txnid) : array2object($edit);
    $output = store_transaction_addresses_form($edit, 'shipping');
    $output .= form_hidden('txnid', ($edit->txnid) ? $edit->txnid : $txnid);
    $output .= form_submit(t('update address'));
    $output = form($output);
  }

  drupal_set_title($title);
  print theme('page', $output);
}

function store_user_history_items() {
  return store_transaction_items(arg(4));
}

function store_transaction_view($txnid) {
  print theme('page', theme('store_invoice', $txnid, FALSE));
}

/**
 * Invoke a hook_ec_transactionapi() operation in all modules.
 *
 * @param &$txn
 *   A transaction object.
 * @param $op
 *   A string containing the name of the ec_transactionapi operation.
 * @param $a3, $a4
 *   Arguments to pass on to the hook, after the $txn and $op arguments.
 * @return
 *   The returned value of the invoked hooks.
 */
function store_invoke_ec_transactionapi(&$txn, $op, $a3 = NULL, $a4 = NULL) {
  $return = array();
  foreach (module_list() as $name) {
    $function = $name .'_ec_transactionapi';
    if (function_exists($function)) {
      $result = $function($txn, $op, $a3, $a4);
      if (is_array($result)) {
        $return = array_merge($return, $result);
      }
      else if (isset($result)) {
        $return[] = $result;
      }
    }
  }
  return $return;
}

?>

<?php
// $Id: fhwalk.module,v 0.1 2007/01/09 09:02:48 ema Exp $

/**
 * @file
 * Enables users to manage fh wtw events.
 *
 * @defgroup fhflickr_core        Core drupal hooks
 * @defgroup fhflickr_helpers     various fhwalk helpers
 * @defgroup fhflickr_theme       theming functions
 * @defgroup fhflickr_administer  administer tab
 *   
 **/
 
/**
 * Implementation of hook_help().
 *  
 * @ingroup fhflickr_core
 * @param $section the page which is requesting help
 * @return the help text
 */
function fhflickr_help($section) {
  switch ($section) {
    case 'admin/help#fhflickr':
      return '<p>'. t('The fhflickr module is used to manage flickr photo for walk events') .'</p>';
    case 'admin/modules#description':
      return t('<strong>FH:</strong> Allows managing flickr photo for walk events. <b>Require fhwalk</b>');
  }
}

/**
 * Implementation of hook_perm().
 *  
 * @ingroup fhwalk_core
 */
function fhflickr_perm() {
  return array(
    'administer fhflickr'       // was admin fhwalk
  ); 
}

/**
 * Implementation of hook_menu().
 */
function fhflickr_menu($may_cache) {
  $items = array();

  if ($may_cache) {
	 $items[] = array('path' => 'fhflickr/action', 
        'type' => MENU_CALLBACK,
        'weight' => 0,
        'callback' => 'fhflickr_action',
        'access' => user_access('administer fhflickr')
    );
  }
  return $items;
}

/**
 * fhflickr get authorization:
 * 
 * step 1: get frob 
 *   
 */  
function fhflicker_auth_submit($form_id, $form_values) {
  drupal_set_message("pippo ($form_id) dice: " . print_r($form_values, true));
/*
  switch($form_values['submit']) {
    case t('Get Frob'):
      $res = _fhflickr_serv('flickr.auth.getFrob',array(), true);
      if ($res['stat'] == 'ok') {
        variable_set('fhflickr_frob', $res['frob']['_content']);
      } else {
        drupal_set_message(t('Failed to get a frob') . ': ' . print_r($res, true));
      }
      break;
    case t('Get Token (write)'):
      $res = _fhflickr_serv('flickr.auth.getToken', array('frob'=>variable_get('fhflickr_frob','')), true);
      if ($res['stat'] == 'ok') {
        variable_set('fhflickr_token_write', $res['auth']['token']['_content']);
      } else {
        variable_set('fhflickr_frob', '');
        drupal_set_message(t('Failed to get a token') . ': ' . print_r($res, true));
      }
      break;
  }
*/  
}

/**
 * fhflickr action callback
 *  
 * @ingroup fhwalk_core
 */  
function fhflickr_action($op) {
  switch($op) {
    case 'frob_reset':
      variable_set('fhflickr_frob','');
      variable_set('fhflickr_token_write','');
      drupal_set_message("API frob and API token was reset");
      break;
    case 'frob_get':
      $res = _fhflickr_serv('flickr.auth.getFrob',array(), true);
      if ($res['stat'] == 'ok') {
        variable_set('fhflickr_frob', $res['frob']['_content']);
        drupal_set_message(t('API frob') . ': ' . $res['frob']['_content']);
      } else {
        drupal_set_message(t('Failed to get a frob') . ': ' . print_r($res, true));
      }
      break;
    case 'token_reset':
       variable_set('fhflickr_token_write','');
      drupal_set_message("API token was reset");
      break;
    case 'token_get':
      $res = _fhflickr_serv('flickr.auth.getToken', array('frob'=>variable_get('fhflickr_frob','')), true);
      if ($res['stat'] == 'ok') {
        variable_set('fhflickr_token_write', $res['auth']['token']['_content']);
        drupal_set_message(t('API token') . ': ' . $res['auth']['token']['_content']);
      } else {
        drupal_set_message(t('Failed to get a token') . ': ' . print_r($res, true));
      }
      break;
  }
  drupal_goto();
}

/**
 * Implementation of hook_settings().
 *  
 * @ingroup fhflickr_core
 * OLD b9937eed5e47e753b717ddd7a2045bc7
 * from 20070316 f8654f49edc0cc5fc304c607c748ed67  
 *  secret 7bc4224955212703  
 */
function fhflickr_settings() {
  $form['fhflickr_user_id'] = array(
    '#type'  => 'textfield', 
    '#title' => t('flickr user id'),
    '#default_value' => variable_get('fhflickr_user_id', ''),
  );
  $form['fhflickr_apiKey'] = array(
    '#type'  => 'textfield', 
    '#title' => t('flickr apiKey'),
    '#default_value' => variable_get('fhflickr_apiKey', ''),
  );
  $form['fhflickr_apiSecret'] = array(
    '#type'  => 'textfield', 
    '#title' => t('flickr apiSecret'),
    '#default_value' => variable_get('fhflickr_apiSecret', ''),
  );
  
  // Authorization Sub form
  $apiKey    = variable_get('fhflickr_apiKey', '');
  $apiSecret = variable_get('fhflickr_apiSecret', '');

  $sub_form['auth'] = array(
    '#type'  => 'fieldset', 
    '#title' => t('Flickr Authorize'),
    '#collapsible' => TRUE,
    '#collapsed'   => FALSE,
  );
  $sub_form['auth']['frob'] = array(
    '#value' => "<strong>api Frob:</strong>",
  );
  if($frob=variable_get('fhflickr_frob','')) {
    $sub_form['auth']['frob']['value'] = array(
      '#value' => "<div>$frob [" . l(t('Reset Frob'), 'fhflickr/action/frob_reset', NULL, drupal_get_destination() ) . ']</div>',
    );
    $sub_form['auth']['token'] = array(
      '#value' => "<strong>api Token (write):</strong>",
    );
    if($token=variable_get('fhflickr_token_write','') ) {
      $sub_form['auth']['token']['value'] = array(
        '#value' => "<div>$token [" . l(t('Reset API Token'), 'fhflickr/action/token_reset', NULL, drupal_get_destination() ) . ']</div>',
      );
    } else {
      $request = _fhflickr_get_request( array('frob' => $frob, 'perms' => 'write'), true);
       $url = "http://flickr.com/services/auth/?$request";
     $sub_form['auth']['token']['value'] = array(
        '#value' => "<div>[<a href='$url'>" . t('Check authorization') . "</a>] ".  
          "[" . l(t('Get new API token'), 'fhflickr/action/token_get', NULL, drupal_get_destination() ) . "]</div>",
      );
    }
  } else {
    $sub_form['auth']['frob']['value'] = array(
      '#value' => "<div>[" . l(t('Get new API Frob'), 'fhflickr/action/frob_get', NULL, drupal_get_destination() ) . "]</div>",
    );
  }
  $form['fhflickr_CURL_proxy'] = array(
    '#type'  => 'textfield', 
    '#title' => t('CURL proxy'),
    '#default_value' => variable_get('fhflickr_CURL_proxy', '10.11.40.110:8080'),
  );
  
  $form['fhflickr_auth'] = array(
    '#value' => drupal_get_form('fhflicker_auth', $sub_form, 'fhflicker_auth'),
  );
  
  $form['ftp'] = array(
    '#type'  => 'fieldset', 
    '#title' => t('FTP data'),
    '#collapsible' => TRUE,
    '#collapsed'   => FALSE,
  );
  $form['ftp']['fhflickr_ftp_server'] = array(
    '#type'  => 'textfield', 
    '#title' => t('FTP server'),
    '#default_value' => variable_get('fhflickr_ftp_server', ''),
  );
  $form['ftp']['fhflickr_ftp_user_name'] = array(
    '#type'  => 'textfield', 
    '#title' => t('FTP user name'),
    '#default_value' => variable_get('fhflickr_ftp_user_name', ''),
  );
  $form['ftp']['fhflickr_ftp_user_pass'] = array(
    '#type'  => 'textfield', 
    '#title' => t('FTP user password'),
    '#default_value' => variable_get('fhflickr_ftp_user_pass', ''),
  );
  $form['ftp']['fhflickr_ftp_remote_dir'] = array(
    '#type'  => 'textfield', 
    '#title' => t('FTP remote directory'),
    '#default_value' => variable_get('fhflickr_ftp_remote_dir', ''),
  );

  return $form;
}

/**
 * Theme functions
 *  
 * @ingroup fhflickr_theme
 */
function theme_flickr_album_flash($node) {
  $tag_event    = $node->tag;
  $tag_campaign = $node->campaign->shortname;
  $tags="$tag_campaign, $tag_event";
  
  $qry_params  = "user_id=" . variable_get('fhflickr_user_id', '62728578@N00');
  $qry_params .= "&tags=$tags&tag_mode=all";
  $qry_params .= "&nsid=&text=&firstId=&v=1.6&codeV=1.26";
  $src = "http://www.flickr.com/slideShow/index.gne?$qry_params";
  $style  = "style='margin-top:10px' ";
  $style .= "frameBorder='0' width='500' height='500' scrolling='no'";
  $out = "<iframe src='$src' $style></iframe>";

  return $out;
}

function theme_flickr_img_s($photo) {
  $out = '';
  if($photo) {
    $flickr_square = "http://farm" . $photo->farm . ".static.flickr.com/$photo->server/$photo->photo_id" . "_" . $photo->secret . "_s.jpg";
    $out = '<img src="' . $flickr_square . '" alt="' . check_plain($photo->title) . '" title="' . check_plain($photo->title) . '" class="flickr_img_s" width="75" height="75" vspace="5" hspace="5">';
  }
  return $out;
}
 
function theme_flickr_album_plain($node) {
  // get photos
  $sql  = "SELECT * FROM {fh_flickr} WHERE nid=%d";
  $photos_x_rows = 5;
  $num_rows = 6;
  $photos_x_page = $photos_x_rows * $num_rows;
  $result = pager_query($sql, $photos_x_page, 0, NULL, $node->nid);

  $out_album = "\n<!-- event_album_plain START -->\n";
  $out_album .= "<table class='photo_album' style='padding:5px; margin: auto;'>\n";
  $i = 0;
  while ($photo = db_fetch_object($result)) {
    $flickr_link = "http://www.flickr.com/photos/walktheworld/$photo->photo_id/";
//    $flickr_square = "http://farm" . $photo->farm . ".static.flickr.com/$photo->server/$photo->photo_id" . "_" . $photo->secret . "_s.jpg";

    if (($i%$photos_x_rows)==0) $out_album.= "  <tr class='photo_album'>\n";
    $out_album .= "    <td class='photo_album'>\n";
//    $out_album .= "<a href='$flickr_link'><img src='$flickr_square' alt='$photo->title' title='$photo->title' width='75' height='75' vspace='5' hspace='5'></a>\n";
    $out_album .= l(theme('flickr_img_s', $photo), $flickr_link, array('class' => 'flickr_img_s'),  NULL,  NULL, FALSE,  TRUE);
    $out_album .= "    </td>\n";
    if (($i%$photos_x_rows)==($photos_x_rows-1)) $out_album .= "  </tr>\n";
    $i++;
  }
  $out_album .= "</table>\n";
  $out_album .= theme('pager', NULL, $photos_x_page);
  $out_album .= "\n<!-- event_album_plain END -->\n";
  
//  $photo_info = $flickr->getPhotoInfo(18873349);
//  $out_album .= $pid . " - " . print_r($photo_info,true);
//  $out_album .= print_r($flickr,true);
//  $out .= $out_album . theme('pager', 10, 0, array('noflash' => 'value'));

  return ($i) ? $out_album : '';
}
 
function theme_flickr_album_msg($msg, $nid, $flash=NULL) {
  $link = l(t('click here'), "node/$nid", NULL, $flash);
  return "<div class='flickr_album_msg'>$msg, $link</div>\n";
}

/**
 * Implementation of op view for hook_nodeapi().
 *  
 * @ingroup fhflickr_helpers
 */
function fhflickr_nodeapi_view($node) {
  global $user;
  $flash = (isset($_GET['flash']));

  $sql  = "SELECT count(*) FROM {fh_flickr} WHERE nid=%d";
  if(db_result(db_query($sql,$node->nid))>0) {
    if ($flash) {
      $album  = theme('flickr_album_flash', $node);
      $msg  = theme('flickr_album_msg', t("If you'd like to see these photos without Flash"), $node->nid);
    } else {
      $album  = theme('flickr_album_plain',$node);
      $msg  = theme('flickr_album_msg', t("If you'd like to see these photos with Flash"), $node->nid, 'flash');
    }
    $out  = "<div class='flickr_album'>\n";
    $out .= "$album\n$msg\n";
    $out .= "</div>\n";
  } else {
    $out = '';
  }
  return $out;
}

/**
 * Implementation of hook_nodeapi().
 *  
 * @ingroup fhflickr_core
 */
function fhflickr_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
global $user;

  if($node->type != 'fhwalk') return;

  switch ($op) {
    case 'fh_settings':
      return fhflickr_settings();
      break;
    case 'insert':
    case 'update':
      if(!$node->tag && $node->path) {
        $tags = split('/',  $node->path );
        $tag_event = fhflickr_tags4flickr(array_pop($tags));
        $sql = "UPDATE {gathering_node} SET tag='%s' WHERE nid = %d";
        db_query($sql, $tag_event, $node->nid);
      }
      break;  
    case 'load':
      $sql = "SELECT tag FROM {gathering_node} WHERE nid = %d";
      $additions = db_fetch_array(db_query($sql, $node->nid));
      return $additions;
      break;
    case 'view':
      $node->body .= fhflickr_nodeapi_view($node);
      $node->body .= _fhflickr_upload_form($node);
      break;
  }
}

/********************
 * HELPERS          *
 ********************/
function fhflickr_get_rnd_photo($nid) {
  $sql  = "SELECT * FROM {fh_flickr} WHERE nid=%d";
  
  if($num_rows=db_num_rows(db_query($sql, $nid))) {
    $num_skip = floor(rand(0, $num_rows));
    $sql .= " LIMIT %d,1";
    $photo = db_fetch_object(db_query($sql, $nid, $num_skip));
    $out = theme('flickr_img_s', $photo)   . '<br/>';
  } else {
    $out = '';
  }
  return $out;
}

/**
 * get photos from flickr
 *  
 * @ingroup fhflickr_helpers
 */
function fhflickr_photos_getInfo($photo_id, $secret='') {

  if($secret);
  $params = array(
    'photo_id' => $photo_id,
	  'format'   => 'php_serial',  
    'method'   => 'flickr.photos.getInfo', 
  );
  $encoded_params = _fhflickr_get_request($params);

  // call the API and decode the response
  $url = "http://api.flickr.com/services/rest/?$encoded_params";
  $rsp = fh_file_get_contents($url);
  $rsp_obj = unserialize($rsp);
  return ($rsp_obj['stat'] == 'ok') ? $rsp_obj : $url;
}

/**
 * get photos from flickr
 *  
 * @ingroup fhflickr_helpers
 */
function fhflickr_photos_search_tag($tags) {
  // set param  
  $apiKey = variable_get('fhflickr_apiKey', 'b9937eed5e47e753b717ddd7a2045bc7');
  $userID = variable_get('fhflickr_user_id', '62728578@N00');
  
  $perPage = 500;
  $params = array(
    'api_key'  => $apiKey,
    'user_id'  => $userID,
	  'format'   => 'php_serial',  
    'method'   => 'flickr.photos.search', 
    'per_page' => $perPage,
    'tags'     => $tags,
    'tag_mode' => 'all',
    'page'     => 1,
  );
  $encoded_params = array();
  foreach ($params as $k => $v) {
	  $encoded_params[] = urlencode($k).'='.urlencode($v);
  }

  // call the API and decode the response
  $url = "http://api.flickr.com/services/rest/?".implode('&', $encoded_params);
  $rsp = fh_file_get_contents($url);
  $rsp_obj = unserialize($rsp);
  return ($rsp_obj['stat'] == 'ok') ? $rsp_obj : $url;
} 

/**
 * refresh node
 *  
 * @ingroup fhflickr_helpers
 * 
  [page] => 1 [pages] => 1 [perpage] => 100 [total] => 88 
  Array ( 
    [id] => 20927759 
    [owner] => 62728578@N00 
    [secret] => 47cd5b577c 
    [server] => 16 
    [farm] => 1 
    [title] => wtw islamabad 1/2 
    [ispublic] => 1 
    [isfriend] => 0 
    [isfamily] => 0 ) 
*/
function fhflickr_refresh_node($node) {
  if(is_numeric($node)) $node = node_load($node);
  
  $tag_event    = $node->tag;
  $tag_campaign = $node->campaign->shortname;
  $tags="$tag_campaign, $tag_event";
  // get photos
  if($rsp_obj = fhflickr_photos_search_tag($tags)) {
    $sql = "DELETE FROM {fh_flickr} WHERE nid=%d";
    db_query($sql, $node->nid);
    $sql = "INSERT INTO {fh_flickr} " .
      "(nid, title, tags, photo_id, secret, server, farm, timestamp) " .
      " VALUES " . 
      "(%d,  '%s',  '%s', '%d',  '%s',  '%s',  '%s', %d);";

    foreach ($rsp_obj['photos']['photo'] as $photo) {
      db_query($sql, $node->nid, $photo['title'], $tags, $photo['id'], $photo['secret'],$photo['server'],$photo['farm'], time() );
    }
    return $rsp_obj['photos']['total'];
  } else {
    return -1;
  }
}

function fhflickr_refresh_campaign($camid=NULL) {
  $res = array();
  if($camid) {
    $campaigns = array($camid => ''); 
  } else {
    $campaigns = module_invoke('fhcampaign' , 'get_all_campaigns');
  }
  foreach($campaigns as $camid => $campaign) {
    $walks = fhwalk_get_walks($camid);
    foreach($walks as $nid => $walk) {
      $res[$nid] = fhflickr_refresh_node($nid);
    }
  }
  return $res;
}

// remove _ and / from tag for flickr search
function fhflickr_tags4flickr ($tag) {
  return str_replace(array("/","_"), "", $tag);
}

function _fhflickr_set_node_flickrtag() {
  $campaigns = module_invoke('fhcampaign' , 'get_all_campaigns');
  foreach($campaigns as $camid => $campaign) {
    $walks = fhwalk_get_walks($camid);
    foreach($walks as $nid => $walk) {
      // get tag
      switch($campaign->name) {
        case 'Walk the World 2007':
        case 'Walk the World 2006':
          $node = node_load($nid);
          $tags = split('/',  $node->path );
          $tag_event = array_pop($tags);
          break;
        default:
          $tag_event = "a" . $nid;          
          break;
      }
      $tag_event= fhflickr_tags4flickr($tag_event);
      $sql = "UPDATE {gathering_node} SET tag='%s' WHERE nid=%d;";
      db_query($sql, $tag_event, $nid );
    }
  }
}


/*******************************
 * Flicker API helpers
 *******************************/   
/**
 * Get a signature
 * All API calls using an authentication token must be signed.
 * The process of signing is as follows:
 *  
 * Sort your argument list into alphabetical order based on the parameter name.
 *    e.g. foo=1, bar=2, baz=3 sorts to bar=2, baz=3, foo=1
 * concatenate the shared secret and argument name-value pairs
 *    e.g. SECRETbar2baz3foo1
 * calculate the md5() hash of this string
 * append this value to the argument list with the name api_sig, in hexidecimal string form
 *    e.g. api_sig=1f3870be274f6c49b3e31a0c6728957f
 *     
 **/
function _fhflickr_get_api_sig($params) {
  ksort($params);
  $string = variable_get('fhflickr_apiSecret', '');
  foreach ($params as $k => $v) {
	  $string .= $k . $v;
  }
  return md5($string);
}

/**
 * Generate a GET request from parameters (signed with secret if needed)
 */  
function _fhflickr_get_request($params_add=array(), $signed=FALSE, $auth='') {
  
  // set auth param 
  $params = array(
    'api_key'  => variable_get('fhflickr_apiKey', ''),
  );
  switch($auth) {
    case 'write':
      $params['auth_token'] = variable_get("fhflickr_token_$auth", '');
      break;
  }
  $params = array_merge($params, $params_add);
  if($signed) $params['api_sig'] =_fhflickr_get_api_sig($params);

  // encode params
  $encoded_params = array();
  foreach ($params as $k => $v) {
	  $encoded_params[] = urlencode($k).'='.urlencode($v);
  }
  return implode('&', $encoded_params);
}

/**
 * Generate a GET request from parameters (signed with secret if needed)
 */  
function _fhflickr_post_request($params_add=array(), $signed=FALSE, $auth='') {

  // set auth param 
  $params['api_key'] = variable_get('fhflickr_apiKey', '');
  switch($auth) {
    case 'write':
      $params['auth_token'] = variable_get("fhflickr_token_$auth", '');
      break;
  }
  $params = array_merge($params, $params_add);
  if($signed) $params['api_sig'] =_fhflickr_get_api_sig($params);
/*
  // encode params
  $encoded_params = array();
  foreach ($params as $k => $v) {
	  $encoded_params[urlencode($k)] = urlencode($v);
  }
*/
  
  return $params;
}

function _fhflickr_serv($method, $params_add=array(), $signed=FALSE, $auth='', $http_method='GET') {
  $params_add['method'] = $method;
  $params_add['format'] = 'php_serial';

  switch($http_method) {

    case 'POST':
      $params = _fhflickr_post_request($params, $auth, $signed, $auth);
//      $url = "http://upcoming.yahooapis.com/services/rest/";
      // create a new cURL resource
      // http://www.faqts.com/knowledge_base/view.phtml/aid/15705/fid/342
      $ch = curl_init();
      curl_setopt($ch, CURLOPT_URL, $url);
      curl_setopt($ch, CURLOPT_RETURNTRANSFER,1);
      curl_setopt($ch, CURLOPT_REFERER, $_SERVER["SCRIPT_URI"] );
      curl_setopt($ch, CURLOPT_POST,1);
      curl_setopt($ch, CURLOPT_POSTFIELDS, $params);
      curl_setopt($ch, CURLOPT_PROXY , variable_get('fhflickr_CURL_proxy', '10.11.40.110:8080'));   
      $rsp = curl_exec ($ch);
      curl_close ($ch);    
      break;
    case 'GET':
      $request = _fhflickr_get_request($params_add, $signed, $auth);
      // call the API and decode the response
      $url = "http://api.flickr.com/services/rest/?$request";
      $rsp = fh_file_get_contents($url);
      $rsp_obj = unserialize($rsp);
      break;
  }
  return $rsp_obj;
}

function fhflickr_getToken($auth) {
  $res = _fhflickr_serv('flickr.auth.getToken', array('frob'=>variable_get('fhflickr_frob','')), true);
  if ($res['stat'] == 'ok') {
    variable_set("fhflickr_token_$auth", $res['frob']['_content']);
  }
}
function fhflickr_checkToken($auth) {
  $token = variable_get("fhflickr_token_$auth",'');
  $res = _fhflickr_serv('flickr.auth.checkToken', array('auth_token'=> $token), true);
  return $res;
}

/*
function _fhflickr_getfrob() {
  $res = _fhflickr_serv('flickr.auth.getFrob',array(), true);
  return ($res['stat'] == 'ok') ? $res['frob']['_content'] :  print_r($res, true);
}
*/
/*
function _fhflickr_get_url_auth($frob, $perms) {
  $params = array('frob' => $frob, 'perms' => $perms);
  return _fhflickr_get_request($params, TRUE);
}
*/
function _fhflickr_geotag($photo) {

  $method = 'flickr.photos.geo.setLocation';
  
  $params = array(
    'photo_id' => $photo->photo_id,
    'lat'      => $photo->lat,
    'lon'      => $photo->lon,
    'accuracy' => 11,
  );
  
  return  _fhflickr_serv($method, $params, TRUE, 'write');
}

function _fhflickr_node_setLocation($nid) {
  $sql = "SELECT * FROM {fh_flickr_geocode} WHERE nid=%d";
  $result = db_query($sql, $nid);
  while ($photo = db_fetch_object($result)) {
    print "<h3>$photo->photo_id</h3>" . print_r(_fhflickr_geotag($photo)) . "<br/>";
  }
}

/*
http://flickr.com/services/rest/?
method=flickr.people.getInfo&
api_key=987654321&
auth_token=9765984&
api_sig=8f3870be274f6c49b3e31a0c6728957f.
*/

/**
 * Upload photo to flickr
 **/

/**
 * Image licenses (values come from flickr.com)
 * 0 -> None (All rights reserved)
 * 4 -> Attribution License
 * 6 -> Attribution-NoDerivs License
 * 3 -> Attribution-NonCommercial-NoDerivs License
 * 2 -> Attribution-NonCommercial License
 * 1 -> Attribution-NonCommercial-ShareAlike License
 * 5 -> Attribution-ShareAlike License
 **/  
 
function _fhflickr_licenses($key=-1) {
  static $licenses;
  if (!is_array($licenses)) {
    $licenses = array(
      '0' => t('Copyright (All rights reserved)'),
      '1' => t('Creative Commons 3.0 by-nc-sa (Attribution-Noncommercial-Share Alike)'),
      '5' => t('Creative Commons 3.0 by-sa (Attribution-Share Alike)')
    );
  }
  if (array_key_exists($key, $licenses)) {
    $out = $licenses[$key];
  } else {
    $out = $licenses;
  }
  return $licenses;
}

function _flickr_photos_geo_setLocation($photo_id, $latitude, $longitude) {
  if($photo_id && $latitude && $longitude) {
    $method = 'flickr.photos.geo.setLocation';
    $params = array(
      'photo_id' => $photo_id,
      'lat'      => $latitude,
      'lon'      => $longitude,
      'accuracy' => 11,
    );
    return  _fhflickr_serv($method, $params, TRUE, 'write');
  }
}
function _flickr_photos_licenses_setLicense($photo_id, $license_id) {
  if($photo_id && $license_id) {
    $method = 'flickr.photos.licenses.setLicense';
    $params = array(
      'photo_id'   => $photo_id,
      'license_id' => $license_id,
    );
    return  _fhflickr_serv($method, $params, TRUE, 'write');
  }
}

/**
 * Updating flickr info
 * flickr.photos.geo.setLocation     -> _flickr_photos_geo_setLocation
 * flickr.photos.licenses.setLicense -> _flickr_photos_licenses_setLicense
 *
 */    
function _fhflickr_flickr_update($photo) {
  _flickr_photos_geo_setLocation($photo['photo_id'], $photo['latitude'], $photo['longitude']);
  _flickr_photos_licenses_setLicense($photo['photo_id'], $photo['license']);
}

function _flickr_get_photoinfo_by_id($photo_id) {
  $photo_info = array();
  $sql = "SELECT * FROM {fh_flickr} WHERE photo_id =%d";
  if($photo_info = db_fetch_array(db_query($sql, $photo_id))) {
    $sql = "SELECT * FROM {location} WHERE oid=%d AND type='node'";
    if($location_info = db_fetch_array(db_query($sql, $photo_info['nid']))) {
      $photo_info = array_merge($location_info, $photo_info);
    }
  }
  return $photo_info;
}

/**
 * Uploading
 * Photos should be POSTed to the following URL:
 * http://api.flickr.com/services/upload/
 *  
 * Arguments
 * photo
 *     The file to upload.
 * title (optional)
 *     The title of the photo.
 * description (optional)
 *     A description of the photo. May contain some limited HTML.
 * tags (optional)
 *     A space-seperated list of tags to apply to the photo.
 * is_public, is_friend, is_family (optional)
 *     Set to 0 for no, 1 for yes. Specifies who can view the photo. 
 **/  
function _fhflickr_upload_flickr($file_info) {

  $file_path = file_directory_path() . '/' . variable_get('fhflickr_directory', 'flickr') .'/' . $file_info['filename'];
  $post_data = array(
    'title'       => $file_info['title'],
    'description' => $file_info['caption'],
    'tags'        => $file_info['tags'],
  );
  $post_data = _fhflickr_post_request($post_data, TRUE, 'write');
  $post_data['photo']  = "@$file_path";

  // create a new cURL resource
  // http://www.faqts.com/knowledge_base/view.phtml/aid/15705/fid/342
  $url = "http://api.flickr.com/services/upload/";
  $rsp = fh_http_POST($url, $post_data);
  
//  $status = curl_getinfo($ch);
  
  // parse simple xml response
  $parser = xml_parser_create();
  xml_parse_into_struct($parser, $rsp, $values, $index);
  xml_parser_free($parser);

  $out = array(
    'STAT'     => $values[0]['attributes']['STAT'],
    'photo_id' => ($values[0]['attributes']['STAT'] == 'ok') ? $values[1]['value'] : 0,
    'XML'      => $rsp,
  );
  if($out['STAT']<>'ok') watchdog('fhflickr', '<b>file_info: </b>' . print_r($file_info, true) . "<br/><b>XML response: </b>" . htmlentities($rsp) );

  return $out['photo_id'];
//  return $out;
  
}

function _fhflickr_upload_ftp($filename, $mode=FTP_ASCII) {
  // copy with ftpl
  $ftp =  array(
    'server'     => variable_get('fhflickr_ftp_server', ''),
    'user_name'  => variable_get('fhflickr_ftp_user_name', ''),
    'user_pass'  => variable_get('fhflickr_ftp_user_pass', ''),
    'remote_dir' => variable_get('fhflickr_ftp_remote_dir', ''),
  );
  $local_file  = file_directory_path() . '/' . variable_get('fhflickr_directory', 'flickr') . "/$filename";
  $remote_file = $ftp['remote_dir'] . "/$filename";
  
  if($ftp['server'] && $ftp['user_name'] && $ftp['user_pass'] && $ftp['remote_dir']) {
    // set up basic connection
    if($conn_id = ftp_connect($ftp['server'])) {
      // login with username and password
      if($login_result = ftp_login($conn_id, $ftp['user_name'], $ftp['user_pass'])) {
        // upload the file
        if($upload = ftp_put($conn_id, $remote_file, $local_file, $mode)) {
          $out = $remote_file;
        } else {
          watchdog('fhflickr', "ftp_put of $local_file to $remote_file failed"); 
          $out = NULL;
        } 
      } else {
        watchdog('fhflickr', 'ftp_login of user ' . $ftp['user_name'] . ' failed'); 
        $out = NULL;
      } 
    } else {
      watchdog('fhflickr', 'ftp_connect to ' . $ftp['server'] . ' failed'); 
      $out = NULL;
    }
    // close the FTP stream
    ftp_close($conn_id);
  } else {
    $out = NULL;
  }
  return $out;
}

/**
 * email notify
 * 
 */  
function _fhflickr_upload_notify($photo_info) {

  foreach($photo_info as $key => $values) $mail_info["%$key"] = $values;
  
  $message = t('<p>%author upload a photo for walk in %city</p>', $mail_info);
  $message .= '<ul>';
  foreach($photo_info as $key => $value) {
    $message .= "<li><b>$key: </b>$value</li>";
  }
  $message .= '</ul>';
  $vars = array(
	  'forward_header_image' => variable_get('forward_header_image', ''),
	  'site_name'            => variable_get('site_name', 'fighthunger.org'),
	  'forward_ad_footer'    => variable_get('forward_ad_footer', ''),
	  'forward_footer'       => variable_get('fhsignup_email_footer', ''),
	  'yemail'               => 'webadmin@fighthunger.org',
	  'message'              => check_markup($message),
  );

  $subject = t('Photo upload (node: %nid)', $mail_info);
  if($photo_info['photo_id']) {
    $subject = ' - ' . t('SUCCESS (%photo_id)', $mail_info);
  } else {
    $subject = ' - ' . t('FAILED (%filename)', $mail_info);
  }
  if(!$photo_info['upload_txt']) $subject = ' - ' . t('FAILED ftp upload txt');
  if(!$photo_info['upload_jpg']) $subject = ' - ' . t('FAILED ftp upload jpg');
  
  $body = theme('email_message', $vars);
  $to   = 'photos@fighthunger.org';
  $from = 'webadmin@fighthunger.org';

  fhmail_send($to, $from, $subject, $body);
}

function fhflickr_upload_form_submit($form_id, $form_values) {
/*
  drupal_set_message("Pippo on '$form_id' says: " . print_r($form_values, true));
  drupal_set_message("Pippo _FILES: " . print_r($_FILES, true));
*/
  // Save new file uploads to tmp dir.
  if (($file = file_check_upload('image'))) {

    // check if is a valid image
    if( $info = image_get_info($file->filepath)) {

      // create file names
      $sql = "SELECT count(*) from {fh_flickr} where nid=%d";
      $count = db_result(db_query($sql, $form_values['nid']));
      $file_base  = variable_get('fhflickr_directory', 'flickr');
      $file_image = $form_values['tag_campaign'] . '_' . $form_values['tag_walk'] . '_' . sprintf('%03d', $count+1) . '.' . $info['extension'] ;
      $file_text  = $form_values['tag_campaign'] . '_' . $form_values['tag_walk'] . '_' . sprintf('%03d', $count+1) . '.txt' ;

      // create info data
      $file_info = array(
        'filename'     => $file_image,
        'title'        => $form_values['image_title'],
        'caption'      => $form_values['image_caption'],
        'location'     => $form_values['image_location'],
        'author'       => $form_values['image_author'],
        'author_mail'  => $form_values['image_email'],
        'city'         => $form_values['city'],
        'province'     => $form_values['province'],
        'country'      => $form_values['country'],
        'latitude'     => $form_values['latitude'],
        'longitude'    => $form_values['longitude'],
        'uid'          => $form_values['uid'],
        'nid'          => $form_values['nid'],
        'license'      => $form_values['image_license'],
        'tags'         => $form_values['tag_campaign'] . ', ' . $form_values['tag_walk'],
      );
      $file_info = array_merge($file_info, $info);
      
      // move image file
      if($file = file_save_upload($file, "$file_base/$file_image", FILE_EXISTS_REPLACE)) {
        // upload to flickr.com
        $file_info['photo_id'] = _fhflickr_upload_flickr($file_info);
  
        // write info file
        $file_temp = file_directory_path() . "/$file_base/$file_text";
        if ($fp = fopen($file_temp, 'wb')) {
          foreach($file_info as $key => $value) {
            fwrite($fp, "$key\t$value\n");
          }
          fclose($fp);
        }
     
        // upload with ftp
        $file_info['upload_txt'] = _fhflickr_upload_ftp($file_text,  FTP_ASCII);
        $file_info['upload_jpg'] = _fhflickr_upload_ftp($file_image, FTP_BINARY);

        // set and get full info from flickr
        if($file_info['photo_id']>0) {
          _fhflickr_flickr_update($file_info);
          $photo_info = fhflickr_photos_getInfo($file_info['photo_id']);
          if($photo_info['photo']) $file_info = array_merge($file_info, $photo_info['photo']);
        } 
     
        // save data in DB
        $sql = "INSERT INTO {fh_flickr} 
          (nid, filename,
           uid, author, author_mail, 
           title, caption, tags, 
           license, photo_id, 
           secret, server, 
           farm, timestamp) " .
          "VALUES (%d, '%s',
                   %d, '%s', '%s', 
                   '%s', '%s', '%s', 
                   '%s', '%s', 
                   '%s', '%s', 
                   '%s', %d)";
        $result = db_query($sql, $file_info['nid'],  $file_info['filename'],
          $file_info['uid'],  $file_info['author'], $file_info['author_mail'],  
          $file_info['title'],  $file_info['caption'],  $file_info['tags'], 
          $file_info['license'], $file_info['photo_id'], 
          $photo_info['photo']['secret'], $photo_info['photo']['server'], 
          $photo_info['photo']['farm'], $photo_info['photo']['dateuploaded']);
  
        _fhflickr_upload_notify($file_info); 
        drupal_set_message(t("Thank you for uploading. Your photo will show shortly on this page."));

        
      }
    } else {
      if($file->filepath) file_delete($file->filepath);
      drupal_set_message(t("The file you try to upload isn't a valid image file"));    
    }
  }
}

function _fhflickr_upload_form($node) {
global $user;

  $vars = array('%mail_subject'      => $node->location['city'] . ' (' . $node->location['country'] . ') - ' . $node->campaign->shortname,
                '%blog_walk_tag'     => $node->campaign->shortname,
                '%blog_campaign_tag' => $node->tag);
  $help = "Please upload <b>photos</b> as soon as you can. If you have any problems send your photos, " .
    "with the walk city and country in the subject line, the name of who took the photo " .
    "and a caption in the body of the email to <a href='mailto:photos@fighthunger.org?subject=%mail_subject'>photos@fighthunger.org.</a><br/>" . 
    "Please send your <b>story</b> (with the city and country in the subject line) to " .
    "<a href='mailto:story@fighthunger.org?subject=%mail_subject'>story@fighthunger.org.</a> " .
    "or post in your personal blog with <b>%blog_walk_tag</b> and <b>%blog_campaign_tag</b> as the tag.<br/>" .
    "For other <b>media</b> (video clips, podcasts, press cuttings, etc.) send to " .
    "<a href='mailto:media@fighthunger.org?subject=%mail_subject'>media@fighthunger.org.</a> " .
    "with city and country in the subject line.";
    
  if(!($user->uid)) {
    $login_array = array(
      '%login' => l(t('login'), 'user/login', array(), drupal_get_destination() ), 
      '%register' => l(t('register'), 'user/register', array(), drupal_get_destination())
    );
    $help .= "<br /><br /><strong>" . t('Please %login or %register before upload!', $login_array) . "</strong>";
  }

  $form['flickr_upload'] = array(
    '#type' => 'fieldset', 
    '#title' => t('Upload Images'), 
    '#collapsible' => TRUE, 
    '#collapsed' => FALSE,
    '#description' => t($help, $vars),
    '#prefix' => '<div class="fhflickr_upload">',
    '#suffix' => '</div>',
  );
/*
  // Wrapper for fieldset contents (used by upload JS).
  $form['attachments']['wrapper'] = array(
    '#prefix' => '<div id="attach-wrapper">',
    '#suffix' => '</div>',
  );
  $form['attachments']['wrapper'] += _upload_form($node);
*/
  $form['flickr_upload']['image'] = array(
    '#type' => 'file',
    '#title' => t('Upload Image')
  );
  $form['flickr_upload']['image_title'] = array(
    '#type' => 'textfield', 
    '#required' => TRUE,
    '#title' => t('Image Title'),
    '#default_value' => $node->title,
    '#description' => t('The title the image will be shown with.')
  );
  $form['flickr_upload']['image_caption'] = array(
    '#type' => 'textarea', 
    '#required' => FALSE,
    '#title' => t('Image Caption'),
    '#default_value' => '',
    '#description' => t('The caption the image will be shown with.'),
  );
  $form['flickr_upload']['image_location'] = array(
    '#type' => 'textfield', 
    '#required' => TRUE,
    '#title' => t('Image Location'),
    '#default_value' => $node->location['city'] . " - (" . $node->location['country'] . ')',
    '#description' => t('The caption the image will be shown with.')
  );
  $form['flickr_upload']['image_author'] = array(
    '#type' => 'textfield', 
    '#required' => TRUE,
    '#title' => t('Photographer'),
    '#default_value' => ($user->first_name && $user->last_name) ? "$user->first_name $user->last_name" : $user->name,
    '#description' => t('The author the image will be credited.')
  );
  $form['flickr_upload']['image_email'] = array(
    '#type' => 'textfield', 
    '#required' => TRUE,
    '#title' => t('Photographer email'),
    '#default_value' => $user->mail,
    '#description' => t('The author email.')
  );
  $form['flickr_upload']['image_license'] = array(
    '#type' => 'select', 
    '#required' => TRUE,
    '#title' => t('Image License'),
    '#default_value' => 1, 
    '#options' => _fhflickr_licenses(),
    '#description' => t('The license the image will be used.<br/><i>' .
      'If you wish, you can associate a Creative Commons license with your photo, to grant people the ' .
      'right to use your work under certain circumstances.  For more information on what your options are, ' .
      'please visit the <a href="http://www.creativecommons.org/">Creative Commons</a> website.</i>')
  );
  $form['flickr_upload']['nid'] = array('#type' => 'hidden', '#value' => $node->nid);
  $form['flickr_upload']['uid'] = array('#type' => 'hidden', '#value' => $user->uid);
  $form['flickr_upload']['tag_campaign'] = array('#type' => 'hidden', '#value' => $node->campaign->shortname);
  $form['flickr_upload']['tag_walk'] = array('#type' => 'hidden', '#value' => $node->tag);
  $form['flickr_upload']['city']      = array('#type' => 'hidden', '#value' => $node->location['city']);
  $form['flickr_upload']['province']  = array('#type' => 'hidden', '#value' => $node->location['province']);
  $form['flickr_upload']['country']   = array('#type' => 'hidden', '#value' => $node->location['country']);
  $form['flickr_upload']['latitude']  = array('#type' => 'hidden', '#value' => $node->location['latitude']);
  $form['flickr_upload']['longitude'] = array('#type' => 'hidden', '#value' => $node->location['longitude']);

  $form['flickr_upload']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Upload'),
  );
  $form['#attributes']['enctype'] = 'multipart/form-data'; 

  
  $output =  drupal_get_form('fhflickr_upload_form', $form);
  return $output;
}

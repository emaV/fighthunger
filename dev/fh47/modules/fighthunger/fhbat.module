<?php
// $Id: fhbat.modue, v 3.0.1 2006-11-29 14:26:00 ema Exp $

/**
 * @file
 * Enables the creation of bats.
 * 
 * Developed by Emanuele Quinto for fighthunger.orgh
 * Based on fh_bat by echoditto
 * Released under the GNU General Public License
 * http://www.gnu.org/licenses/gpl.txt  
 * 
 * Depends on:
 * - partners.module
 * 
 *   NOTE: change to partners_partners table
 *         ALTER TABLE `partners_partners` ADD `data` VARCHAR(128) NOT NULL ;  
 *   
 * 
 * WORKFLOW
 * 1) User click the link on the block <- _fh_bat_block_get_block($bid)
 * 2) Processed by fh_bat_page_submit
 * 3) Redirected 
 *
 * TODO
 * - invite
 * - multiple bat
 * - custom bat page 
 */

// Loads simple xml library
require_once drupal_get_path('module', 'webcollect') . '/xmlsimpleapi.inc'; 

/**
 * Implementation of hook_help().
 */
function fhbat_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Enables the creation of bats.');
  }
}

/**
 * Implementation of hook_perm().
 */
function fhbat_perm() {
  return array('administer fhbat');
}

/**
 * Implementation of hook_menu().
 */
function fhbat_menu($may_cache) {
  $items = array();
  if ($may_cache) {
    $items[] = array(
      'title'    => variable_get('fhbat_map_title', 'Click to Feed around the world'),
      'path'     => 'fhbat_map',
      'callback' => 'fhbat_map',
      'access'   => true,
    );
    $items[] = array(
      'path'     => 'SpareAClick',
      'callback' => 'fhbat_SpareAClick',
      'access'   => true,
      'type' => MENU_CALLBACK
    );

    // Ajax callback
    $items[] = array(
      'path' => 'fhbat_clicks', 
      'callback' => 'fhbat_clicks', 
      'access' => true, 
      'type' => MENU_CALLBACK
    );
    
  }
  return $items;
}

/**
 * Get last clicks for ajax connection
 *  
 * @param   $country
 * @return  provinces arrays js filtered
 */
function fhbat_clicks($timestamp_old=-1) {

//  if($ip_geolocation)
//  $provinces = (array)_fhlocation_country_provinces($country);
  if($timestamp_old > 0) {
    $sql = "SELECT * FROM wtw_bat_clicks WHERE timestamp > %d ORDER BY timestamp DESC";
    $result = db_query($sql, $timestamp_old);
  } else {
    $sql = "SELECT * FROM wtw_bat_clicks ORDER BY timestamp DESC LIMIT 5";
    $result = db_query($sql);
  }
  $timestamp_new = $timestamp_old;

  $geodata = array();
  while($click = db_fetch_array($result)) {
    $ip = $click['IP']; 
    if($timestamp_old == -1) $timestamp_old = $click['timestamp'];
    if($timestamp_old > $click['timestamp']) $timestamp_old = $click['timestamp'];
    if($timestamp_new < $click['timestamp']) $timestamp_new = $click['timestamp'];
   
    $data = fhbat_geolocateIP($ip);
    
/*
    $data = array(
      'country_name' => 'Italy',
      'country_code' => 'IT',
      'name'         => 'VIRT_' . $click['timestamp'],
      'longitude' => rand(0, 360) - 180,
      'latitude'  => rand(0, 120) - 60,
    );
*/
    $geodata[] = array_merge($click, $data);
  }

/*
  $click = array(
    'country_name' => 'Italy',
    'country_code' => 'IT',
    'name'         => 'Rome',
    'longitude' => 41,
    'latitude'  => 21,
  );
  $clicks = array($click);
*/
  if($geodata) $geodata = array_reverse($geodata);
  $result = array(
    'timestamp_new' => $timestamp_new,
    'timestamp_old' => $timestamp_old,
    'clicks'        => $geodata,
  );
  print drupal_to_js($result);
 
  exit();
}


/**
 * Get geolocation from IP using
 * http://api.hostip.info API service 
 *
 * @param
 *    $ip IP number 
 * @return 
 *    $data array with location info (name, country, lat and lon)
 * 
 */
 
/**
 * Get from hostip.info
 *   
  
Object ( 
  [gml:description] => This is the Hostip Lookup Service 
  [gml:name] => hostip 
  [gml:boundedby] => Array ( 
      [0] => stdClass Object ( 
          [gml:null] => inapplicable ) ) 
  [gml:featuremember] => Array ( 
      [0] => stdClass Object ( 
          [hostip] => Array ( 
              [0] => stdClass Object ( 
                  [gml:name] => Rome 
                  [countryname] => ITALY 
                  [countryabbrev] => IT 
                  [iplocation] => Array ( 
                      [0] => stdClass Object ( 
                          [gml:pointproperty] => Array ( 
                              [0] => stdClass Object ( 
                                  [gml:point] => Array ( 
                                      [0] => stdClass Object ( 
                                          [gml:coordinates] => 12.45,41.9 ) ) ) ) ) ) ) ) ) ) )
 *
 */
 
function _fhbat_geolocateIP_hostip($ip) {

  $url = "http://api.hostip.info/?ip=$ip&position=true";
  $result  = fh_file_get_contents($url);
  if($result) {
    $data['ip'] = $ip;
//      $data['result'] = htmlentities($result);
    $result = xml_xml2object($result);
//      $data['resultOBJ'] = print_r($result, true);
    $gml_featuremember = 'gml:featuremember';
    $hostip = $result->$gml_featuremember;
    $hostip =  $hostip[0]->hostip[0];
  
    $data['country_name']  = $hostip->countryname;
    $data['country_code']  = $hostip->countryabbrev;
    $gml_name = 'gml:name';
    $data['name'] = $hostip->$gml_name;
    // tricky get la and lon
    $gml_pointproperty = 'gml:pointproperty';
    $gml_point = 'gml:point';
    $gml_coordinates = 'gml:coordinates';
      
/*
      $data['pointproperty'] = $hostip->iplocation[0]->$gml_pointproperty;
      $data['point']         = $data['pointproperty'][0]->$gml_point;
      $data['coordinates']   = $data['point'][0]->$gml_coordinates;
*/      
    $gml_pointproperty = $hostip->iplocation[0]->$gml_pointproperty;
    $gml_point         = $gml_pointproperty[0]->$gml_point;
    $gml_coordinates   = $gml_point[0]->$gml_coordinates;
    
    list($data['longitude'], $data['latitude']) = split(",", $gml_coordinates);
  }
  return $data;
}
 
/**
 * Get from iplocatethis.com
 *
 *

http://www.iplocatethis.com/location.php?ip=83.241.186.194
<iplocatethis>
	<marker lat="59.3333" lng="18.05" notes="83.241.186.194 is located here!"  c1="Sweden" c2="26" c3="Stockholm (26)" c4="" c5="59.3333" c6="18.05" c7="" c8="" />
</iplocatethis>

 *   
 **/  
   
function _fhbat_geolocateIP_iplocatethis($ip) {
  $data['ip'] = $ip;

  $url = "http://www.iplocatethis.com/location.php?ip=$ip";
  $result  = fh_file_get_contents($url);
  $data['result'] = htmlentities($result);
  if($result) {
    // latitude  
    $pattern = '/lat="([^"]*)"/';
    preg_match($pattern, $result, $matches);
    if($matches) $data['latitude'] = $matches[1];
    // longitude  
    $pattern = '/lng="([^"]*)"/';
    preg_match($pattern, $result, $matches);
    if($matches) $data['longitude'] = $matches[1];
    // country  
    $pattern = '/c1="([^"]*)"/';
    preg_match($pattern, $result, $matches);
    if($matches) $data['country_name'] = $matches[1];
    // country  
    $pattern = '/c3="([^"]*)"/';
    preg_match($pattern, $result, $matches);
    if($matches) {
      $name =  $matches[1];
      preg_match('/(.*) \(/', $name, $matches);
      $data['name'] = $matches[1];
    } 
  }
  return $data;
}

function fhbat_geolocateIP($ip) {
global $ip_geolocation;

  if($ip_geolocation[$ip]) {
    $data = $ip_geolocation[$ip];
    $data['cached'] = true;
  } else {
//    $data = _fhbat_geolocateIP_hostip($ip);
    $data = _fhbat_geolocateIP_iplocatethis($ip);
    if($data['longitude'] && $data['latitude'] ) {
      $ip_geolocation[$ip] = $data;
      $data['cached'] = false;
    } else {
      if($ip_geolocation) {
        $data_fake = $ip_geolocation[array_rand($ip_geolocation)];
        $data_fake['result'] = $data['result'];
        $data_fake['ip'] = $data['ip'];
        $data = $data_fake;
      } else {
        $data['latitude'] = '47.61';
        $data['longitude'] = '-122.33';
        $data['country_name'] = 'United States';
        $data['name'] = 'Seattle';
      }
      $data['recovered'] = true;
    }
    watchdog('fhbat', 'geolocateIP: ' . print_r($data, true));
  }
  // shorten the cache
  if(count($ip_geolocation)>=100) array_shift($ip_geolocation);
  return $data;
}

/**
 * Display gmap of last clicks 
 *
 */ 
function fhbat_map() {

  drupal_add_js(drupal_get_path('module', 'fhbat') . '/fhbat.js');
  $ajax_url = url('fhbat_clicks', NULL,  NULL, TRUE);
  
  $gmap_array =array(
    'id'        => 'map',
    'width'     => '700px',
    'height'    => '500px',
    'control'   => 'None', 
    'type'      => 'Map',
    'tcontrol'  => 'on',
    'latitude'  => 0, 
    'longitude' => 0,
    'span'      => 0,
    'zoom'      => 2,
  );
  $out .= gmap_draw_map($gmap_array);

  $out .= "<div id='fhbat_map' fh_clicks='$ajax_url'>";
//  $out .= '<button onclick="refreshMap();" id="fhbat_button">refresh</button>';
  $out .= '</div>';
  $link = '<a href="http://www.iplocatethis.com">iplocatethis.com</a>';
  $out .= "<p style='text-align: right'>Powered by $link</p>";
  
  return $out;
}


/**
 * Get random banner 
 *
 * @param $tid
 *   Which banner category.  
 * 
 * @return
 *   nid of the banner.
 */ 
function  fhbat_banner_get($tid) {
  $sql = 'SELECT b.* FROM {node} n ' .
    'INNER JOIN {term_node} tn ON n.nid = tn.nid ' .
    'INNER JOIN {banner} b ON n.vid = b.vid ' .
    'WHERE tn.tid = %d AND b.workflow = 1';
  $result = db_query($sql, $tid);

  // build ballot
  $ballot = array();
  $banners = array();
  while ($banner = db_fetch_object($result)) {
    for ($i = 0; $i < $banner->chance; $i++) {
      $ballot[] = $banner->nid;
    }
    $banners[$banner->nid] = $banner;
  }
  
  // choose random banner
  $max = count($ballot) - 1;
  if ($max > 0) {
    $random = mt_rand(0, $max);
  }
  else {
    $random = 0;
  }
  $nid = $ballot[$random];
/*  
  // get banner and remove it from the ballot
  $banner = $banners[$nid];
  
  // update view statistics, admin and owner views are not counted
  db_query('UPDATE {banner} SET views = views + 1, views_day = views_day + 1, views_week = views_week + 1 WHERE vid = %d', $banner->vid);


  // change banner status?
  if ($banner->views_max > 0 && $banner->views >= $banner->views_max) {
    // limit reached
    db_query('UPDATE {banner} SET workflow = 5 WHERE vid = %d', $banner->vid);
  }
  else if ($banner->views_day_max > 0 && $banner->views_day >= $banner->views_day_max) {
    // day limit reached
    db_query('UPDATE {banner} SET workflow = 2 WHERE vid = %d', $banner->vid);
  }
  else if ($banner->views_week_max > 0 && $banner->views_week >= $banner->views_week_max) {
    // week limit reached
    db_query('UPDATE {banner} SET workflow = 3 WHERE vid = %d', $banner->vid);
  }
*/  
  return $nid;
}

function theme_fhbat_banner_view($node) {
  $output = '<center><b>One child has been fed by:</b><br />';
  $output .= theme('banner_view_upload', $node) . '</center>';
  return $output;
}

function theme_fhbat_banner_list($tid, $banner_exclude = 0) {
  $output = '<center><b>Our click-to-feed sponsors:</b><br />';

  $sql = 'SELECT b.*, n.nid FROM {node} n ' .
    'INNER JOIN {term_node} tn ON n.nid = tn.nid ' .
    'INNER JOIN {banner} b ON n.vid = b.vid ' .
    'WHERE tn.tid = %d AND b.workflow = 1';
  $result = db_query($sql, $tid);

  while ($banner = db_fetch_object($result)) {
    if($banner->nid <> $banner_exclude) {
      $node = node_load($banner->nid);
  
      // get first attached file
      if ($node->files) {
        foreach ($node->files as $key => $file) {
          $file = (object)$file;
          if ($file->list && !$file->remove) {
            break; // we only need the first listed file
          }
        }
      }
      $img_attr = array(
        'width'  => $node->width,
        'height' => $node->height,
        'alt'    => $node->title,
      );
  
      $url_attr = array('title' => $node->url);
      if ($node->target != '_none') {
        $url_attr['target'] = $node->target;
      }
      $banner_item = theme('banner_image', file_create_url($file->filepath), $img_attr) . '<br />' . $node->title;
      $output .= '<p>' . l( $banner_item, 'node/'. $node->nid, $url_attr, NULL, NULL, FALSE, TRUE) . '</p>';
    }
  }
  return $output;
}


/**
 * After click action GET
 * redirect to banner/nid 
 */
function fhbat_SpareAClick() {
global $base_url;
global $user;

  $bid = 2;
  $validation_type = 'facebook';
  $data = '';
  
  $authkey = $_GET['auth'];
  $userip  = $_GET['ip'];

  // check mda5 auth key
  $validation = ($authkey==='26cae7718c32180a7a0f8e19d6d40a59');
 
  $teswe = ($validation) ? "OK" : "NOOK";
  $message .= print_r($_GET, true);
  $message .= "<br/>AUTH: $authkey, IP: $userip";
  $message .= "<hr/>$validation_type -  $validation - $teswe -" . time() . " - " . $timestamp_last . " - " . variable_get('fhbat_validation_timer', '60');

//  if($validation) {
  if($validation) {
    $bat_value  = fhbat_get_plot_value($bid);
    db_query( "INSERT INTO {wtw_bat_clicks}  
                 (bid, timestamp, validation_type, data, IP)
               VALUES 
                 (%d, UNIX_TIMESTAMP(NOW()), '%s', '%s', '%s')",
               $bid, $validation_type, $data, $userip);
  
    $message .= variable_get('fhbat_thanks', 'Thanks for visiting our site and clicking to feed a child.'); 
    
    // get random banner
    $fhbat_category = variable_get('fhbat_category', 0);
    $banner_nid = fhbat_banner_get($fhbat_category);
    $banner = node_load($banner_nid);
    $message .= theme('fhbat_banner_view', node_load($banner_nid));
    
    // Update banner statistics and redirect user to target URL
    if ($banner) {
      // don't update banner stats for site admin or banner owner
      if ($user->uid != 1 && $user->uid != $banner->uid) {
        db_query('UPDATE {banner} SET clicks = clicks + 1, clicks_day = clicks_day + 1, clicks_week = clicks_week + 1 WHERE nid = %d', $banner_nid);
      }
      if ($banner->clicks_max > 0 && ($banner->clicks + 1) == $banner->clicks_max) {
        watchdog('special', t("banner: '%banner' %status, reached max of %clicks clicks.", array('%banner' => l($banner->title, 'node/'. $banner->id, NULL, NULL, FALSE, TRUE), '%status' => _banner_workflow(BANNER_BLOCKED), '%clicks' => $banner->max_clicks)));
        db_query('UPDATE {banner} SET workflow = %d WHERE vid = %d', BANNER_BLOCKED, $banner->vid);
      }
    }
  } else {
    $message .= variable_get('fhbat_validation_time_msg', '');
  }
  $redirect = variable_get('fhbat_redirect', 'home');
  drupal_get_messages();
  drupal_set_message($message);
  drupal_goto($redirect);
  
}

/**
 * After click action POST
 * redirect to banner/nid 
 */
function fhbat_page_submit($form_id, $form_values) {
global $base_url;
global $user;

  $server = $_SERVER;

// Update data on custom table 
  $bid = $form_values['bid'];
  $validation_type = $form_values['validation_type'];
  $data = ($user) ? $user->mail : ''; 
  $userip = $_SERVER['REMOTE_ADDR'];
  // If Drupal is behind a proxy, use the X-Forwarded-For header
  // instead of the straight IP address http://drupal.org/node/169263
  if ($_SERVER['HTTP_X_FORWARDED_FOR']) {
   $userip = array_pop(explode(',', $_SERVER['HTTP_X_FORWARDED_FOR']));
  }
  
  switch($validation_type) {
    case 'time':
      $timestamp_check = time() - variable_get('fhbat_validation_time_term', '60');
      if($user->mail) {
        
        $sql = "SELECT COUNT(timestamp) FROM wtw_bat_clicks WHERE data='%s' AND timestamp >%d";
        $timestamp_count = db_result(db_query($sql, $user->mail, $timestamp_check));
//$message .= "USER: $user->mail -> $timestamp_count<br/>";
      } else {
        $sql = "SELECT COUNT(timestamp) FROM wtw_bat_clicks WHERE IP='%s' AND timestamp >%d";
        $timestamp_count = db_result(db_query($sql, $userip, $timestamp_check));       
//$message .= "IP: $userip -> $timestamp_count<br/>";
      }
      $validation = ($timestamp_count < variable_get('fhbat_validation_time_clicks', '1'));
      break;
    case 'none':
    default:
      $validation = true;
      break;
  }
  
//  $teswe = ($validation) ? "OK" : "NOOK";
//  $message .= "$validation_type -  $validation - $teswe -" . time() . " - " . $timestamp_last . " - " . variable_get('fhbat_validation_timer', '60');

  if($validation) {
    $from = $_SERVER['HTTP_REFERER'];
    $bat_value  = $form_values['bat_value'];
    db_query( "INSERT INTO {wtw_bat_clicks}  
                 (bid, timestamp, validation_type, data, IP)
               VALUES 
                 (%d, UNIX_TIMESTAMP(NOW()), '%s', '%s', '%s')",
               $bid, $validation_type, $data, $userip);
  
    $message .= variable_get('fhbat_thanks', 'Thanks for visiting our site and clicking to feed a child.'); 
    $redirect = variable_get('fhbat_redirect', '');
    
    // get random banner
    $fhbat_category = variable_get('fhbat_category', 0);
    $banner_nid = fhbat_banner_get($fhbat_category);
    $banner = node_load($banner_nid);
    $message .= theme('fhbat_banner_view', node_load($banner_nid));
    
    // Update banner statistics and redirect user to target URL
    if ($banner) {
      // don't update banner stats for site admin or banner owner
      if ($user->uid != 1 && $user->uid != $banner->uid) {
        db_query('UPDATE {banner} SET clicks = clicks + 1, clicks_day = clicks_day + 1, clicks_week = clicks_week + 1 WHERE nid = %d', $banner_nid);
      }
      if ($banner->clicks_max > 0 && ($banner->clicks + 1) == $banner->clicks_max) {
        watchdog('special', t("banner: '%banner' %status, reached max of %clicks clicks.", array('%banner' => l($banner->title, 'node/'. $banner->id, NULL, NULL, FALSE, TRUE), '%status' => _banner_workflow(BANNER_BLOCKED), '%clicks' => $banner->max_clicks)));
        db_query('UPDATE {banner} SET workflow = %d WHERE vid = %d', BANNER_BLOCKED, $banner->vid);
      }
    }
    drupal_get_messages();
    drupal_set_message($message);
    drupal_goto($redirect);
  } else {
    $message .= variable_get('fhbat_validation_time_msg', '');
    drupal_get_messages();
    drupal_set_message($message);
  }
}  

/*
 * Setting page
 */
 
function fhbat_settings() {

  $form['fhbat_validation_options'] = array(
    '#type'  => 'fieldset',
    '#title' => t('Validation options'),
    '#collapsible' => TRUE,
    '#collapsed'   => FALSE,
    '#weight'      => -1,
  );  
  $options = array(
    'none'  => t('None'),
    'time'  => t('Time')
  );
  $form['fhbat_validation_options']['fhbat_validation'] = array(
    '#type' => 'select',
    '#title' => t('Validation rule'),
    '#default_value' => variable_get('fhbat_validation','none'),
    '#options' => $options,
    '#description' => t('Select a validation rule'),  
  );
  $form['fhbat_validation_options']['fhbat_validation_time_term'] = array(
    '#type' => 'textfield',
    '#title' => t('Term'),
    '#default_value' => variable_get('fhbat_validation_time_term', '60'), 
    '#description' => t('Time period for max cliks check.')
  );
  $form['fhbat_validation_options']['fhbat_validation_time_clicks'] = array(
    '#type' => 'textfield',
    '#title' => t('Clicks'),
    '#default_value' => variable_get('fhbat_validation_time_clicks', '1'), 
    '#description' => t('Max number of clicks in term.'),
  );
  $txt = 'You (or someone else) has already clicked from this IP address today.<br/>' .
    'Please come again tomorrow and click again.<br/>' .
    'In the meantime please use the form below to tell all your friends about click to feed!';
  $form['fhbat_validation_options']['fhbat_validation_time_msg'] = array(
    '#type' => 'textarea',
    '#title' => t('Timer message'),
    '#default_value' => variable_get('fhbat_validation_time_msg', $txt), 
    '#description' => t('Timer message')
  );

  $form['fhbat_thanks'] = array(
    '#type' => 'textarea',
    '#title' => t('Thanks message'),
    '#default_value' => variable_get('fhbat_thanks', 'Thanks for visiting our site and clicking to feed a child.'), 
    '#cols' => 70,
    '#rows' => 5,
    '#description' => t('This text will be displayed as thanks message.'),
  );

  $form['fhbat_redirect'] = array(
    '#type' => 'textfield',
    '#title' => t('Redirect Path'),
    '#default_value' => variable_get('fhbat_redirect', 'node'),
    '#description' => t('Redirect Path'),
  );

  $form['fhbat_fluff'] = array(
    '#type' => 'textfield',
    '#title' => t('Fluff Factor'),
    '#size' => 25,
    '#maxlength' => 50,
    '#default_value' => variable_get('fhbat_fluff', 0),
    '#description' => t('Amount to "fluff" by'),
  );
  
  $fhbat_block_default = "<CENTER><img src='/files/emptybowlgif.gif'></CENTER><br />\n " .
        "<div style='font-size: 8pt'>So far %%VALUE%% children have been fed through this site.<br />\n " .
        "<strong>Click to make it %%NEXT%%!</strong></div><br />";
  $form['fhbat_block'] = array(
    '#type' => 'textarea',
    '#title' => t('HTML bat block'),
    '#size' => 25,
    '#maxlength' => 50,
    '#default_value' => variable_get('fhbat_block', $fhbat_block_default),
    '#description' => t('Enter HTML bat block, use %%VALUE%% for current bat value and %%NEXT%% for value increased by one'),
  );
  
  $vocabulary_options = array();
  $vocabularies = taxonomy_get_vocabularies('banner');
  foreach($vocabularies as $voc) {
    $tree = taxonomy_get_tree($voc->vid);
    if ($tree) {
      foreach ($tree as $term) {
        $vocabulary_options[$term->tid] = $voc->name . " - " . $term->name;
      }
    }
  }
  $form['fhbat_category'] = array(
    '#type' => 'select',
    '#title' => t('fhbat banner category'),
    '#default_value' => variable_get('fhbat_category', 0),
    '#options' => $vocabulary_options
  );
  $form['fhbat_map_options'] = array(
    '#type'  => 'fieldset',
    '#title' => t('Map options'),
    '#collapsible' => TRUE,
    '#collapsed'   => FALSE,
    '#weight'      => -1,
  );
  $form['fhbat_map_options']['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Map page title'),
    '#default_value' => variable_get('fhbat_map_title', 'Click to Feed around the world'),
  );
  
  
  return $form;
}

/**
 * Get plot value.
 */

function fhbat_get_plot_value ($bid) {
  $plot_value = db_result(db_query('SELECT COUNT(cid) FROM {wtw_bat_clicks} WHERE bid = %s', $bid)); 
  $plot_value += variable_get('fhbat_fluff', 0); 
  return $plot_value;   
}

/**
 * Implementation of block helpers funtions.
 */

function _fhbat_block_get_blocks() {
  $blocks[2]['info'] = t('Bat block');
  return $blocks;
}

function _fhbat_block_get_block($delta) {

  global $base_url;
  global $partners;
  global $user;

// Setting HTML block
  $bid = $delta;
  $bat_plot_value = fhbat_get_plot_value($bid); 
//  $bat_plot_value = 57; 

  $bat_replace['VALUE'] = number_format($bat_plot_value, 0, '', '');
  $bat_replace['NEXT'] = number_format(($bat_plot_value + 1), 0, '', '');
  $form_html = variable_get('fhbat_block', '');

  foreach($bat_replace as $key => $value) {
    $form_html = preg_replace("/%%" . $key . "%%/" , $value, $form_html);
  }


// Setting form
  $form['html'] = array( '#value' => $form_html);
  $form['bid'] = array(
    '#type'  => 'hidden',
    '#value' => $bid
  );
  $form['validation_type'] = array(
    '#type'  => 'hidden',
    '#value' => variable_get('fhbat_validation','none'),
  );
  $form['bat_value'] = array(
    '#type'  => 'hidden',
    '#value' => $bat_plot_value
  );
  $form['submit'] = array(
    '#type'  => 'submit',
    '#value' => t('Click to Feed a Child')
  );
  $out_form = drupal_get_form('fhbat_page', $form);

  $block['subject'] = '';
  $block['content'] = $out_form;

//  return $output;
  return $block;
}
  
/**
 * Implementation of hook_block.
 */
function fhbat_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      return _fhbat_block_get_blocks();
      break;
    case 'view':
      return _fhbat_block_get_block($delta);
      break;
  }
}

function fhbat_form_alter($form_id, &$form) {
global $user;

  switch ($form_id) {
    case 'forward_form':
      $form['message']['#title'] = t('Tell a friend about FightHunger.org');
      $form['message']['#collapsed'] = FALSE;
      break;
  }

  return $form;

}




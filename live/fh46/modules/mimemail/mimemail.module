<?php /* $Id: mimemail.module,v 1.5 2005/12/17 04:09:14 vauxia Exp $ */

/**
 * @file Component module for sending Mime-encoded emails
 * 
 */
 
/**
 * Implementation of hook_help()
 */
function mimemail_help($section) {
  switch($section) {
    
    case 'admin/modules#description' :
      return t('Mime Email');
      
    default :
      return;
  }
}

/**
 * Implementation of hook_user()
 */
function mimemail_user($op, &$edit, &$user, $category='') {
  if ( $op == 'form' && $category == 'account') { 
    $form = form_checkbox(t('Plaintext email only'), 'mimemail_textonly', 1, $user->mimemail_textonly,t('Check this option if you do not wish to receive email messages with graphics and styles'));
    return array(array('title' => t('Email Preference'), 'data' => $form, 'weight'=>0));
  } 
  return;
}

/**
 * Send a mime-encoded email
 * 
 * @param $sender The email address or user object
 * @param $recipient An email address or user object
 * @param $subject An subject line string
 * @param $body An HTML body
 * 
 * @return result from mail() call
 */
function mimemail($sender, $recipient, $subject, $body, $plaintext=null) {
  require_once dirname(__FILE__).'/mimemail.inc';

  // try to determine recpient's text mail preference
  if (!is_null($plaintext)) {
    if (is_object($recipient) && isset($recipient->mimemail_textonly)) {
      $plaintext = $recipient->mimemail_textonly;
    }
    elseif (valid_email_address($recipient)) {
      if (is_object($r = user_load(array('mail'=>$recipient))) && isset($r->mimemail_textonly)) {
        $plaintext = $r->mimemail_textonly;
        $recipient = $r; // might as well pass the user object to the address function
      }
    }
  }

  if (is_null($sender)) {        // use site default for sender
    $sender = array(
    		'name' => variable_get('site_name', 'Drupal'),
    		'mail' => variable_get('site_mail', ini_get('sendmail_from')),
    );
  }
  if (is_null($recipient)) {     // use site default for recipient
    $recipient = array(
    		'name' => variable_get('site_name', 'Drupal'),
    		'mail' => variable_get('site_mail', ini_get('sendmail_from')),
    );
  }

  $sender    = mimemail_address($sender);  
  $mail = mimemail_html_body($body, $subject, $plaintext);
  $message = array(
    'address' => mimemail_address($recipient),
    'subject' => $subject,
    'body'    => $mail['body'],
    'headers' => mimemail_prepare_headers($mail['headers'],$sender),
  );
  $engine = variable_get('mailengine', 'mimemail') .'_mailengine';

  if (!function_exists($engine)) {
    return false;
  }
  if (is_string($message['address'])) {
    return $engine('single', $message);
  }
  if (is_array($message['address'])) {
    return $engine('multiple', $message);
  }
  return false;
}

/**
 * Default mailengine
 */
function mimemail_mailengine($op, $message = array()) {
  //default values
  $message = array_merge( array(
  		'address' => '', 
  		'subject' => '', 
  		'body' => '', 
  		'headers' => '', 
  		'parameters' => ''), $message);
      
  switch ($op) {
    case 'name':
      return t('Mime Mail');
      
    case 'description':
      return t("Default mailing engine using PHP's mail().");
      
    case 'settings': //not implemented
      return false;
      
    case 'single':
      return mail(
        $message['address'], 
        $message['subject'], 
        $message['body'], 
        $message['headers'],
        $message['parameters']
      );
    
    case 'multiple':
      $status = true;
      foreach ($message['address'] as $a) {
        $status = mail_mailengine('single', array_merge($message,array('address'=>$a))) && $status;
      }
      return $status;
    
    default: // method not implemented.
      return false;
  }
}

/**
 * Themeable message body
 */
function theme_mimemail_message($body) {
  $output = '<html><head><style type="text/css"><!--';
  // embed a version of all style definitions
  foreach (theme_add_style() as $style) {
    $output .= file_get_contents($style);
  }
  $output .= '--></style></head><body id="mimemail-body">'.$body.'</body></html>';
  // compress output
  return preg_replace('/\s+|\n|\r|^\s|\s$/',' ',$output);
}

?>
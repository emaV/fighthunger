<?php
// $Id: authorize_net.module,v 1.10.2.1 2005/10/30 19:02:46 mathias Exp $

/********************************************************************
 * Drupal Hooks
 ********************************************************************/

/**
 * Implementation of hook_menu().
 */
function authorize_net_menu($may_cache) {

  $items = array();

  if ($may_cache) {
   $items[] = array('path' => 'authorize_net/form', 'title' => t('Credit Card Payment'),
      'callback' => 'authorize_net_page', 'access' => true, 'type' => MENU_CALLBACK);
  }
  return $items;
}

/**
 * Implementation of hook_help().
 */
function authorize_net_help($section = 'admin/help#authorize_net') {

  switch ($section) {
    case 'admin/modules#description':
      return t('Process payments using authorize.net.');

    case 'admin/settings/authorize_net':
      return t("You need to have an authorize.net merchant account in order to use this module. See <a href=\"http://authorize.net/solutions/gettingstarted.php\">here</a> for more information.");

    case 'authorize_net/form_submit_guidlines':
      return t("Do not submit this form twice, or you may be double billed!");
  }
}

function authorize_net_settings() {
  $output  = form_textarea(t('Explanation or submission guidelines'), 'authorize_net_help', variable_get('authorize_net_help', authorize_net_help('authorize_net/form_submit_guidlines')), 70, 5, t('This text will be displayed at the top of the credit card submission form.'));
  $output .= form_textfield(t('Login ID'), 'authorize_net_login', variable_get('authorize_net_login', ''), 70, 180, t("Enter your merchant login ID."));
  $output .= form_textfield(t('Transaction key'), 'authorize_net_tran_key', variable_get('authorize_net_tran_key', ''), 70, 180, t("Enter your merchant transaction key."));
  $output .= form_textfield(t('Authorize.net processing URL'), 'authorize_net_url', variable_get('authorize_net_url', 'https://secure.authorize.net/gateway/transact.dll'), 70, 180, t('URL of the secure payment processing page.'));
  $output .= form_textfield(t('Successful payment URL'), 'authorize_net_success_url', variable_get('authorize_net_success_url', 'node'), 70, 180, t("This is the destination to which you would like to send your customers when their payment has been successfully completed. The URL must be a Drupal system path. If you are not using clean URLs, specify the part after '?q='. If unsure, specify 'node'."));
  $output .= form_radios(t('Authorize.net test mode'), 'authorize_net_debug', variable_get('authorize_net_debug', 0), array(t('Disabled'), t('Enabled')), t('If enabled, transactions will be sent in test mode and cards will not be charged.'));
  $output .= form_radios(t('Email Authorize.net Reciept'), 'authorize_net_email_customer', variable_get('authorize_net_email_customer', 1), array(t('Disabled'), t('Enabled')), t('If enabled, the customer will recieve a payment confirmation email from Authorize.Net. Keep in mind the ecommerce package sends it own transaction summary as well. Enabling this option is recommended because it provides the customer with an accurate confirmation of the amount you have charged.'));

  return $output;
}

/**
 * Implementation of hook_paymentapi().
 */
function authorize_net_paymentapi(&$txn, $op) {

  switch ($op) {

    case 'display name':
      return t('Pay with credit card');

    case 'payment page':
      return authorize_net_goto($txn);

  }
}

/**
 * Implementation of hook_ec_transactionapi().
 */
function authorize_net_ec_transactionapi(&$txn, $op, $a3 = NULL, $a4 = NULL) {
  if ($txn->payment_method != 'authorize_net') return NULL;

  switch ($op) {
    case 'load':
      $txn->payment = db_fetch_object(db_query("SELECT * FROM {ec_authorize_net} WHERE txnid = %d", $txn->txnid));
      break;
    case 'insert':
    case 'update':
      authorize_net_save($txn);
      break;
    case 'delete':
      authorize_net_delete($txn);
      break;
  }
}

function authorize_net_delete($txn) {
  db_query('DELETE FROM {ec_authorize_net} WHERE txnid = %d', $txn->txnid);
}

/**
 * Called immediately after the user has clicked the checkout button.
 *
 * Redirect the user to the secure server to collect credit card information.
 */
function authorize_net_goto($txn) {

  global $base_url;
  $payment_url = str_replace('http://', 'https://', $base_url). '/'. url("authorize_net/form/". $txn->txnid);

  /* I can't use drupal_goto() becuase I need to go to a https */
  header("Location: $payment_url");
  exit();
}

/**
 * Controller for collecting and processing credit card data.
 */
function authorize_net_page($txnid = null) {

  $edit = $_POST['edit'];
  $op   = $_POST['op'];

  switch ($op) {
    case t('Place your order'):
      if (authorize_net_validate($edit)) {
        authorize_net_process($edit);
      }
      else {
        $output = authorize_net_form($edit['txnid']);
      }
      break;

    default:
      $output = authorize_net_form($txnid);
  }

  print theme('page', $output, $title);
}

/**
 * Build the credit card form.
 */
function authorize_net_form($txnid) {
  global $user, $base_url;

  $t = store_transaction_load($txnid);

  //Make sure the user owns the transaction or is admin.
  if ($user->uid != $t->uid && $user->uid != 1) {
    drupal_access_denied();
  }

  //Make sure the user is connected via SSL
  if (!$_SERVER['HTTPS']) {
    drupal_access_denied();
  }

  if ($t->items) {
    foreach ($t->items as $p) {
      $product = product_load($p);
      $subtotal += $p->qty * $p->price;
      $items[] = t('%order of <b>%title</b> at %price each', array('%order' => format_plural($p->qty, '1 order', '%count orders'), '%title' => $p->title, '%price' => payment_format(product_adjust_price($product)))). "\n";
    }
  }

  $output = t('<div class="help">%authorize_net_help</div>', array('%authorize_net_help' => variable_get('authorize_net_help', authorize_net_help('authorize_net/form_submit_guidlines'))));

  $output .= '<p>'. theme('item_list', $items, t('Your items')). '</p>';

  // Prepare the values of the form fields.
  $years  = drupal_map_assoc(range(2004, 2020));
  $months = drupal_map_assoc(array('01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'));

  $m_field = form_select(t('Month'), 'cc_month', ($month ? $month : date('m')), $months, null, 0, false, true);
  $y_field = form_select(t('Year'), 'cc_year', ($year ? $year : date('Y')), $years, null, 0, false, true);
  $exp_fields = form_group(t('Expiration Date'), $m_field . $y_field);

  $fields = '';
  $fields .= form_textfield(t('Cardholder\'s first name'), 'cc_firstname', $t->billing_firstname, 50, 50);
  $fields .= form_textfield(t('Cardholder\'s last name'), 'cc_lastname', $t->billing_lastname, 50, 50);
  $fields .= form_textfield(t('Credit Card Number'), 'cc_number', '', 21, 21, null, null, true);
  $fields .= $exp_fields;
  //$fields .= form_textfield(t('Three digit number on back of card'), 'ccv', '', 3, 3, null, null, true);
  //$fields .= form_textfield(t('Phone Number'), 'phone', '', 21, 21, null, null, true);

  $output .= form_group(t('Card details'), $fields);
  $output .= form_hidden('txnid', $txnid);
  $output .= form_submit(t('Place your order'));

  return form($output, 'POST', str_replace('http://', 'https://', $base_url). '/'. url("authorize_net/form/". $txnid));
}

/**
 * Ensure the integrity of the user-submitted data.
 */
function authorize_net_validate($edit) {
  $errors = array();
  if (!$edit['cc_number']) {
    $errors['cc_number'] = t('You must enter a credit card number.');
  }
  elseif (!is_numeric($edit['cc_number'])) {
    $errors['cc_number'] = t('Error in credit card number. Please make sure it is typed correctly.');
  }

  foreach ($errors as $name => $message) {
    form_set_error($name, $message);
  }

  return count($errors) == 0;
}

function authorize_net_save($txn) {
  if (is_numeric($txn->txnid) && is_numeric($txn->anid)) {

    if (db_result(db_query("SELECT COUNT(txnid) FROM {ec_authorize_net} WHERE txnid = '%s'", $txn->txnid))) {
      db_query("UPDATE {ec_authorize_net} SET anid = '%s', amount = '%f' WHERE txnid = %d", $txn->anid, $txn->amount, $txn->txnid);
    }
    else {
      db_query("INSERT INTO {ec_authorize_net} (txnid, anid, amount) VALUES (%d, '%s', '%f')", $txn->txnid, $txn->anid, $txn->amount);
    }
  }

}

/**
 * Send the HTTPS POST request and process the returned data.
 */
function authorize_net_process($edit) {

  $t = store_transaction_load($edit['txnid']);

  global $user;
  //Make sure the user owns the transaction or is admin.
  if ($user->uid != $t->uid && $user->uid != 1) {
    drupal_access_denied();
  }

  //Make sure the user is connected via SSL
  if (!$_SERVER['HTTPS']) {
    drupal_access_denied();
  }

  $d['x_version'] = 3.1;
  $d['x_login'] = variable_get('authorize_net_login', '');
  $d['x_delim_data'] = 'TRUE';
  $d['x_delim_char'] = ',';
  $d['x_encap_char'] = '';
  $d['x_type'] = 'AUTH_CAPTURE';

  if (variable_get('authorize_net_debug', 0)) {
    $d['x_test_request'] = 'TRUE';
  }

  $d['x_tran_key'] = variable_get('authorize_net_tran_key', '');

  $d['x_method'] = 'CC';
  $d['x_amount'] = $t->gross;
  $d['x_first_name'] = $edit['cc_firstname'] ? $edit['cc_firstname'] : $t->billing_firstname;
  $d['x_last_name'] = $edit['cc_lastname'] ? $edit['cc_lastname'] :$t->billing_lastname;
  $d['x_card_num'] = $edit['cc_number'];
  //$d['x_card_num'] = $edit['ccv'];
  $d['x_exp_date'] = $edit['cc_month'] . $edit['cc_year'];
  $d['x_address'] = $t->billing_street1;
  $d['x_city'] = $t->billing_city;
  $d['x_state'] = $t->billing_state;
  $d['x_zip'] = $t->billing_zip;
  $d['x_country'] = address_get_country($t->billing_country);
  //$d['x_phone'] = $edit['phone'];
  $d['x_email'] = $t->mail;
  $d['x_customer_ip'] = $_SERVER['REMOTE_ADDR'];

  if(variable_get('authorize_net_email_customer',0)) {
    $d['x_email_customer'] = 'TRUE';
  }
  else {
    $d['x_email_customer'] = 'FALSE';
  }

  $d['x_merchant_email'] = variable_get('site_mail', ini_get('sendmail_from'));
  $d['x_relay_response'] = 'FALSE';
  $d['x_invoice_num'] = $edit['txnid'];
  $d['x_ship_to_first_name'] = $t->shipping_firstname;
  $d['x_ship_to_last_name'] = $t->shipping_lastname;
  $d['x_ship_to_address'] = $t->shipping_street1.' '.$t->shipping_street2;
  $d['x_ship_to_city'] = $t->shipping_city;
  $d['x_ship_to_state'] = $t->shipping_state;
  $d['x_ship_to_zip'] = $t->shipping_zip;
  $d['x_freight'] = $t->shipping_cost;

  $uri = '';
  foreach ($d as $k => $v) {
    $uri .= '&'. $k. '='. urlencode($v);
  }
  $uri = trim($uri, '&');

  global $base_url;
  $payment_url = str_replace('http://', 'https://', $base_url). '/'. url('authorize_net/form/'. $edit['txnid']);
  $agent = "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)";

  // Start CURL session
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, variable_get('authorize_net_url', 'https://secure.authorize.net/gateway/transact.dll'));
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
  curl_setopt($ch, CURLOPT_NOPROGRESS, 1);
  curl_setopt($ch, CURLOPT_VERBOSE, 0);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION,0);
  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_POSTFIELDS, $uri);
  curl_setopt($ch, CURLOPT_TIMEOUT, 120);
  curl_setopt($ch, CURLOPT_USERAGENT, $agent);
  curl_setopt($ch, CURLOPT_REFERER, $payment_url);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);

  $buffer = curl_exec($ch);
  curl_close($ch);

  $return = preg_split("/[,]+/", "$buffer");

  switch ($return[0]) {

    case 1: // Credit card successfully charged
      $edit = object2array(store_transaction_load($edit['txnid']));
      $edit['anid']      = $return[6];
      $edit['amount']    = $return[8];
      $edit['payment_status'] = payment_get_status_id('completed');
      $edit['payment_method'] = 'authorize_net';

      $is_new = (db_result(db_query('SELECT COUNT(txnid) FROM {ec_authorize_net} WHERE txnid = %d', $edit['txnid']))) ? false : true;
      $txnid = store_transaction_save($edit);

      if ($is_new && $txnid) {
        // Compose and send confirmation email to the user
        store_send_invoice_email($txnid);
      }

      // We want to go to a http, not https.
      //$goto = str_replace('https://', 'http://', $base_url);
      header("Location: $goto". '/'. variable_get('authorize_net_success_url', 'node'));
      exit();
      break;

    default: // Credit card error: card was not charged.
      drupal_set_message(t('%authorize_net_error', array('%authorize_net_error' => $return[3])), 'error');
      header("Location: $payment_url");
      exit();
      break;
  }
}

?>

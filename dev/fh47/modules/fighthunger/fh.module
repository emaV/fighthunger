<?php
// $Id: fh.module $

/**
 * @file
 * Fighthunger common API
 * 
 * This module provides a basic API for all other fighthunger modules and thems.
 *  
 * Developed by Jose A. Reyero,  http://www.reyero.net
 * for FightHunger.org
 * Some CiviCRM integration code from civinode module, by Rob Thorne
 */

// Define file name and content type
define('FH_TABLE_FILE_EXTENSION', 'xls');
define('FH_TABLE_CONTENT_TYPE', 'application/vnd.ms-excel');

/**
 * Implementation of hook_help().
 */
function fh_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('<strong>FH:</strong> Fighthunger site common API. Required by all FH modules.');
  }
}

/**
 * Implementation of hook_settings().
 *  
 */
function fh_settings() {
  $form['fh_proxy'] = array(
    '#type'  => 'textfield', 
    '#title' => t('flickr proxy'),
    '#default_value' => variable_get('fh_proxy', ''),
    '#description'   => t('Enter proxy configuration (ex: 10.11.40.110:8080)'),
  );
  return $form;
}


/**
 * Implementation of hook_menu().
 */
function fh_menu($may_cache) {
  $items = array();
  $access = user_access('administer store');
  if($may_cache) {
    $items[] = array(
      'path'     => 'fh_table',
      'title'    => 'reports',
      'callback' => 'fh_table',
      'type'     => MENU_CALLBACK,
      'access'   => true
    );
  }
  return $items;
}


/**
 * Get country list, indexed by ISO code
 * 
 * Gets the list of enabled contries from location.module
 * 
 * @return
 *   Array of countries indexed by two-letter ISO code
 */
function fh_get_country_list() {
  return array('' => '--') + location_get_iso3166_list();
} 

/**
 * Get country name from two-letter ISO code
 * 
 * @param
 *   $code, two-letter ISO code
 * @return
 *   Country name or 'Unknown' if not in the list
 */
function fh_get_country_name($code) {
  $countries = fh_get_country_list();
  return array_key_exists($code, $countries) ? $countries[$code] : 'Unknown';
}

/**
 * Get partner list for a node, used for donations
 * 
 * @param
 *   $nid, node id
 * @return
 *   List of partner names indexed by nid
 */
function fh_node_get_partners($nid) {
  $result = db_query("SELECT n.nid, n.title FROM {node} n INNER JOIN {partners_partners} p ON n.nid = p.pid INNER JOIN {partners_node} pn ON pn.nid = n.nid WHERE p.nid=%d  AND pn.active ", $nid);
  while($partner = db_fetch_object($result)) {
    $list[$partner->nid] = $partner->title;
  }
  return isset($list) ? $list : NULL;
}

/**
 * @group civiCRM related functions
 */

/**
 * CiviCRM initialization
 * 
 * @return
 *   TRUE if CiviCRM initialized
 */
function fh_crm_init(){
  if (function_exists('civicrm_initialize')) {
    civicrm_initialize(TRUE);
    return TRUE;
  }
  return FALSE;
}

/**
 * Get profile groups
 */
function fh_crm_get_profiles(){
  if (!fh_crm_init()) {
  	return array();
  } else {
    $profiles = crm_uf_get_profile_groups();
    $result = array();
    foreach($profiles as $name) {
    	$result[check_plain($name)] = $name;
    }
    return $result;
  }
}

/**
 * Get CiviCRM contact related to Drupal account
 */
function fh_crm_get_contact($account) {
  if (!fh_crm_init()) return FALSE;
  return crm_get_contact(array('email' => $account->mail));
}
/**
 * Update CiviCRM contact related with Drupal user account
 * 
 * @param $account
 *   Drupal user account
 * @param $data
 *   Array of field => values to update
 */
function fh_crm_update_contact($account, $data) {
  if (!fh_crm_init()) return FALSE;
  $contact = crm_get_contact(array('email' => $account->mail));
  crm_update_contact($contact, $data);
}
/**
 * Get CiviCRM id for a country
 * 
 * @param $code
 *   ISO code for a country
 * @return
 *   CiviCRM ID for the country
 */
function fh_crm_country_iso2id($code) {
  if (!fh_crm_init()) return FALSE;
  db_set_active('civicrm');
  $id = db_result(db_query("SELECT id  FROM civicrm_country WHERE iso_code = '%s'", strtoupper($code)));
  db_set_active();
  return $id;
}
/**
 * Get ISO code for a country
 * 
 * @param $code
 *   CiviCRM ID for a country
 * @return
 *   ISO code for a country   
 */
function fh_crm_country_id2iso($code) {
	if (!fh_crm_init()) return FALSE;
  db_set_active('civicrm');
  $iso = db_result(db_query('SELECT iso_code FROM civicrm_country WHERE id = %d', $code));
  db_set_active();  
  return strtolower($iso);
}
/**
 * Get CiviCRM id for a province/state
 * 
 * @param $code
 *   CiviCRM ID for a country
 * @return
 *   ISO code for a country   
 */
function fh_crm_state_abbr2id($code) {
  if (!fh_crm_init()) return FALSE;
  db_set_active('civicrm');
  $result = db_result(db_query("SELECT id FROM civicrm_state_province WHERE abbreviation ='%s'", strtolower($code)));
  db_set_active();  
  return strtolower($result);
}

/**
 * Convert CiviCRM contact into array of data
 */
function fh_crm_contact2array($contact) {
  // Contact object 2 array
	$contactdata = (array)($contact->contact_type_object);
  // Address 2 array
  $addressdata = (array)($contact->location[1]->address);
  return array_merge($contactdata, $addressdata);
}

/**
 * Alter form for webform_client (video contest)
 */ 
function fh_form_alter($form_id, &$form) {
  if( ($form_id == 'webform_client') && 
      ($form['details']['nid']['#value'] == 2357) ) {
   $form['#validate'] = array('_fh_webformcontest_validate' => array()) + (array)$form['#validate'];
  }
}

/**
 *  custom webform_client validation (video contest)
 */ 
function _fh_webformcontest_validate($form_id, $form_values) {
global $user;
  if (!($user->uid)) {
    form_set_error('',t('You have to register before submitting your clip'));
  }
}

/**
 * Formats single data cells
 */
function fh_table_output_format($data) {
  // Replaces decimal points
  if(is_numeric($data)) {
    $data = str_replace('.', ',', $data);
  } else {
    // Replace tabs and line endings
    $data = preg_replace("/\t/", "  ", $data);
    $data = preg_replace("/\n/", "\\n", $data);
  }
  return $data;
}

function fh_table($fh_token) {

  if($data = unserialize(variable_get($fh_token, '')) ) {

    // print HTML header
    drupal_set_header('Content-type:'.$data['contenttype']);

    // get header
    if($data['header']) {
      foreach($data['header'] as $field) {
        $out_header[] = $field['data'];
      }
      print implode($data['fieldseparator'], $out_header).$data['newline'];
    }
    
    // get data
    $result = db_query($data['sql'], $data['args_array']);
  
    while ($row = db_fetch_array($result)) {
      $out_row = array();
      if($data['header']) {
        foreach($data['header'] as $field) {
          $out_row[] = $row[$field['field']];
        }
      } else {
        foreach($row as $field) {
          $out_row[] = $field;
        }
      }
      $out_row = array_map('fh_table_output_format', $out_row);
      print implode($data['fieldseparator'], $out_row).$data['newline'];
    }
  }
  
//  print_r($data);
}
/**
 * Produces text in tab separated format
 *  
 *      fieldseparator newline  
 * CSV: ","            "\n"
 * TAB: "\t"           "\n"
 *  
 */   
function theme_fh_table($text, $sql, $header=array(), $args_array=array(), $fieldseparator = "\t", $newline = "\n", $contenttype = FH_TABLE_CONTENT_TYPE) {
global $conf;

  $data['header'] = $header;
  $data['sql'] = $sql;
  $data['args_array'] = $args_array;
  $data['fieldseparator'] = $fieldseparator;
  $data['newline'] = $newline;
  $data['contenttype'] = $contenttype;

  $value    = serialize($data);
  $name     = "fh_" . md5($value);
  $base_url = 'fh_table';
  variable_set($name, $value);
  return "<p style='text-align: right'>" . l($text, "$base_url/$name") . "</p>";
}

/**
 * Implement file_get_contents with proxy
 * string file_get_contents ( 
 *   string $filename [, bool $use_include_path [, resource $context [, int $offset [, int $maxlen]]]] 
 */  
function fh_file_get_contents($url, $use_include_path=False, $cxContext=NULL ) {

  // check if proxy set
  if(!$cxContext && ($proxy=variable_get('fh_proxy', ''))) {
    $aContext = array(
     'http' => array(
         'proxy' => "tcp://$proxy", 
         'request_fulluri' => True,
         ),
    );
    $cxContext = stream_context_create($aContext);
  }
  return file_get_contents($url, $use_include_path, $cxContext );
}

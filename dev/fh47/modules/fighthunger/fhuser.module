<?php
// $Id: fhuser.module,v 1.168 2005-04-26 15:55:01 jose Exp $

/**
 * @file
 * Fighthunger site specific user management and API
 * 
 * Dependencies:
 *  - fh.module
 *  - location.module
 *  - profile.module
 *  - civicrm
 *  
 * Developed by Jose A. Reyero,  http://www.reyero.net
 * for FightHunger.org
 * 
 */

/**
 * Implementation of hook_help().
 */
function fhuser_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('<strong>FH:</strong> User management and user API.');
  }
}

/**
 * Implementation of hook_settings().
 */
function fhuser_settings() {
  $form['fhuser_location_sync'] = array(
    '#type' => 'checkbox',
    '#title' => t('Synchronize location data with CiviCRM Profile'),
    '#default_value' => variable_get('fhuser_location_sync', 0)
  );
  $form['fhuser_sync_profile'] = array(
    '#type' => 'checkbox',
    '#title' => t('Synchronize user profile data with CiviCRM Profile'),
    '#default_value' => variable_get('fhuser_sync_profile', 0)
  );  

  // User account categories to synchronize
  $categories = _user_categories(NULL);
  foreach($categories as $category) {
    $options[$category['name']] = $category['title'];
  }
  $form['fhuser_crm_profile'] = array(
    '#type' => 'select',
    '#title' => t('CiviCRM Profile to synchronize'),
    '#options' => $options,
    '#default_value' => variable_get('fhuser_crm_profile', 'Contact Information')
  );
  $form['fhuser_profile_profile'] = array(
    '#type' => 'select',
    '#title' => t('Profile module Category to synchronize'),
    '#options' => $options,
    '#default_value' => variable_get('fhuser_profile_profile', 'Contact Information')
  );      
  return $form;
}
/**
 * Implementation of hook_form_alter().
 */
function fhuser_form_alter($form_id, &$form) {
  // drupal_set_message("DEBUG:fh_user_form_alter, form_id=$form_id");
  // If there's a field named 'fhuser' add the subform there
  if(isset($form['fhuser'])) {
    fhuser_subform_alter($form_id, $form);
  }
  /*
  if($form_id == 'user_login') {
    $form['name']['#title'] = t('E-mail');
  }
  */
  if($form_id == 'user_edit' && $category = $form['_category']['#value']) {
    fhuser_form_user_alter($form_id, $form, $category);
  } elseif($form_id == 'user_register') {
    fhuser_form_user_alter($form_id, $form, NULL);
  }
}

/**
 * Rewrite some fields from user form
 */
function fhuser_form_user_alter($form_id, &$form, $category) {
  if($category) {
    $categories = array($category);
  } else {
    // No category is passed, get all the form's fieldsets, first level
    $categories = array();
    $children = element_children($form);
    foreach($children as $key) {
      if($form[$key]['#type'] == 'fieldset') {
        $categories[] = $key;
      }
    }
  }
  // Rewrite specific fields
  foreach($categories as $category) {
	  // Country field
	  if(isset($form[$category]['country'])){
	    $form[$category]['country']['#type'] = 'select';
	    $form[$category]['country']['#options'] = fh_get_country_list();
	  }
  }
};

/**
 * Rewrites form with user data
 * 
 * Adds user login, registration of password retrieve fields
 */
function fhuser_subform_alter($form_id, &$form, $base = 'fhuser') {
  global $user;
  // Check for login or password request
  fhuser_check_post();
  
  if ($user->uid) {
    // User is logged in
    // $form = array('#type' => 'fieldset', '#title' => t('Contact information'));
    $form[$base] = array_merge($form[$base], fhuser_subform_user_display());
    $form[$base]['uid'] = array('#type' => 'value', '#value' => $user->uid);
    $form[$base]['fhuser_form_id'] = array('#type' => 'value', '#value' => 'user_display');
  } else {
    $form[$base]['#description'] = t('You need to %login_link or %register_link before.', array('%login_link' => fhuser_get_link(t('login'), 'login'), '%register_link' => fhuser_get_link(t('register'), 'register')));
    $current = fhuser_get_option('login');
    $options = array(
      'login' => t('Login'),
      'register' => t('Register'),
      'password' => t('Request new password')
    );
    $form[$base]['tabs'] = array('#value' =>  theme('option_tabs', $options, $current));
    switch($current) {
      case 'register':
        //$subform = fhuser_register_subform();
        $subform = fhuser_subform_user_register();
        break;
      case 'login':
        //$subform = fhuser_login_form();
        $subform = fhuser_subform_user_login();
        break;
      case 'password':
        //$subform = fhuser_password_form();
        $subform = fhuser_subform_user_password();
        // Special case, removes other validations and submit hooks
        $form['#validate'] = array();
        $form['#submit'] = array();
        break;
    }
    $form[$base] = array_merge($form[$base], $subform);
    // Add some form parameters for processing
    $form['fhuser_form_base'] = array('#type' => 'hidden', '#value' => $base);
    $form['fhuser_form_id'] = array('#type' => 'hidden', '#value' => $current);
    //$form[$base]['subform'] = array('#value' => $subform);
  }
  // Add validate and submit functions
  $form['#validate'] = array('fhuser_subform_validate' => array()) + $form['#validate'];
  $form['#submit'] = array('fhuser_subform_submit' => array()) + $form['#submit'];
}

 
/**
 * Tries user login with post data
 * 
 * @return
 *   TRUE if data has been submitted
 */
function fhuser_check_post(){
  if(isset($_POST['edit'])) {
    $edit = $_POST['edit'];
    switch($edit['fhuser_form_id']) {
      case 'login':
        user_login_validate('fhuser_form', $edit);
        if(!form_get_errors()){
          user_login_submit('fhuser_form', $edit);
        }
        return TRUE;
      case 'password':
        /*
        // user_pass_validate uses global $form_values
        $GLOBALS['form_values'] = $edit;
        user_pass_validate();
        if(!form_get_errors()) {
          user_pass_submit('fhuser_form', $_POST['edit']);
        }
        return TRUE;
        */
        return TRUE;
    }
  }
  return FALSE;
}

/**
 * Subform: display user data 
 */
function fhuser_subform_user_display(){
  global $user;
	$form['email'] = array('#type' => 'item', '#title' => t("EMail"), '#value' => $user->mail);
	// If the user has no country, shows a drop down else the country
	if($user->country) {
	  $form['country'] = array('#type' => 'value', '#value' => $user->country);
	  $form['show_country'] = array('#type' => 'item', '#title' => t("Country"), '#value' => fh_get_country_name($user->country));
	} else {
	  $form['country'] = array('#type' => 'select', '#title' => t("Country"), '#options' => fh_get_country_list());
	}
  return $form;
}

/**
 * Creates a user login subform
 */
function fhuser_subform_user_login() {
  $form = array('#type' => 'fieldset', '#title' => t('Login'));
  $form['name'] = array('#type' => 'textfield',
    '#title' => t('Username'),
    '#size' => 30,
    '#maxlength' => 60,
    '#required' => TRUE,
    '#attributes' => array('tabindex' => '1'),
  );
  if (variable_get('drupal_authentication_service', FALSE) && count(user_auth_help_links()) > 0) {
    $form['name']['#description'] = t('Enter your %s username, or an ID from one of our affiliates: %a.', array('%s' => variable_get('site_name', 'local'), '%a' => implode(', ', user_auth_help_links())));
  }
  else {
    $form['name']['#description'] = t('Enter your %s username.', array('%s' => variable_get('site_name', 'local')));
  }
  $form['pass'] = array('#type' => 'password',
    '#title' => t('Password'),
    '#description' => t('Enter the password that accompanies your username.'),
    '#required' => TRUE,
    '#attributes' => array('tabindex' => '2'),
  );
  // $form['#validate'] = array('fhuser_login_form_validate' => array());
  // $form['submit'] = array('#type' => 'submit', '#value' => t('Log in'), '#weight' => 2, '#attributes' => array('tabindex' => '3'));
  fhuser_subform_complete('user_login', $form);
  return $form;
}

/**
 * Creates a password recovery subform
 */
function fhuser_subform_user_password() {
    // Display form:
  $form['name'] = array('#type' => 'textfield',
    '#title' => t('Username'),
    '#size' => 30,
    '#maxlength' => 60,
  );
  $form['mail'] = array('#type' => 'textfield',
    '#title' => t('E-mail address'),
    '#size' => 30,
    '#maxlength' => 64,
  );
  $form['submit'] = array('#type' => 'submit',
    '#value' => t('E-mail new password'),
    '#weight' => 2,
  );
  fhuser_subform_complete('user_pass', $form);  
  return $form;
}
/**
 * Creates a user register subform
 */
function fhuser_subform_user_register() {
  $form = array('#type' => 'fieldset', '#title' => t('Register'));
  $form['name'] = array('#type' => 'textfield',
    '#title' => t('Username'),
    '#size' => 30,
    '#maxlength' => 60,
    '#description' => t('Your full name or your preferred username; only letters, numbers and spaces are allowed.'),
    '#required' => TRUE);
  $form['mail'] = array('#type' => 'textfield',
    '#title' => t('E-mail address'),
    '#size' => 30,
    '#maxlength' => 64,
    '#description' => t('A password and instructions will be sent to this e-mail address, so make sure it is accurate.'),
    '#required' => TRUE,
  );
  // Temporarily switch path to get the right fields
  $q = $_GET['q'];
  $_GET['q'] = 'user/register';
  $extra = _user_forms($null, $null, $null, 'register');
  $_GET['q'] = $q;
  
  // Only display form_group around default fields if there are other groups.
  if ($extra) {
    $form['account'] = array('#type' => 'fieldset', '#title' => t('Account information'));
    $form['account']['name'] = $form['name'];
    $form['account']['mail'] = $form['mail'];
    $form['account']['pass'] = $form['pass'];
    $form['account']['notify'] = $form['notify'];
    unset($form['name'], $form['mail'], $form['pass'], $form['notify']);
    $form = array_merge($form, $extra);
  }
  // Add validation and submit functions
  // $form['#validate'] = array('fhuser_register_subform_validate' => array());
  fhuser_subform_complete('user_register', $form);
  // keep track of the fields to use for registering
  $form['_user_fields'] = array('#type' => 'value', '#value' => _fhuser_form_get_fields($form));
  return $form;  
}
// Gets all fields of the form
function _fhuser_form_get_fields(&$form) {
  $result = array();
  foreach(element_children($form) as $field) {
    if($form[$field]['#type'] == 'fieldset' && !$form[$field]['#tree']) {
      $result = array_merge($result,_fhuser_form_get_fields($form[$field]));
    } else {
      $result[] = $field;
    }
  }
  return $result;
}

/**
 * Implements form_alter for the subform
 */
function fhuser_subform_complete($form_id, &$form) {
  $form['#id'] = $form_id;
  foreach (module_implements('form_alter') as $module) {
    $function = $module .'_form_alter';
    $function($form_id, $form);
  }
  unset($form['#id']);
}

function fhuser_subform_validate($form_id, $form_values) {
  //drupal_set_message("fhuser_subform_validate, form_id=$form_id, fhuser_form_id=".$form_values['fhuser_form_id']);
  switch($form_values['fhuser_form_id']) {
    case 'login':
      user_login_validate($form_id, $form_values);
      break;
    case 'register':
      user_register_validate($form_id, $form_values);
      break;
    case 'password':
      // user_pass_validate uses global form_values
      user_pass_validate();
      break;
  } 
}

/**
 * Manages submitted data in subform
 */
function fhuser_subform_submit($form_id, $form_values) {
  //drupal_set_message("fhuser_subform_submit, form_id=$form_id, fhuser_form_id=".$form_values['fhuser_form_id']);
  global $fhuser_enable;
  switch($form_values['fhuser_form_id']) {
    case 'register':
      $fhuser_enable = TRUE;
      // Only register fields should be passed so others are not saved along with the user
      foreach($form_values['_user_fields'] as $key) {
        $user_fields[$key] = $form_values[$key];
      }      
      user_register_submit($form_id, $user_fields);
      $fhuser_enable = FALSE;
      // Set just registered user
      $account = fhuser_get_user();
      $GLOBALS['form_values']['uid'] = $account->uid;
      break;
    case 'password':
      user_pass_submit($form_id, $form_values);
      break;
    case 'login':
      break;
  } 
}

/**
 * Gets current option
 */
function fhuser_get_option($default = '') {
  return isset($_GET['option']) ? $_GET['option'] : $default;
}

/**
 * Gets link for option
 */
function fhuser_get_link($name, $option, $path = NULL, $props = array()) {
  $path = $path ? $path : $_GET['q'];
  return l($name, $path, $props, 'option='.$option);
}

/**
 * Implementation of hook_user
 * 
 * Keeps track of user when registering. This is kind of temporary login
 */
function fhuser_user($op, &$edit, &$account, $category = NULL) {
  global $fhuser_user;
  //drupal_set_message("DEBUG:fhuser_user, op=$op, category=$category");
  
  switch($op) {
    case 'insert':
      // Save last registered user in a global variable
      $fhuser_user = $account;
      // Update crm related fields 
      fhuser_update_crm_contact($account, $edit);
      break;
    case 'update':
      if ($category == variable_get('fhuser_crm_profile', 'none')) {
    		// Update user's contact data
        fhuser_update_related($account, $edit);
      } elseif($category == 'account' && variable_get('fhuser_location_sync', 0) && isset($edit['location'])) {
        fhuser_update_crm_location($account, $edit['location']);
      } elseif($category == variable_get('fhuser_profile_profile', 'none')) {
        fhuser_update_related($account, $edit);
      }
      break;
    case 'load':
      // Change account name 
      // $account->name = $account->first_name . ' ' . $account->last_name;
      break;
  }  
}

/**
 * Synchronize Drupal data with CiviCRM data
 */
function fhuser_update_related(&$account, &$edit) {
  //drupal_set_message("DEBUG:fhuser_update_related");
  if (module_exist('civicrm')) {
    $contact = fh_crm_get_contact($account);
    //var_dump($contact);
    // Update location module with CiviCRM data
    if (module_exist('location') && variable_get('fhuser_location_sync', 0)) {
      global $conf;
      $oldsetting = $conf['location_user'];
      $conf['location_user'] = LOCATION_USER_CIVICRM_ONLY;
      $data = (array)($contact->location[1]->address);
      location_user('update', $data, $account, 'account');
      $conf['location_user'] = $oldsetting;
    }
    // Update profile fields
    if (module_exist('profile') && variable_get('fhuser_sync_profile', 0)) {
      $data['first_name'] = $contact->contact_type_object->first_name;
      $data['last_name'] = $contact->contact_type_object->last_name;
      $data['country'] = fh_crm_country_id2iso($contact->location[1]->address->country_id);
      fhuser_update_profile($account, $data, $edit); 
    }
  }  
}
/**
 * Update specific profile fields
 */
function fhuser_update_profile(&$account, $data, &$edit) {
  //drupal_set_message("DEBUG:fhuser_update_profile");

  $fieldnames = array_keys($data);
  foreach($fieldnames as $key => $name) {
    $fieldnames[$key] = db_escape_string($name);
  }
  $result = db_query("SELECT fid, name, type FROM {profile_fields} WHERE name IN ('".implode("','", $fieldnames)."')");
  while ($field = db_fetch_object($result)) {
    $name = $field->name;
    if (_profile_field_serialize($field->type)) {
       $edit[$name] = serialize($edit[$name]);
    }
    db_query("DELETE FROM {profile_values} WHERE fid = %d AND uid = %d", $field->fid, $account->uid);
    db_query("INSERT INTO {profile_values} (fid, uid, value) VALUES (%d, %d, '%s')", $field->fid, $account->uid, $data[$name]);
    // Update account field
    // $account->{$name} = $data[$name];
    // Mark field as handled (prevents saving to user->data).
    $edit[$name] = NULL;
    drupal_set_message("DEBUG:fhuser_update_profile: field=$name, value=".$data[$name]);    
  }
}
/**
 * Save contact fields in crm profile
 * 
 * When creating a new user all data is not yet in account
 */
function fhuser_update_crm_contact($account, $edit = array()) {
  $values = array_merge((array)$account, $edit);
  if (module_exist('civicrm')) {
    $data = array(
      'first_name' => $values['first_name'],
      'last_name' => $values['last_name'],
      'country_id' => fh_crm_country_iso2id($values['country'])
    );
    fh_crm_update_contact($account, $data);
  }
}
/**
 * Update crm profile with data from location module
 */
function fhuser_update_crm_location($account, $location) {
  if(module_exist('civicrm') && module_exist('location') && variable_get('location_user', '') == LOCATION_USER_COLLECT) {
    $data['street_address'] = $location['street'];
    $data['supplemental_address_1'] = $location['additional'];
    $data['city'] = $location['city'];
    $data['postal_code'] = $location['postal_code'];
    $data['state_province_id'] = fh_crm_state_abbr2id($location['province']);
    $data['country_id'] = fh_crm_country_iso2id($location['country']);
    fh_crm_update_contact($account, $data);
  }
}

/**
 * Returns temporary user for specific actions
 */
function fhuser_get_user(){
  global $user, $fhuser_user;
  if(isset($fhuser_user)) {
    return $fhuser_user;
  } else {
    return $user;
  }
}

/**
 * Returns tabs for different options
 */
function theme_option_tabs($options, $active = ''){
  $output = "<ul class=\"tabs primary\">\n";
  foreach($options as $option => $name) {
    $output .= ($option == $active ? '<li class="active">': '<li>').l($name, $_GET['q'], $option == $active ? array('active' => TRUE) : array(), "option=$option") .'</li>';
  }
  $output .= "</ul>\n";
  return $output;
}
?>
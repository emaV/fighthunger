<?php
// $Id: campaign.module,v 1.186 2006/03/27 18:02:48 killes Exp $

/**
 * @file
 * Campaign management
 * 
 * Dependencies
 *   fhwalk.module
 *     Only for the fhwalk_vocabulary variable
 *  
SQL queries on gathering_campaign

ALTER TABLE `gathering_campaign` CHANGE `active` `status` INT( 2 ) NOT NULL DEFAULT '0';
    
 */

define('CAMPAIGN_STATUS_CLOSED', 0);
define('CAMPAIGN_STATUS_POST', 1);
define('CAMPAIGN_STATUS_ACTIVE', 2);

/**
 * Implementation of hook_help().
 */
function fhcampaign_help($section) {
  switch ($section) {
    case 'admin/help#fhcampaign':
      $output = '<p>'. t('The campaign module is used to create and manage <em>campaigns.') .'</p>';
      return $output;
    case 'admin/modules#description':
      return t('<strong>FH:</strong> Campaign management.');
    case 'node/add#campaign':
      return t('Create a new Wtw Campaign.');
  }
}

/**
 * Implementation of hook_form_alter().
 */
function fhcampaign_form_alter($form_id, &$form) {
  if($form_id == 'taxonomy_form_term' && $form['vid']['#value'] == _fhcampaign_vocabulary()) {
    $form['campaign'] = array('#type' => 'fieldset', '#title' => t('Campaign'), '#weight' => -18);
    if(isset($form['tid']) && $tid = $form['tid']['#value']) {
      $campaign = fhcampaign_get_campaign($tid);
    }
    $campaign = $campaign ? (array)$campaign : array();
    $form['campaign']['shortname'] = array(
      '#type' => 'textfield', 
      '#title' => t('Short name') . $tid, 
      '#default_value' => $campaign['shortname'], 
      '#maxlength' => 64, 
      '#required' => TRUE
    );
    $form['campaign']['startdate'] = array(
      '#type' => 'textfield', 
      '#title' => t('Date'), 
      '#default_value' => $campaign['startdate'], 
      '#description' => t('Enter the date (format year-month-day i.e. 2007-05-13).')
    );
    
    $status_help  = "<dl><dt><b>Campaign status</b></dt>";
    $status_help .= "<dt>Closed</dt><dd><b>Prohibit</b> new events from being added <b>and</b> comments</dd>";
    $status_help .= "<dt>Post Action</dt><dd><b>Prohibit</b> new events from being added <b>allows</b> comments</dd>";
    $status_help .= "<dt>Active</dt><dd><b>Allows</b> new events</dd>";
    
    $form['campaign']['status'] = array(
      '#type' => 'select', 
      '#title' => t('Status'), 
      '#options' => _fhcampaign_status(),
      '#default_value' => $campaign['status'], 
      '#description' => $status_help
    );
    
  } elseif (isset($form['type']) && $type = $form['type']['#value']) {
    switch ($form_id) {
      case $type.'_node_settings':
        $form['workflow']['fhcampaign_support_'. $type] = array(
          '#type' => 'radios',
          '#title' => t('Campaigns'),
          '#options' => array(t('Disabled'), t('Enabled')),
          '#default_value' => variable_get('fhcampaign_support_'. $type, 0),
          '#description' => t('Enable campaigns for this content type'),
        );
        return $form;
      case $type.'_node_form':
        if (variable_get('fhcampaign_support_'.$type, 0) ) {
          $form['#after_build'][] = 'fhcampaign_check_taxonomy';
        } 
        break;
        
    }
  }
}

/**
 * Form callback: after build function for node forms
 */
function fhcampaign_check_taxonomy($form) {
  // Bypass restrictions for some permissions
  if( user_access('administer walks') ) { 
    // Do nothing
  } elseif(($vid = _fhcampaign_vocabulary()) && isset($form['taxonomy'][$vid])) {
    // Remove not permitted campaigns
    if($form['nid']['#value'] && $current = $form['taxonomy'][$vid]['#default_value']) {
      // Keep current value
      $options = $form['taxonomy'][$vid]['#options'];
      $form['taxonomy'][$vid]['#options'] = array();
      foreach($current as $cid) {
        $form['taxonomy'][$vid]['#options'][$cid] = $options[$cid];
      }
    } else {
      // New node. Restrict to active campaigns
      $form['taxonomy'][$vid]['#options'] = fhcampaign_list(CAMPAIGN_STATUS_ACTIVE);
      // Set default value if in query string
      if(isset($_REQUEST['campaign'])&& $cid = $_REQUEST['campaign']) {
        $options = $form['taxonomy'][$vid]['#options'];
        foreach($options as $key => $value) {
          if($key != $cid) {
            unset($form['taxonomy'][$vid]['#options'][$key]);
          }
        }
      }
    }
  }
  return $form;
}

/**
 * Implementation of hook_taxonomy()
 */
function fhcampaign_taxonomy($op, $type, $object = NULL) {
  $object = $object ? (object)$object : NULL;
  if($type == 'term' && $object->vid == _fhcampaign_vocabulary()) {
    switch($op) {
      case 'insert':
      case 'update':
        fhcampaign_save_campaign($object);
        menu_rebuild();
        break;      
      case 'delete':
        db_query("DELETE FROM {gathering_campaign} WHERE camid = %d", $object->tid);
        menu_rebuild();
        break;
    }
  }
}

/**
 * Loads campaign data for content types, ordered by date, latest first
 * FETCH ALSO USING ONLY node id  
 */
function fhcampaign_node_get_campaigns($node) {
  $nid = is_numeric($node) ? $node : $node->nid;

  $list = array();
  // If node has taxonomy, check all terms
  if (is_array($node->taxonomy)) {
    $terms = array();
    foreach ($node->taxonomy as $term) {
      if (is_array($term)) {
        foreach ($term as $tid) {
          $terms[] = db_escape_string($tid);
        }
      }
      else if (is_object($term)) {
        $tems[] = db_escape_string($term->tid);
      }
      else if ($term) {
        $terms[] = db_escape_string($term);
      }
    }
    $result = db_query("SELECT t.*, c.* FROM {term_data} t INNER JOIN {gathering_campaign} c ON t.tid = c.camid WHERE t.vid = %d AND t.tid IN ('".implode("','", $terms) ."') ORDER BY c.startdate DESC", _fhcampaign_vocabulary());
    //drupal_set_message("DEBUG: fhcampaign_node_get_campaigns:".implode('', $terms));
  } else {
    $result = db_query("SELECT t.*, c.* FROM {term_data} t INNER JOIN {gathering_campaign} c ON t.tid = c.camid INNER JOIN {term_node} tn ON t.tid = tn.tid WHERE tn.nid = %d ORDER BY c.startdate DESC", $nid);
  }
  while($campaign = db_fetch_object($result)) {
    $list[] = $campaign;
  }
  return $list;
  
}
/**
 * Menu callback: Administer campaigns
 */
function fhcampaign_admin_campaigns() {
  if($vid = _fhcampaign_vocabulary()) {
    return taxonomy_overview_terms($vid);
  } else {
    drupal_set_message(t('You must set up the campaign vocabulary first'), 'error');
    drupal_goto('adming/settings/campaign');
  }
}

/**
 * Implementation of hook_menu().
 */
function fhcampaign_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array(
      'title' => t('campaigns'),
      'path' => 'admin/campaigns',
      'callback' => 'fhcampaign_admin_campaigns',
      'access' => user_access('administer walks')
    );
  }

  return $items;
}

/**
 * Get campaign list
 * 
 * @param $status
 *   Campaign status, defaults to 'active, if === FALSE will get all campaigns
 */
function fhcampaign_list($status = CAMPAIGN_STATUS_ACTIVE, $index = 'tid', $field = 'name') {
  if($status === FALSE) {
    $result = db_query("SELECT t.*, c.* FROM {term_data} t INNER JOIN {gathering_campaign} c ON t.tid = c.camid WHERE t.vid = %d", _fhcampaign_vocabulary());
  } else {
    $result = db_query("SELECT t.*, c.* FROM {term_data} t INNER JOIN {gathering_campaign} c ON t.tid = c.camid WHERE t.vid = %d AND c.status = '%d'", _fhcampaign_vocabulary(), $status);
  }
  $list = array();
  while($campaign = db_fetch_object($result)) {
    $list[$campaign->$index] = $campaign->$field;
  }
  return $list;
}

/**
 * Get a list of countries for a given campaign
 *  
 * @param $tid taxonomy campaign tid
 * @return countries array
 */
function fhcampaign_country_list($tid) {
  $countries = array();
  $sql = "SELECT l.country FROM {location} l INNER JOIN {node} n ON n.nid = l.oid INNER JOIN {term_node} tn ON tn.nid = n.nid " .
    " WHERE l.type = 'node' AND tn.tid = %d";
  $result=db_query($sql, $tid);
  while($row = db_fetch_array($result)) {
    $countries[$row['country']] = fh_get_country_name($row['country']);
  }
  return $countries;
}

/**
 * @defgroup fh_database FH Database Layer
 * @{
 */

/**
 * Save campaign data
 */
function fhcampaign_save_campaign($campaign) {
  $campaign = (array)$campaign;
  db_query("DELETE FROM {gathering_campaign} WHERE camid = %d", $campaign['tid']);
  db_query("INSERT INTO {gathering_campaign} (camid, shortname, startdate, enddate, status) VALUES(%d, '%s', '%s', '%s', '%d')", $campaign['tid'], $campaign['shortname'], $campaign['startdate'], $campaign['enddate'], $campaign['status']);
  drupal_set_message(t('The campaign data has been updated.'));
}

/**
 * Get latest date from active campaign
 */
function fhcampaign_default_date() {
  return db_result(db_query("SELECT MAX(startdate) FROM {gathering_campaign} WHERE status = %d", CAMPAIGN_STATUS_ACTIVE));
}

/**
 * Get campaign data
 */
function fhcampaign_get_campaign($cid) {
  return db_fetch_object(db_query("SELECT t.*, c.* FROM {term_data} t INNER JOIN {gathering_campaign} c ON t.tid = c.camid WHERE t.tid = %d", $cid));
}

/**
 * Get all campaigns
 */
function fhcampaign_get_all_campaigns() {
  $list = array();
  $result = db_query("SELECT t.*, c.* FROM {term_data} t INNER JOIN {gathering_campaign} c ON t.tid = c.camid WHERE t.vid = %d", _fhcampaign_vocabulary());
  while($campaign = db_fetch_object($result)) {
    $list[$campaign->tid] = $campaign;
  }
  return $list;
}

/**
 * @} End of "defgroup fh_database".
 */
 
/**
 * Get campaign status
 *  
 * @param $sid  
 *    status id
 * @return 
 *    status or array of status (if $sid=-1)
 */ 
function _fhcampaign_status( $sid = -1) {
  $options = array(
    CAMPAIGN_STATUS_CLOSED => t("Closed"),
    CAMPAIGN_STATUS_POST => t("Post Action"), 
    CAMPAIGN_STATUS_ACTIVE => t("Active"));
  if ($sid >= 0) {
    return $options[$sid];
  } else {
    return $options;
  }
}

// Return vocabulary id
function _fhcampaign_vocabulary() {
  return variable_get('fhwalk_vocabulary', 0);
}

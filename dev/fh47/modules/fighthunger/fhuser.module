<?php
// $Id: fhuser.module,v 1.168 2005-04-26 15:55:01 jose Exp $

/**
 * @file
 * Fighthunger site specific user management and API
 * 
 * Dependencies:
 *  
 * Developed by Jose A. Reyero,  http://www.reyero.net
 * for FightHunger.org
 * 
 */


/**
 * Implementation of hook_help().
 */
function fhuser_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('<strong>FH:</strong> User management and user API.');
  }
}

/**
 * Implementation of hook_form_alter().
 */
function fhuser_form_alter($form_id, &$form) {
  // If there's a field named 'fhuser' add the subform there
  if(isset($form['fhuser'])) {
    fhuser_subform_alter($form_id, $form);
  }
}

/**
 * Rewrites form with user data
 * 
 * Adds user login, registration of password retrieve fields
 */
function fhuser_subform_alter($form_id, &$form, $base = 'fhuser') {
  global $user;
  // Check for login or password request
  fhuser_check_post();
  
  if ($user->uid) {
    // User is logged in
    // $form = array('#type' => 'fieldset', '#title' => t('Contact information'));
    $form[$base] = array_merge($form[$base], fhuser_subform_display());
    $form[$base]['uid'] = array('#type' => 'value', '#value' => $user->uid);
    $form[$base]['fhuser_form_id'] = array('#type' => 'value', '#value' => 'user_display');
  } else {
    $form[$base]['#description'] = t('You need to %login_link or %register_link before.', array('%login_link' => fhuser_get_link(t('login'), 'login'), '%register_link' => fhuser_get_link(t('register'), 'register')));
    $current = fhuser_get_option('login');
    $options = array(
      'login' => t('Login'),
      'register' => t('Register'),
      'password' => t('Request new password')
    );
    $form[$base]['tabs'] = array('#value' =>  theme('option_tabs', $options, $current));
    switch($current) {
      case 'register':
        //$subform = fhuser_register_subform();
        $subform = fhuser_subform_user_register();
        break;
      case 'login':
        //$subform = fhuser_login_form();
        $subform = fhuser_subform_user_login();
        break;
      case 'password':
        //$subform = fhuser_password_form();
        $subform = fhuser_subform_user_password();
        // Special case, removes other validations and submit hooks
        $form['#validate'] = array();
        $form['#submit'] = array();
        break;
    }
    $form[$base] = array_merge($form[$base], $subform);
    $form['fhuser_form_id'] = array('#type' => 'hidden', '#value' => $current);
    //$form[$base]['subform'] = array('#value' => $subform);
  }
  // Add validate and submit functions
  $form['#validate'] = array('fhuser_subform_validate' => array()) + $form['#validate'];
  $form['#submit'] = array('fhuser_subform_submit' => array()) + $form['#submit'];
}

 
/**
 * Tries user login with post data
 * 
 * @return
 *   TRUE if data has been submitted
 */
function fhuser_check_post(){
  if(isset($_POST['edit'])) {
    $edit = $_POST['edit'];
    switch($edit['fhuser_form_id']) {
      case 'login':
        user_login_validate('fhuser_form', $edit);
        if(!form_get_errors()){
          user_login_submit('fhuser_form', $edit);
        }
        return TRUE;
      case 'password':
        /*
        // user_pass_validate uses global $form_values
        $GLOBALS['form_values'] = $edit;
        user_pass_validate();
        if(!form_get_errors()) {
          user_pass_submit('fhuser_form', $_POST['edit']);
        }
        return TRUE;
        */
        return TRUE;
    }
  }
  return FALSE;
}

/**
 * Subform: display user data 
 */
function fhuser_subform_display(){
  global $user;
    $form['email'] = array('#type' => 'item', '#title' => t("EMail"), '#value' => $user->mail);
    // If the user has no country, shows a drop down else the country
    $countrylist =  _donation_country_list();
    if(!$user->country) {
      $form['country'] = array('#type' => 'select', '#title' => t("Country"), '#options' => $countrylist);
    } else {
      $form['country'] = array('#type' => 'value', '#value' => $user->country);
      $form['show_country'] = array('#type' => 'item', '#title' => t("Country"), '#value' => $countrylist[$user->country]);
    }
  return $form;
}

/**
 * Creates a user login subform
 */
function fhuser_subform_user_login() {
  $form = array('#type' => 'fieldset', '#title' => t('Login'));
  $form['name'] = array('#type' => 'textfield',
    '#title' => t('Username'),
    '#size' => 30,
    '#maxlength' => 60,
    '#required' => TRUE,
    '#attributes' => array('tabindex' => '1'),
  );
  if (variable_get('drupal_authentication_service', FALSE) && count(user_auth_help_links()) > 0) {
    $form['name']['#description'] = t('Enter your %s username, or an ID from one of our affiliates: %a.', array('%s' => variable_get('site_name', 'local'), '%a' => implode(', ', user_auth_help_links())));
  }
  else {
    $form['name']['#description'] = t('Enter your %s username.', array('%s' => variable_get('site_name', 'local')));
  }
  $form['pass'] = array('#type' => 'password',
    '#title' => t('Password'),
    '#description' => t('Enter the password that accompanies your username.'),
    '#required' => TRUE,
    '#attributes' => array('tabindex' => '2'),
  );
  // $form['#validate'] = array('fhuser_login_form_validate' => array());
  // $form['submit'] = array('#type' => 'submit', '#value' => t('Log in'), '#weight' => 2, '#attributes' => array('tabindex' => '3'));
  fhuser_subform_complete('user_login', $form);
  return $form;
}

/**
 * Creates a password recovery subform
 */
function fhuser_subform_user_password() {
    // Display form:
  $form['name'] = array('#type' => 'textfield',
    '#title' => t('Username'),
    '#size' => 30,
    '#maxlength' => 60,
  );
  $form['mail'] = array('#type' => 'textfield',
    '#title' => t('E-mail address'),
    '#size' => 30,
    '#maxlength' => 64,
  );
  $form['submit'] = array('#type' => 'submit',
    '#value' => t('E-mail new password'),
    '#weight' => 2,
  );
  fhuser_subform_complete('user_pass', $form);  
  return $form;
}
/**
 * Creates a user register subform
 */
function fhuser_subform_user_register() {
  $form = array('#type' => 'fieldset', '#title' => t('Register'));
  $form['name'] = array('#type' => 'textfield',
    '#title' => t('Username'),
    '#size' => 30,
    '#maxlength' => 60,
    '#description' => t('Your full name or your preferred username; only letters, numbers and spaces are allowed.'),
    '#required' => TRUE);
  $form['mail'] = array('#type' => 'textfield',
    '#title' => t('E-mail address'),
    '#size' => 30,
    '#maxlength' => 64,
    '#description' => t('A password and instructions will be sent to this e-mail address, so make sure it is accurate.'),
    '#required' => TRUE,
  );
  $extra = _user_forms($null, $null, $null, 'register');

  // Only display form_group around default fields if there are other groups.
  if ($extra) {
    $form['account'] = array('#type' => 'fieldset', '#title' => t('Account information'));
    $form['account']['name'] = $form['name'];
    $form['account']['mail'] = $form['mail'];
    $form['account']['pass'] = $form['pass'];
    $form['account']['notify'] = $form['notify'];
    unset($form['name'], $form['mail'], $form['pass'], $form['notify']);
    $form = array_merge($form, $extra);
  }
  // Add validation and submit functions
  // $form['#validate'] = array('fhuser_register_subform_validate' => array());
  fhuser_subform_complete('user_register', $form);
  var_dump($form);
  return $form;  
}

/**
 * Implements form_alter for the subform
 */
function fhuser_subform_complete($form_id, &$form) {
  $form['#id'] = $form_id;
  foreach (module_implements('form_alter') as $module) {
    $function = $module .'_form_alter';
    $function($form_id, $form);
  }
  unset($form['#id']);
}

function fhuser_subform_validate($form_id, $form_values) {
  //drupal_set_message("fhuser_subform_validate, form_id=$form_id, fhuser_form_id=".$form_values['fhuser_form_id']);
  switch($form_values['fhuser_form_id']) {
    case 'login':
      //user_login_validate($form_id, $form_values);
      break;
    case 'register':
      user_register_validate($form_id, $form_values);
      break;
    case 'password':
      // user_pass_validate uses global form_values
      user_pass_validate();
      break;
  } 
}

/**
 * Manages submitted data in subform
 */
function fhuser_subform_submit($form_id, $form_values) {
  //drupal_set_message("fhuser_subform_submit, form_id=$form_id, fhuser_form_id=".$form_values['fhuser_form_id']);
  global $fhuser_enable;
  switch($form_values['fhuser_form_id']) {
    case 'register':
      $fhuser_enable = TRUE;
      user_register_submit($form_id, $form_values);
      $fhuser_enable = FALSE;
      // Set just registered user
      $account = fhuser_get_user();
      $GLOBALS['form_values']['uid'] = $account->uid;
      break;
    case 'password':
      user_pass_submit($form_id, $form_values);
      break;
    case 'login':
      
  } 
}

/**
 * Gets current option
 */
function fhuser_get_option($default = '') {
  return isset($_GET['option']) ? $_GET['option'] : $default;
}

/**
 * Gets link for option
 */
function fhuser_get_link($name, $option, $path = NULL, $props = array()) {
  $path = $path ? $path : $_GET['q'];
  return l($name, $path, $props, 'option='.$option);
}

/**
 * Keep record of last registered user
 * 
 * This is kind of temporary login
 */
function fhuser_user($op, &$edit, &$account, $category = NULL) {
  global $fhuser_enable, $fhuser_user;
  if($fhuser_enable && $op == 'insert') {
    $fhuser_user = $account;
  }
}

/**
 * Returns temporary user for specific actions
 */
function fhuser_get_user(){
  global $user, $fhuser_user;
  if(isset($fhuser_user)) {
    return $fhuser_user;
  } else {
    return $user;
  }
}

/**
 * Returns tabs for different options
 */
function theme_option_tabs($options, $active = ''){
  $output = "<ul class=\"tabs primary\">\n";
  foreach($options as $option => $name) {
    $output .= ($option == $active ? '<li class="active">': '<li>').l($name, $_GET['q'], $option == $active ? array('active' => TRUE) : array(), "option=$option") .'</li>';
  }
  $output .= "</ul>\n";
  return $output;
}
?>
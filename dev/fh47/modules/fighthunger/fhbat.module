<?php
// $Id: fhbat.modue, v 3.0.1 2006-11-29 14:26:00 ema Exp $

/**
 * @file
 * Enables the creation of bats.
 * 
 * Developed by Emanuele Quinto for fighthunger.orgh
 * Based on fh_bat by echoditto
 * Released under the GNU General Public License
 * http://www.gnu.org/licenses/gpl.txt  
 * 
 * Depends on:
 * - partners.module
 * 
 *   NOTE: change to partners_partners table
 *         ALTER TABLE `partners_partners` ADD `data` VARCHAR(128) NOT NULL ;  
 *   
 * 
 * WORKFLOW
 * 1) User click the link on the block <- _fh_bat_block_get_block($bid)
 * 2) Processed by fh_bat_page_submit
 * 3) Redirected 
 *
 * TODO
 * - invite
 * - multiple bat
 * - custom bat page 
 */
 
/**
 * Implementation of hook_help().
 */
function fhbat_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Enables the creation of bats.');
  }
}

/**
 * Implementation of hook_perm().
 */
function fhbat_perm() {
  return array('administer fhbat');
}

/**
 * Get random banner 
 *
 * @param $tid
 *   Which banner category.  
 * 
 * @return
 *   nid of the banner.
 */ 
function  fhbat_banner_get($tid) {
  $sql = 'SELECT b.* FROM {node} n ' .
    'INNER JOIN {term_node} tn ON n.nid = tn.nid ' .
    'INNER JOIN {banner} b ON n.vid = b.vid ' .
    'WHERE tn.tid = %d AND b.workflow = 1';
  $result = db_query($sql, $tid);

  // build ballot
  $ballot = array();
  $banners = array();
  while ($banner = db_fetch_object($result)) {
    for ($i = 0; $i < $banner->chance; $i++) {
      $ballot[] = $banner->nid;
    }
    $banners[$banner->nid] = $banner;
  }
  
  // choose random banner
  $max = count($ballot) - 1;
  if ($max > 0) {
    $random = mt_rand(0, $max);
  }
  else {
    $random = 0;
  }
  $nid = $ballot[$random];
/*  
  // get banner and remove it from the ballot
  $banner = $banners[$nid];
  
  // update view statistics, admin and owner views are not counted
  db_query('UPDATE {banner} SET views = views + 1, views_day = views_day + 1, views_week = views_week + 1 WHERE vid = %d', $banner->vid);


  // change banner status?
  if ($banner->views_max > 0 && $banner->views >= $banner->views_max) {
    // limit reached
    db_query('UPDATE {banner} SET workflow = 5 WHERE vid = %d', $banner->vid);
  }
  else if ($banner->views_day_max > 0 && $banner->views_day >= $banner->views_day_max) {
    // day limit reached
    db_query('UPDATE {banner} SET workflow = 2 WHERE vid = %d', $banner->vid);
  }
  else if ($banner->views_week_max > 0 && $banner->views_week >= $banner->views_week_max) {
    // week limit reached
    db_query('UPDATE {banner} SET workflow = 3 WHERE vid = %d', $banner->vid);
  }
*/  
  return $nid;
}

function theme_fhbat_banner_view($node) {
  $output = '<center><b>One child has been fed by:</b><br />';
  $output .= theme('banner_view_upload', $node) . '</center>';
  return $output;
}

function theme_fhbat_banner_list($tid, $banner_exclude = 0) {
  $output = '<center><b>Our click-to-feed sponsors:</b><br />';

  $sql = 'SELECT b.*, n.nid FROM {node} n ' .
    'INNER JOIN {term_node} tn ON n.nid = tn.nid ' .
    'INNER JOIN {banner} b ON n.vid = b.vid ' .
    'WHERE tn.tid = %d AND b.workflow = 1';
  $result = db_query($sql, $tid);

  while ($banner = db_fetch_object($result)) {
    if($banner->nid <> $banner_exclude) {
      $node = node_load($banner->nid);
  
      // get first attached file
      if ($node->files) {
        foreach ($node->files as $key => $file) {
          $file = (object)$file;
          if ($file->list && !$file->remove) {
            break; // we only need the first listed file
          }
        }
      }
      $img_attr = array(
        'width'  => $node->width,
        'height' => $node->height,
        'alt'    => $node->title,
      );
  
      $url_attr = array('title' => $node->url);
      if ($node->target != '_none') {
        $url_attr['target'] = $node->target;
      }
      $banner_item = theme('banner_image', file_create_url($file->filepath), $img_attr) . '<br />' . $node->title;
      $output .= '<p>' . l( $banner_item, 'node/'. $node->nid, $url_attr, NULL, NULL, FALSE, TRUE) . '</p>';
    }
  }
  return $output;
}

/**
 * After click action
 * redirect to banner/nid 
 */
function fhbat_page_submit($form_id, $form_values) {
global $base_url;
global $user;

  $server = $_SERVER;

// Update data on custom table 
  $bid = $form_values['bid'];
  $validation_type = $form_values['validation_type'];
  $data = ($user) ? $user->mail : ''; 
  $userip = $_SERVER['REMOTE_ADDR'];
  
  $from = $_SERVER[HTTP_REFERER];
  $bat_value  = $form_values['bat_value'];
  
  db_query( "INSERT INTO {wtw_bat_clicks}  
               (bid, timestamp, validation_type, data, IP)
             VALUES 
               (%d, UNIX_TIMESTAMP(NOW()), '%s', '%s', '%s')",
             $bid, $validation_type, $data, $userip);

  $message = variable_get('fhbat_thanks', 'Thanks for visiting our site and clicking to feed a child.'); 
  $redirect = variable_get('fhbat_redirect', '');
  
// get random banner
  $fhbat_category = variable_get('fhbat_category', 0);
  $banner_nid = fhbat_banner_get($fhbat_category);
  $banner = node_load($banner_nid);
  
// Update banner statistics and redirect user to target URL
  if ($banner) {
    // don't update banner stats for site admin or banner owner
    if ($user->uid != 1 && $user->uid != $banner->uid) {
      db_query('UPDATE {banner} SET clicks = clicks + 1, clicks_day = clicks_day + 1, clicks_week = clicks_week + 1 WHERE nid = %d', $banner_nid);
    }

    if ($banner->clicks_max > 0 && ($banner->clicks + 1) == $banner->clicks_max) {
      watchdog('special', t("banner: '%banner' %status, reached max of %clicks clicks.", array('%banner' => l($banner->title, 'node/'. $banner->id, NULL, NULL, FALSE, TRUE), '%status' => _banner_workflow(BANNER_BLOCKED), '%clicks' => $banner->max_clicks)));
      db_query('UPDATE {banner} SET workflow = %d WHERE vid = %d', BANNER_BLOCKED, $banner->vid);
    }
  }
  
// redirect using banner system
//  $redirect = "banner/$banner_nid";

  $message .= theme('fhbat_banner_view', node_load($banner_nid));

//  $message .= theme('fhbat_banner_list', $fhbat_category);

  drupal_get_messages();
  drupal_set_message($message);
  drupal_goto($redirect);
}  

/*
 * Setting page
 */
 
function fhbat_settings() {

  $form['fhbat_thanks'] = array(
    '#type' => 'textarea',
    '#title' => t('Thanks message'),
    '#default_value' => variable_get('fhbat_thanks', 'Thanks for visiting our site and clicking to feed a child.'), 
    '#cols' => 70,
    '#rows' => 5,
    '#description' => t('This text will be displayed as thanks message.')
  );

  $form['fhbat_redirect'] = array(
    '#type' => 'textfield',
    '#title' => t('Redirect Path'),
    '#size' => 25,
    '#maxlength' => 50,
    '#default_value' => variable_get('fhbat_redirect', 'node'),
    '#description' => t('Redirect Path'),
    '#weight' => -10
  );

  $form['fhbat_fluff'] = array(
    '#type' => 'textfield',
    '#title' => t('Fluff Factor'),
    '#size' => 25,
    '#maxlength' => 50,
    '#default_value' => variable_get('fhbat_fluff', 0),
    '#description' => t('Amount to "fluff" by'),
    '#weight' => -10
  );
  
  $fhbat_block_default = "<CENTER><img src='/files/emptybowlgif.gif'></CENTER><br />\n " .
        "<div style='font-size: 8pt'>So far %%VALUE%% children have been fed through this site.<br />\n " .
        "<strong>Click to make it %%NEXT%%!</strong></div><br />";
  $form['fhbat_block'] = array(
    '#type' => 'textarea',
    '#title' => t('HTML bat block'),
    '#size' => 25,
    '#maxlength' => 50,
    '#default_value' => variable_get('fhbat_block', $fhbat_block_default),
    '#description' => t('Enter HTML bat block, use %%VALUE%% for current bat value and %%NEXT%% for value increased by one'),
    '#weight' => -10,
  );
  
  $vocabulary_options = array();
  $vocabularies = taxonomy_get_vocabularies('banner');
  foreach($vocabularies as $voc) {
    $tree = taxonomy_get_tree($voc->vid);
    if ($tree) {
      foreach ($tree as $term) {
        $vocabulary_options[$term->tid] = $voc->name . " - " . $term->name;
      }
    }
  }
  $form['fhbat_category'] = array(
    '#type' => 'select',
    '#title' => t('fhbat banner category'),
    '#default_value' => variable_get('fhbat_category', 0),
    '#options' => $vocabulary_options
  );
  return $form;
}

/**
 * Get plot value.
 */

function fhbat_get_plot_value ($bid) {
  $plot_value = db_result(db_query('SELECT COUNT(cid) FROM {wtw_bat_clicks} WHERE bid = %s', $bid)); 
  $plot_value += variable_get('fhbat_fluff', 0); 
  return $plot_value;   
}

/**
 * Implementation of block helpers funtions.
 */

function _fhbat_block_get_blocks() {
  $blocks[2]['info'] = t('Bat block');
  return $blocks;
}

function _fhbat_block_get_block($delta) {

  global $base_url;
  global $partners;
  global $user;

// Setting HTML block
  $bid = $delta;
  $bat_plot_value = fhbat_get_plot_value($bid); 
//  $bat_plot_value = 57; 

  $bat_replace['VALUE'] = number_format($bat_plot_value, 0, '', '');
  $bat_replace['NEXT'] = number_format(($bat_plot_value + 1), 0, '', '');
  $form_html = variable_get('fhbat_block', '');

  foreach($bat_replace as $key => $value) {
    $form_html = preg_replace("/%%" . $key . "%%/" , $value, $form_html);
  }


// Setting form
  $form['html'] = array( '#value' => $form_html);
  $form['bid'] = array(
    '#type' => 'hidden',
    '#value' => $bid
  );
  $form['validation_type'] = array(
    '#type' => 'hidden',
    '#value' => 'none'
  );
  $form['bat_value'] = array(
    '#type' => 'hidden',
    '#value' => $bat_plot_value
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Click to Feed a Child')
  );
  $out_form = drupal_get_form('fhbat_page', $form);

  $block['subject'] = '';
  $block['content'] = $out_form;

//  return $output;
  return $block;
}
  
/**
 * Implementation of hook_block.
 */
function fhbat_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      return _fhbat_block_get_blocks();
      break;
    case 'view':
      return _fhbat_block_get_block($delta);
      break;
  }
}




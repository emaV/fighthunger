<?php
// $Id: fhlocalpage.module,v 0.1 2007/01/09 09:02:48 ema Exp $

/**
 * @file
 * Enables users to manage fh local pages.
 *
 */

/**
 * Implementation of hook_help().
 */
function fhlocalpage_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('<strong>FH:</strong> Allows managing local pages. <b>Require fhwalk, location</b>');
    case 'node/add#fhlocalpage':
      return t('Create Local Pages.');
  }
}

/**
 * Implementation of hook_node_info().
 */
function fhlocalpage_node_info() {
  return array('fhlocalpage' => array('name' => t('local page'), 'base' => 'fhlocalpage'));
}

/**
 * Implementation of hook_perm().
 */
function fhlocalpage_perm() {
  return array('create local pages', 'edit own local pages', 'administer local pages');
}

/**
 * Implementation of hook_access().
 */
function fhlocalpage_access($op, $node) {
  global $user;

  if ($op == 'create') {
    return user_access('create local pages');
  }

  if ($op == 'update' || $op == 'delete') {
    if (user_access('administer local pages')) {
      return TRUE;
    } elseif (user_access('edit own local pages') && ($user->uid == $node->uid)) {
      return TRUE;
    }
  }
}

/**
 * Implementation of hook_menu().
 */
function fhlocalpage_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array(
      'path' => 'node/add/localpage', 
      'title' => t('local page'),
      'access' => user_access('create local pages')
    );
  } else {
    $items[] = array(
      'title' => t('localpage'),
      'path' => 'admin/localpage',
      'callback' => 'fhlocalpage_admin',
      'access' => user_access('administer local pages')
    );
  }

  return $items;
}

/**
 * Implementation of hook_form().
 */
function fhlocalpage_form(&$node) {
  global $user;
  // Basic title and body fields
  $form['title'] = array('#type' => 'textfield', '#title' => t('Title'), '#required' => TRUE, '#default_value' => $node->title, '#weight' => -5);
  $form['body_filter']['body'] = array('#type' => 'textarea', '#title' => t('Body'), '#default_value' => $node->body, '#rows' => 20, '#required' => TRUE);
  $form['body_filter']['format'] = filter_form($node->format);

  // Set Local Page Option fieldset form
  $form['localpage'] = array(
    '#type' => 'fieldset', 
    '#title' => t('Local Page Options'),
    '#collapsible' => TRUE, 
    '#collapsed' => FALSE, 
    '#weight' => -4
  );
    
  // Language field
  $form['localpage']['language'] = array(
    '#title' => t('Language'),
    '#type' => 'select',
    '#default_value' => $node->language,
    '#options' => _fhlocalpage_isocodes(),
    '#description' => t('Enter language of this page'),
    '#required' => TRUE
  );
  
  $form['localpage']['country'] = array(
    '#type' => 'select',
    '#title' => t("Country"),
    '#default_value' => $node->country,
    '#options' => module_invoke('fhlocation', 'country_select_options'),
    '#required' => TRUE,   
  );
  
  return $form;
}

/**
 * Implementation of hook_validate()
 */
function fhlocalpage_validate($node) {
  $vid = variable_get('fhwalk_vocabulary', 0);
  $tid = $node->taxonomy[$vid];

  $sql = 'SELECT n.nid, n.title FROM {node} n ' .
        'JOIN {term_node} tn ON tn.nid=n.nid ' .
        'JOIN {location} l ON l.oid=n.nid ' .
        'JOIN {i18n_node} i18n ON n.nid=i18n.nid ' .
        "WHERE i18n.language='%s' AND l.country='%s' AND tn.tid=%d";
  $check_node = db_fetch_object(db_query($sql, $node->language, $node->country, $tid)); 
  if( !$node->nid && $check_node ) {
    form_set_error('localpage', t('There is already a Local Country Page in this language for this campaign. See %node.', array('%node' => l($node->title, 'node/'.$node->nid))));
    form_set_error('country');
    form_set_error('language');
  }  
}


/**
 * Implementation of hook_load()
 */
function fhlocalpage_load($node) {
  $additions['language'] = db_result(db_query('SELECT language FROM {i18n_node} WHERE nid = %d', $node->nid));
  $additions['country'] = db_result(db_query("SELECT country FROM {location} WHERE oid = %d AND type = 'node'", $node->nid));
  return $additions;
}

/**
 * Implementation of hook_insert()
 */
function fhlocalpage_insert($node) {
  db_query("INSERT INTO {i18n_node} (nid, language) VALUES(%d, '%s')", $node->nid, $node->language);
  db_query("INSERT INTO {location} (oid, type, country) VALUES(%d, 'node', '%s')", $node->nid, $node->country);
}

/**
 * Implementation of hook_update()
 */
function fhlocalpage_update($node) {
  db_query("UPDATE {i18n_node} SET language = '%s' WHERE nid = %d", $node->language, $node->nid);
  db_query("UPDATE {location} SET country = '%s' WHERE oid = %d AND type = 'node'", $node->country, $node->nid, 'node');
}


/**
 * Present a node submission form or a set of links to such forms.
 */
function fhlocalpage_add($node) {
  global $user;
  $node = (object)$node;
  $node->type = 'fhlocalpage';
  if(!$node->uid) $node->uid = $user->uid;

  $output = print_r($node, true);

  return $output;
}

/**
 * Implementation of hook_view()
 */
function fhlocalpage_view(&$node, $teaser = FALSE, $page = FALSE) {
  $node->teaser = $node->body;
  $node = node_prepare($node, $teaser);
}

/**
 * Implementation of hook_link().
 */
function fhlocalpage_link($type, $node = 0, $main = 0) {
  $links = array();

  if($node->type=='fhlocalpage') {
    if (fhlocalpage_access('update', $node)) {
      $links[] = l(t('edit local page'), "node/$node->nid/edit", array(), drupal_get_destination());
    }
  }
  return $links;
}

function fhlocalpage_admin_campaign($tid, $country='') {

  $campaign = fhcampaign_get_campaign($tid);
  drupal_set_title(t('Local Country Pages') . ": $campaign->name");

  $header = array(
    array('data' => t('Country'),    'field' => 'country', 'sort' => 'asc'),
    array('data' => t('Language'),   'field' => 'language'),
    array('data' => t('Title'),      'field' => 'title'),
    array('data' => t('Owner'),      'field' => 'name'),
    array('data' => t('Status'),     'field' => 'status'),
    array('data' => t('Operations'), ''),
  );
  $sql = "SELECT l.country, i18n.language, n.nid, n.title, n.status, u.name FROM {node} n " .
    "INNER JOIN {term_node} tn ON tn.nid = n.nid " .
    "LEFT JOIN {location} l ON n.nid = l.oid " .
    "LEFT JOIN {i18n_node} i18n ON n.nid = i18n.nid " .
    "INNER JOIN {users} u ON n.uid=u.uid " .
    "WHERE n.type = 'fhlocalpage' AND l.type = 'node' "  .
    "AND l.country LIKE '%%%s%%' AND tn.tid=%d";
 
  $tablesort = tablesort_sql($header);
  $result = pager_query($sql . $tablesort, 20, 0, NULL, $country, $tid);
  
  while ($LCP = db_fetch_object($result)) {
    $operation = array();
    $operation[] = l(t('edit'),   "node/$LCP->nid/edit",   array(), drupal_get_destination());
    $operation[] = l(t('delete'), "node/$LCP->nid/delete", array(), drupal_get_destination());
    $operations = implode(' | ', $operation);
    $rows[] = array(
      'data' => array(
          $LCP->country,
          _fhlocalpage_getlang($LCP->language),
          l($LCP->title, 'node/' . $LCP->nid),
          $LCP->name,
          ($LCP->status) ? t('published') : t('unpublished'),
          $operations));
  }
  if (!$rows) {
    $rows[] = array(array('data' => t('No LCP available.'), 'colspan' => 4));
  }
  
  $output .= theme('table', $header, $rows);
  $output .= theme('pager', NULL, 50, 0);
  
  // Create a LCP
  $form['create'] = array(
    '#type' => 'fieldset',
    '#title' => t('Create LCP'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#weight' => 1,
  );

  // Countries with campaigns
  $countries = fhcampaign_get_campaign_countries($tid);
  $form['create']['country'] = array(
    '#type' => 'select',
    '#title' => t("Country"),
    '#options' => $countries,
    '#required' => TRUE
  );
  // Language field
  $form['create']['language'] = array(
    '#title' => t('Language'),
    '#type' => 'select',
    '#options' => _fhlocalpage_isocodes(),
    '#required' => TRUE
  );
  $form['create']['name'] = array(
    '#title' => t('Owner'),
    '#type' => 'textfield',
    '#autocomplete_path' => 'user/autocomplete',
  );
  $vid = _fhcampaign_vocabulary();
  $form['create']['taxonomy'] = array("'$vid'" => array('#type' => 'hidden', '#value' => $tid), '#tree'=>true);
  $form['create']['moderate'] = array('#type' => 'hidden', '#value' => 1);
  $form['create']['title'] = array('#type' => 'hidden', '#value' => 'LCP');
  $form['create']['body']  = array('#type' => 'hidden', '#value' => 'edit this');

  $form['create']['submit'] = array('#type' => 'submit', '#value' => t('Submit'));
  $form['#action'] = url('node/add/fhlocalpage', drupal_get_destination() );
  $output .= drupal_get_form('fhlocalpage_node_form', $form);
  
  return $output;
}

/**
 * fhlocal admin page.
 *  
 * @ingroup fhlocalpage_core
 */  
function fhlocalpage_admin($campaign='', $country='') {

  if($campaign) {
    $out = fhlocalpage_admin_campaign($campaign, $country);
  } else {
    drupal_set_title(t('Local Country Pages'));
    $campaigns = fhcampaign_get_all_campaigns();
    $out = '<ul class="menu">';
    foreach($campaigns as $campaign) {
      $out .= '<li class="leaf">' . l($campaign->name, "admin/localpage/$campaign->tid") . '</li>';
    }
    $out .= '</ul>';
  }   

  return $out;
}

/**
 * Get LCP nodes.
 * 
 * @param $country 
 *   string (country)
 * @param $tid 
 *   integer (campaign)
 * @return 
 *   an array (indexed by language) with nid and title.
 * 
 * Note: moved from fhwalk
 */
function fhlocalpage_get_nodes($country, $tid) {
  $sql = "SELECT n.nid, n.title, i18n.language FROM {node} n " .
    "INNER JOIN {term_node} tn ON tn.nid = n.nid " .
    "INNER JOIN {location} l ON l.oid = n.nid AND l.type = 'node'" .
    "INNER JOIN {i18n_node} i18n ON n.nid = i18n.nid " .
    "WHERE n.type = 'fhlocalpage' AND n.status=1 " .
    "AND l.country='%s' AND tn.tid=%d";
  $result=db_query($sql, $country, $tid);
  $nodes = array();
  while($row=db_fetch_array($result)) {
    $nodes[$row['language']] = array(
      'language' => _fhlocalpage_getlang($row['language']),
      'nid'      => $row['nid'],
      'title'    => $row['title'],
      );
  }
  return $nodes;
}

/**
 * Get language name in local language (if available)
 * @param $code
 *    string with iso code
 * @return
 *    language name in local language or translated by drupal t() or in english    
 */
function _fhlocalpage_getlang($code) {
  return _fhlocalpage_isocodes($code);
}

/**
 * Get list of iso639 language codes or (translated) language name for a code
 * @param $code
 *   String with iso code.
 * @return
 *   Language name in local language or translated by drupal t() or in english
 *   Full list of iso codes if no parameter.   
 */
function _fhlocalpage_isocodes($code = NULL) {
  static $isocodes;
  if (!is_array($isocodes)) {
    include_once './includes/locale.inc';
    $isocodes = _locale_get_iso639_list();
    foreach ($isocodes as $key => $value) {
      if (count($value) == 2) {
        $tname = t($value[0]);
        $isocodes[$key] = ($tname == $value[1]) ? $tname : "$tname ($value[1])";
      } else {
        $isocodes[$key] = t($value[0]);
      }
    }
    asort($isocodes);    
  }
  if ($code) {
    return array_key_exists($code, $isocodes) ? $isocodes[$code] : $code;
  } else {
    return $isocodes;
  }
}

<?php
// $Id: fhcommerce.module $

/**
 * @file
 * Fighthunger common API
 * 
 * Some e-commerce customizations for Fighthuger
 *  
 * Developed by Jose A. Reyero,  http://www.reyero.net
 * for FightHunger.org
 */


/**
 * Implementation of hook_help().
 */
function fhcommerce_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('<strong>FH:</strong> Fighthunger e-commerce customization.');
  }
}

/**
 * Implementation of hook_form_alter().
 */
function fhcommerce_form_alter($form_id, &$form) {
  // Add default address for e-commerce module. Administrator can create addresses for other users
  if ($form_id == 'address' && $form['submit']['#value'] == t('Create new address') && $uid = $form['uid']['#value']) {
    $account = user_load(array('uid' => $uid));
    // Set personal information
    $form['firstname']['#default_value'] = $account->first_name;
    $form['lastname']['#default_value'] = $account->last_name;
    if ($location = $account->location) {
        $form['country']['#default_value'] = $location['country'];
      $form['street1']['#default_value'] = $location['street'];
      $form['street2']['#default_value'] = $location['additional'];
      $form['city']['#default_value'] = $location['city'];
      // Fill in state for US, get province code for ROW
      if($location['country'] == 'us') {
        $form['state']['#default_value'] = $location['province'];
      } else {
        $form['province']['#default_value'] = fhcommerce_state_location2address($location['province'], $location['country']);
      }
      $form['zip']['#default_value'] = $location['postal_code'];
    }
  }
}

/**
 * Implementation of hook_settings().
 */
function fhcommerce_settings() {
  $form['fhcommerce_euro2usd'] = array('#type' => 'textfield', '#title' => t('Exchange rate from Euro to USD.'),
    '#default_value' => variable_get('fhcommerce_euro2usd', 1),
    '#size' => 10, 
    '#maxlength' => 10, 
    '#description' => t('Euro/Dollar exchange rate. This will be used to convert shipping costs which are stored in Euros.')
  );
  $form['shipcalc_units'] = array('#type' => 'radios', '#title' => t('Unit for product weights'),
    '#default_value' => variable_get('shipcalc_units', 'LBS'),
    '#options' => array('LBS' => t('pounds'), '' => t('kilograms'))
  );
  return $form;
}

/**
 * Implementation of hook_menu()
 */
function fhcommerce_menu($may_cache) {

  $items = array();

  if ($may_cache) {
    $items[] = array(
      'path' => 'store' ,
      'title' => t('content'),
      'callback' => 'fhcommerce_product_page',
      'access' => user_access('access content'),
      'type' => MENU_CALLBACK,
    );
  } 

  return $items;
}

/**
 * Generic callback for product pages
 * 
 * @param $tid
 *   Taxonomy term for this product category
 */
function fhcommerce_product_page($tid = NULL) {

  // Take description from taxonomy term
  
  if(is_numeric($tid) && $term = taxonomy_get_term($tid)) {
    $output = '';
    // Title and description
    drupal_set_title(t('Welcome to %storename Online Shop!', array('%storename' => $term->name)));
    $output .= '<div class="store-description">'.$term->description."</div>\n";
    // Get products
    $tids = array($tid);
    $operator = 'or';
    $order = 'n.sticky DESC, n.created DESC';
    $depth = 1; // Make bigger if it's suppossed to pick sub categories
    $result = taxonomy_select_nodes($tids, $operator, $depth, TRUE, $order);
    $output .= theme('store_product_table', $result);
  } else {
  	drupal_not_found();
  }

  return $output;
}

/**
 * Themeable product table
 */
function theme_store_product_table($result){
  if (db_num_rows($result) > 0) {
  	$output = '<table class="product-table">';
    $column = 0; // Columns 0, 1
    $sticky = 0;
    while ($node = db_fetch_object($result)) {
      if($sticky && !$node->sticky && $column) {
      	// New row anyway
      	$output .= '<td>&nbsp</td></tr><tr><td>';
        $column = 0;
      } else {
        $output .= $column  ? "<td>" : "<tr><td>";
      }             
      // If sticky, full view
    	$output .= node_view(node_load($node->nid), !$node->sticky);
      if($column) {
      	$output .= "</td>\n</tr>\n";
        $column = 0;
      } else {
      	$output .= "</td>\n";
        $column = 1;
      }
      $sticky = $node->sticky;
    }

    $output .= $column ? "</table>\n" : "<td>&nbsp</td></tr></table>\n";
    $output .= theme('pager', NULL, variable_get('default_nodes_main', 10), 0);    
  }
  else {
    $output .= t('There are currently no products in this store.');
  }
  
  return $output;	
}
/**
 * Convert location's state to ecommerce's address
 */
function fhcommerce_state_location2address($state, $country) {
    $province_listing_function = 'location_province_list_'. $country;
  if($state && $country && function_exists($province_listing_function)) {
    // Get list from location module
        $province_list = $province_listing_function();
    return array_key_exists($state, $province_list) ? $province_list[$state] : 'no';
    } else {
        return '';
    }
}

?>

<?php
// $Id: fhcivimail.module,v 0.1 2007/10/11 14:18:34 ema Exp $


// $mod_path = drupal_get_path('module', 'fhcivimail');
// require_once $mod_path . "/libgmailer.php";

/**
 * Implementation of hook_settings
 *
 */
function fhcivimail_settings(){

  $form['fhcivimail_verp'] = array(
    '#type' => 'textfield',
    '#title' => t('verp'),
    '#default_value' => variable_get('fhcivimail_verp', '-'), 
  );
  $form['fhcivimail_batch_process'] = array(
    '#type' => 'textfield',
    '#title' => 'batch email',
    '#default_value' => variable_get('fhcivimail_batch_process', 100), 
  );

  // imap configuration
  $form['fhcivimail_imap_server'] = array(
    '#type' => 'textfield',
    '#title' => t('GMail server'),
    '#default_value' => variable_get('fhcivimail_imap_server', 'imap.gmail.com'), 
  );
  
  // Bounces
  $form['fhcivimail_bounce_group'] = array(
    '#type'  => 'fieldset',
    '#title' => t('Bounce mailbox options'),
    '#collapsible' => TRUE,
    '#collapsed'   => FALSE,
  );  
  $form['fhcivimail_bounce_group']['fhcivimail_bounce_user'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#default_value' => variable_get('fhcivimail_bounce_user', 'bounce@fighthunger.org'), 
  );
  $form['fhcivimail_bounce_group']['fhcivimail_bounce_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#default_value' => variable_get('fhcivimail_bounce_password', ''), 
  );
  $form['fhcivimail_bounce_group']['fhcivimail_bounce_status'] = array(
    '#type' => 'select',
    '#title' => t('Status'),
    '#default_value' => variable_get('fhcivimail_bounce_status',false),
    '#options' => array(false => t('Inactive'), true => t('Active')),
  );

  // Unsubscriptions
  $form['fhcivimail_unsubscribe_group'] = array(
    '#type'  => 'fieldset',
    '#title' => t('Unsubscribe mailbox options'),
    '#collapsible' => TRUE,
    '#collapsed'   => FALSE,
  );  
  $form['fhcivimail_unsubscribe_group']['fhcivimail_unsubscribe_user'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#default_value' => variable_get('fhcivimail_unsubscribe_user', 'unsubscribe@fighthunger.org'), 
  );
  $form['fhcivimail_unsubscribe_group']['fhcivimail_unsubscribe_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#default_value' => variable_get('fhcivimail_unsubscribe_password', ''), 
  );
  $form['fhcivimail_unsubscribe_group']['fhcivimail_unsubscribe_status'] = array(
    '#type' => 'select',
    '#title' => t('Status'),
    '#default_value' => variable_get('fhcivimail_unsubscribe_status',false),
    '#options' => array(false => t('Inactive'), true => t('Active')),
  );

  // Optout
  $form['fhcivimail_optout_group'] = array(
    '#type'  => 'fieldset',
    '#title' => t('Optout mailbox options'),
    '#collapsible' => TRUE,
    '#collapsed'   => FALSE,
  );  
  $form['fhcivimail_optout_group']['fhcivimail_optout_user'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#default_value' => variable_get('fhcivimail_optout_user', 'optout@fighthunger.org'), 
  );
  $form['fhcivimail_optout_group']['fhcivimail_optout_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#default_value' => variable_get('fhcivimail_optout_password', ''), 
  );
  $form['fhcivimail_optout_group']['fhcivimail_optout_status'] = array(
    '#type' => 'select',
    '#title' => t('Status'),
    '#default_value' => variable_get('fhcivimail_optout_status',false),
    '#options' => array(false => t('Inactive'), true => t('Active')),
  );

  return $form;
}

function fhcivimail_cron() {
  $maxtime = ini_get('max_execution_time')/6;
  
  // Check optouts
  if(variable_get('fhcivimail_optout_status',false)) {
    $time = time();
    $processed = 0;
    $result = true;
    $run = 0;
    watchdog('fhcivimail', 'Check optouts');
    while( ((time() - $time) < $maxtime) && $result ) {
      $result = _fhcivimail_check_mail_box('optout');
      if($result) $processed += $result;
      $run++;
    } 
    $time = time() - $time;
    watchdog('fhcivimail', "optouts processed: $processed in $run run ($time/$maxtime s)");
  }
  
  // Check unsubscriptions
  if(variable_get('fhcivimail_unsubscribe_status',false)) {
    $time = time();
    $processed = 0;
    $result = true;
    $run = 0;
    watchdog('fhcivimail', 'Check unsubscriptions');
    while( ((time() - $time) < $maxtime) && $result ) {
      $result = _fhcivimail_check_mail_box('unsubscribe');
      if($result) $processed += $result;
      $run++;
    } 
    $time = time() - $time;
    watchdog('fhcivimail', "Unsubriptions processed: $processed in $run run ($time/$maxtime s)");
  }
  
  // Check bounces
  if(variable_get('fhcivimail_bounce_status',false)) {
    $time = time();
    $processed = 0;
    $result = true;
    $run = 0;
    watchdog('fhcivimail', 'Check bounces');
    while( ((time() - $time) < $maxtime) && $result ) {
      $result = _fhcivimail_check_mail_box('bounce');
      if($result) $processed += $result;
      $run++;
    } 
    $time = time() - $time;
    watchdog('fhcivimail', "Bounces processed: $processed in $run run ($time/$maxtime s)");
  }
}

/**
 * Implementation of hook_menu
 *
 */
function fhcivimail_menu($may_cache){
  $items = array();
  if ($may_cache) {

    $items[] = array(
      'path'     => 'admin/fhcivimail',
      'title'    => t('CiviMail helpers'), 
      'callback' => 'fhcivimail_helpers',
      'access'   => user_access('administer CiviCRM')
    );
    $items[] = array(
      'path'     => 'admin/fhcivimail/helpers',
      'title'    => t('CiviMail helpers'), 
      'callback' => 'fhcivimail_helpers',
      'type'     => MENU_DEFAULT_LOCAL_TASK,
      'access'   => user_access('administer CiviCRM'),
      'weight'   => -99
    );

    $items[] = array(
      'path' => 'admin/fhcivimail/bounce',
      'title' => t('CiviMail bounces'), 
      'callback' => 'fhcivimail_bounces',
      'type' => MENU_LOCAL_TASK,
      'access' => user_access('administer CiviCRM')
    );
    $items[] = array(
      'path' => 'admin/fhcivimail/optout',
      'title' => t('CiviMail optouts'), 
      'callback' => 'fhcivimail_optout',
      'type' => MENU_LOCAL_TASK,
      'access' => user_access('administer CiviCRM')
    );
    $items[] = array(
      'path' => 'admin/fhcivimail/unsubscribe',
      'title' => t('CiviMail unsubscriptions'), 
      'callback' => 'fhcivimail_unsubscribe',
      'type' => MENU_LOCAL_TASK,
      'access' => user_access('administer CiviCRM')
    );
  }      
  return $items;
}

function fhcivimail_access($op, $node) {
  global $user;
  //Administrator can see all contacts
  if (user_access('administer CiviCRM'))
    return TRUE;

  //We must explicitly return to deny access
  return FALSE;
}

function fhcivimail_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      // This description is shown in the listing at admin/modules.
      return t('<b>FH:</b> A module that helps CiviMail. <b>Require CiviCRM</b>');
  }
} 


/**
 * fhCiviMail: CiviNail helpers
 */

/**
 * Initialization checks
 */
function fhcivimail_check_init() {
  if (function_exists('civicrm_initialize')) {
    civicrm_initialize(TRUE);
    $mod_path = drupal_get_path('module', 'civicrm');
    require_once $mod_path . "/../api/Mailer.php";
    return TRUE;
  }
  return FALSE;
}

/**
 * Extract data from header
 *  
 * @param   $address address from header
 * @return  $data array with verp fields
 * 
 * EX:
 * $address: 
 *   bounce.1.21.8463.77294ccf0e506891f040c52b9ba15f2d2eeddc38-emize.bidon=dubaiaidcute.ae@fighthunger.org
 *   |      | |  |    |                                        |                           | 
 *   |      | |  |    |                                        |                           |=> [domain] => fighthunger.org
 *   |      | |  |    |                                        |=> [bounce_address] => emize.bidon@dubaiaidcute.ae
 *   |      | |  |    |=> [hash] => 77294ccf0e506891f040c52b9ba15f2d2eeddc38                                                              
 *   |      | |  |=> [queue] => 8463
 *   |      | |=> [job] => 21
 *   |      |=> [domain_id] => 1
 *   |=> [action] => bounce
 * 
 *  $data = Array (
 *    [domain] => fighthunger.org
 *    [hash] => 77294ccf0e506891f040c52b9ba15f2d2eeddc38
 *    [queue] => 8463
 *    [job] => 21
 *    [domain_id] => 1
 *    [action] => bounce
 *    [bounce_address] => emize.bidon@dubaiaidcute.ae
 *  )
 */
function _fhcivimail_extract_data($address) {
  static $decodeMap;
  if (!is_array($decodeMap)) {
    $decodeMap = array(
      '='  => '@',
      '40' => '@',
      '3A' => ':',
      '25' => '%',
      '21' => '!',
      '2D' => '-',
      '5B' => '[',
      '5D' => ']',
      '2B' => '+'
    );
  }
  $data = array();
  list($to, $data['domain']) = split("@",  $address );
  list($data1, $data2)  = split( variable_get('fhcivimail_verp', '-'),  $to );
  list($data['action'], $data['domain_id'], $data['job'], $data['queue'], $data['hash']) = split("\.", $data1);
  if($data2) {
    foreach ($decodeMap as $code => $char) $data2 = preg_replace("/$code/i", $char, $data2);
    $data['bounce_address'] = $data2;
  }
  return $data;
}

/**
 * Process email for action (optout, unsubscribe, bounce)
 *  
 * @param   $action ("optout", "unsubscribe", "bounce")
 * @param   $mail   array with data from mail
 * @return  result from civicrm routines
 */
function _fhcivimail_crm_action($action, $data) {

  // check init and action is on the address
  if( fhcivimail_check_init() && ($data['action']===$action) ) {
    switch ($action) {
      case 'bounce':
        $result = crm_mailer_event_bounce($data['job'], $data['queue'], $data['hash'], $data['body']);
        break;
      case 'optout':
        $result = crm_mailer_event_domain_unsubscribe($data['job'], $data['queue'], $data['hash']);
        break;
      case 'unsubscribe':
        $result = crm_mailer_event_unsubscribe($data['job'], $data['queue'], $data['hash']);
        break;
    }
  } else {
    watchdog('fhcivimal', "<b>crm_mailer_event $action failed</b>: $result (" . implode(', ', $data) . ")", WATCHDOG_WARNING);
    $result = false;
  }
  return $result;
}

/**
 * Check mailbox for action (optout, unsubscribe, bounce)
 *  
 * @param   $action ("optout", "unsubscribe", "bounce")
 * @return  $count number of email processed
 */
function _fhcivimail_check_mail_box($action) {

  // set connection variables
  $mail_user          = variable_get('fhcivimail_' . $action . '_user', '');
  $mail_pwd           = variable_get('fhcivimail_' . $action . '_password', ''); 
  $mail_imap_server   = variable_get('fhcivimail_imap_server', '');
  $mail_imap_ref      = "{" . $mail_imap_server . ":993/imap/ssl}";
  $mail_batch_process = variable_get('fhcivimail_batch_process', 100);
   
  // connect to imap server $action
  if($mbox = imap_open($mail_imap_ref . $action, $mail_user, $mail_pwd)) {
   
    // gets headers and uid
    $num_msg = min(imap_num_msg($mbox), $mail_batch_process);
    for($i=1; $i<=$num_msg; $i++) {
      $uid =  imap_uid ($mbox, $i);
      if($uid) $batch[$uid] = imap_header($mbox, $i);
    }
    
    // process email
    $count = 0;
    if($batch) foreach($batch as $uid => $header) {
    
      // get data for processing (body only for 'bounce')
      $data = _fhcivimail_extract_data($header->toaddress);
      if($action=='bounce') $data['body'] = imap_body ($mbox, $i);
  
      // check mail processed and move emails
      if(_fhcivimail_crm_action($action, $data)) {

        if($action=='bounce') {
          // delete email
          $destination = '[Gmail]/Trash';
        } else {
          // change label to $action_done and archive it
          $destination = $action . "_done";
        }
        $result = imap_mail_move($mbox, $i, $action . "_done");
        if($result) $count++;
      } else {
        // change label to $action_check and star it
        imap_mail_move($mbox, $i, $action . "_check");
        imap_setflag_full($mbox, $i, "\\Flagged");
      }
      // After using imap_mail_move it is necesary to call imap_expunge() function.
      // http://www.php.net/manual/en/function.imap-mail-move.php#58929
      imap_expunge($mbox);
    }
  } else {
    watchdog('fhcivimail', "Failed to connect:\n" . print_r(imap_errors(), true), WATCHDOG_ERROR);
    variable_set('fhcivimail_' .$action . 'status', false);
    $count = false;
  }
  return $count;
}

function fhcivimail_helpers() {
  return 'pippo';
}

function fhcivimail_bounces() {

  // set header
  $header = array(
    array('data' => t('email')  ),
    array('data' => t('dest')   ),
    array('data' => t('domain') ),
    array('data' => t('job')    ),
    array('data' => t('queue')  ),
    array('data' => t('hash')   ),
  );

  // get bounces
  $gmailer = new GMailer();
  $box = _fhcivimail_get_box($gmailer, 'bounce');

// fetch mail
  foreach($box as $conv) {
    $message_id = $conv['id'];
    $data = array();    
    $gmailer->fetchBox(GM_CONVERSATION, $message_id, 0);
    $snapshot = $gmailer->getSnapshot(GM_CONVERSATION);
    $mail = $snapshot->conv[0];
    $data = _fhcivimail_extract_data($mail['recv_email'][0]);
    $rows[] = array($mail['sender_email'], $data['dest'], $data['domain_id'], $data['job'], $data['queue'], $data['hash']);
  }
  $output  = theme('table', $header, $rows);
  return $output;
}

function fhcivimail_optout() {
  return 'pippo optout';
}

function fhcivimail_unsubscribe() {
  return 'pippo unsubscribe';
}

?>

<?php
// $Id: fhcommerce.module $

/**
 * @file
 * Fighthunger common API
 * 
 * Some e-commerce customizations for Fighthuger
 *  - Customizable options for shipcalc: weight unit and Exchange rate
 *  - Produces store pages, taxonomy based
 *  - Adds product list below store content type
 * 
 * Developed by Jose A. Reyero,  http://www.reyero.net
 * for FightHunger.org
 */


/**
 * Implementation of hook_help().
 */
function fhcommerce_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('<strong>FH:</strong> Fighthunger e-commerce customization.');
  }
}

/**
 * Implementation of hook_form_alter().
 */
function fhcommerce_form_alter($form_id, &$form) {
  // Add default address for e-commerce module. Administrator can create addresses for other users
  if ($form_id == 'address' && $form['submit']['#value'] == t('Create new address') && $uid = $form['uid']['#value']) {
    $account = user_load(array('uid' => $uid));
    // Set personal information
    $form['firstname']['#default_value'] = $account->first_name;
    $form['lastname']['#default_value'] = $account->last_name;
    if ($location = $account->location) {
        $form['country']['#default_value'] = $location['country'];
      $form['street1']['#default_value'] = $location['street'];
      $form['street2']['#default_value'] = $location['additional'];
      $form['city']['#default_value'] = $location['city'];
      // Fill in state for US, get province code for ROW
      if($location['country'] == 'us') {
        $form['state']['#default_value'] = $location['province'];
      } else {
        $form['province']['#default_value'] = fhcommerce_state_location2address($location['province'], $location['country']);
      }
      $form['zip']['#default_value'] = $location['postal_code'];
    }
  }
  // Subproducts add-to-cart form
  elseif ($form_id == 'subproducts_add_to_cart' && is_array($form['variations'])) {
  	// Remove variations with no options from the form
    foreach(array_keys($form['variations']) as $id) {
    	if(!count($form['variations'][$id]['#options'])) {
    		unset($form['variations'][$id]);
    	}
    }
  }
}

/**
 * Implementation of hook_settings().
 */
function fhcommerce_settings() {
  $form['store_mail'] = array(
    '#type' => 'textfield', '#title' => t('E-mail address'), '#default_value' => variable_get('store_mail', variable_get('site_mail', ini_get('sendmail_from'))),
    '#description' => t('A valid e-mail address for this store, will be used for e-commerce e-mails.')
  );

  $form['fhcommerce_euro2usd'] = array('#type' => 'textfield', '#title' => t('Exchange rate from Euro to USD.'),
    '#default_value' => variable_get('fhcommerce_euro2usd', 1),
    '#size' => 10, 
    '#maxlength' => 10, 
    '#description' => t('Euro/Dollar exchange rate. This will be used to convert shipping costs which are stored in Euros.')
  );
  $form['shipcalc_units'] = array('#type' => 'radios', '#title' => t('Unit for product weights'),
    '#default_value' => variable_get('shipcalc_units', 'LBS'),
    '#options' => array('LBS' => t('pounds'), '' => t('kilograms'))
  );
  
  $vocabulary_options = array();
  $vocabularies = taxonomy_get_vocabularies('product');
  foreach($vocabularies as $voc) {
    $vocabulary_options[$voc->vid] = $voc->name;
  }  
  $form['fhcommerce_store_vocabulary'] = array('#type' => 'radios', '#title' => t('fhcommerce default vocabulary'),
    '#default_value' => variable_get('fhcommerce_store_vocabulary', 5),
    '#options' => $vocabulary_options
  );

  $form['fhcommerce_table_items'] = array(
    '#type' => 'textfield', 
    '#title' => t('Product items in table view (sticky).'),
    '#default_value' => variable_get('fhcommerce_table_items', 10),
    '#size' => 10, 
    '#maxlength' => 10, 
  );
  $form['fhcommerce_list_items'] = array(
    '#type' => 'textfield', 
    '#title' => t('Product items in list view (not sticky and with pager).'),
    '#default_value' => variable_get('fhcommerce_list_items', 10),
    '#size' => 10, 
    '#maxlength' => 10, 
  );
  
  return $form;
}

/**
 * Implementation of hook_menu()
 */
function fhcommerce_menu($may_cache) {

  $items = array();

  if ($may_cache) {
    $items[] = array(
      'path' => 'store' ,
      'title' => t('content'),
      'callback' => 'fhcommerce_product_page',
      'access' => user_access('access content'),
      'type' => MENU_CALLBACK,
    );
  } 

  return $items;
}

/**
 * Generic callback for product pages
 * 
 * @param $tid
 *   Taxonomy term for this product category
 */
function fhcommerce_product_page($tid = NULL) {

  // Take description from taxonomy term
  
  if(is_numeric($tid) && $term = taxonomy_get_term($tid)) {
    $output = '';
    // Title and description
    drupal_set_title(t('Welcome to %storename Online Shop!', array('%storename' => $term->name)));
    $output .= '<div class="store-description">'.$term->description."</div>\n";
    // Get products
    $tids = array($tid);
    $operator = 'or';
    $order = 'n.created DESC';
    $depth = 1; // Make bigger if it's suppossed to pick sub categories
    // Promoted products
    $result = fhcommerce_select_products($tids, $operator, $depth, FALSE, 1, $order);
    $output .= theme('store_product_table', $result);
    // Rest of them, with paging
    $result = fhcommerce_select_products($tids, $operator, $depth, TRUE, 0, $order);
    $output .= theme('store_product_list', $result);
  } else {
  	drupal_not_found();
  }

  return $output;
}

/**
 * Implementation of hook_nodeapi().
 * 
 * Add product list to store node type
 */
function fhcommerce_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'view':
      if ($node->type == 'store' && !$a3) {
        $output = "";
        $substores = taxonomy_get_children(0, variable_get('fhcommerce_store_vocabulary', 5));
        foreach($substores as $store) {
          $result = $result = fhcommerce_select_products(array($store->tid), 'or', 1, FALSE, 1);
        	
          if (db_num_rows($result)) {
          	$output .= '<h3>'.l($store->name, "store/$store->tid").'</h3>';
            $output .= theme('store_product_list', $result);
          }
        }
        $node->body .= $output;
      }
      break;
  }
} 
/**
 * Finds all products that match selected taxonomy conditions.
 *
 * @param $tids
 *   An array of term IDs to match.
 * @param $operator
 *   How to interpret multiple IDs in the array. Can be "or" or "and".
 * @param $depth
 *   How many levels deep to traverse the taxonomy tree. Can be a nonnegative
 *   integer or "all".
 * @param $pager
 *   Whether the nodes are to be used with a pager (the case on most Drupal
 *   pages) or not (in an XML feed, for example).
 * @param $sticky
 *   Select only sticky or not sticky product nodes
 * @param $order
 *   The order clause for the query that retrieve the nodes.
 * @return
 *   A resource identifier pointing to the query results.
 */
function fhcommerce_select_products($tids = array(), $operator = 'or', $depth = 0, $pager = TRUE, $sticky = 0, $order = 'n.created DESC') {
  if (count($tids) > 0) {
    // For each term ID, generate an array of descendant term IDs to the right depth.
    $descendant_tids = array();
    if ($depth === 'all') {
      $depth = NULL;
    }
    foreach ($tids as $index => $tid) {
      $term = taxonomy_get_term($tid);
      $tree = taxonomy_get_tree($term->vid, $tid, -1, $depth);
      $descendant_tids[] = array_merge(array($tid), array_map('_taxonomy_get_tid_from_term', $tree));
    }
    // INNER JOIN {ec_product} p ON n.vid = p.vid WHERE n.status = 1 AND p.pparent = 0
    if ($operator == 'or') {
      $str_tids = implode(',', call_user_func_array('array_merge', $descendant_tids));
      $sql = 'SELECT DISTINCT(n.nid), n.sticky, n.title, n.created FROM {node} n INNER JOIN {ec_product} p ON n.vid = p.vid INNER JOIN {term_node} tn ON n.nid = tn.nid WHERE p.pparent = 0 AND tn.tid IN ('. $str_tids .') AND n.status = 1 AND n.sticky ='.$sticky.' ORDER BY '. $order;
      $sql_count = 'SELECT COUNT(DISTINCT(n.nid)) FROM {node} n INNER JOIN {ec_product} p ON n.vid = p.vid INNER JOIN {term_node} tn ON n.nid = tn.nid WHERE p.pparent = 0 AND tn.tid IN ('. $str_tids .') AND n.status = 1 AND n.sticky = '.$sticky.' ';
    }
    else {
      $joins = '';
      $wheres = '';
      foreach ($descendant_tids as $index => $tids) {
        $joins .= ' INNER JOIN {term_node} tn'. $index .' ON n.nid = tn'. $index .'.nid';
        $wheres .= ' AND tn'. $index .'.tid IN ('. implode(',', $tids) .')';
      }
      $sql = 'SELECT DISTINCT(n.nid), n.sticky, n.title, n.created FROM {node} n INNER JOIN {ec_product} p ON n.vid = p.vid '. $joins .' WHERE n.status = 1 AND n.sticky = '.$sticky.' AND p.pparent = 0 AND '. $wheres .' ORDER BY '. $order;
      $sql_count = 'SELECT COUNT(DISTINCT(n.nid)) FROM {node} n INNER JOIN {ec_product} p ON n.vid = p.vid '. $joins .' WHERE n.status = 1 AND n.sticky = '.$sticky.' AND p.pparent = 0 AND ' . $wheres;
    }
    $sql = db_rewrite_sql($sql);
    $sql_count = db_rewrite_sql($sql_count);
    if ($pager) {
      $result = pager_query($sql, variable_get('fhcommerce_list_items', 10), 0, $sql_count);
    }
    else {
      $result = db_query_range($sql, 0, variable_get('fhcommerce_table_items', 10));
    }
  }

  return $result;
}


/**
 * Themeable product table
 */
function theme_store_product_table($result){
	$number = db_num_rows($result);
  if ( $number > 0) {
  	$output = '<table class="product-table">';
    $column = 0; // Columns 0, 1
    $count = 0;
    while ($node = db_fetch_object($result)) {
    	$count++;
      // Check if latest, for cell colspan
      if($count == $number && !$column) {
      	// New row anyway
      	$output .= '<tr><td colspan="2">';
        $column = 1;
      } else {
        $output .= $column  ? "<td>" : "<tr><td>";
      }             
      // Full view
    	$output .= node_view(node_load($node->nid), FALSE);
      if($column) {
      	$output .= "</td>\n</tr>\n";
        $column = 0;
      } else {
      	$output .= "</td>\n";
        $column = 1;
      }
    }

    $output .= "</table>\n";
  }
  
  return $output;	
}

/**
 * Themeable plain product list
 */
function theme_store_product_list($result) {
	$output = '<div class="product-list">';
  if (db_num_rows($result)) {
    $output .= theme('pager', NULL, variable_get('default_nodes_main', 10), 0);  
    while ($node = db_fetch_object($result)) {
      $output .= node_view(node_load($node->nid), 1);
    }
    $output .= theme('pager', NULL, variable_get('default_nodes_main', 10));
  }
  $output .= "</div>\n";
  return $output;
}

/**
 * Convert location's state to ecommerce's address
 */
function fhcommerce_state_location2address($state, $country) {
    $province_listing_function = 'location_province_list_'. $country;
  if($state && $country && function_exists($province_listing_function)) {
    // Get list from location module
        $province_list = $province_listing_function();
    return array_key_exists($state, $province_list) ? $province_list[$state] : 'no';
    } else {
        return '';
    }
}

/**
 * Implementation of hook_store_email_send
 */
function fhcommerce_store_email_send($from, $to, $subject, $body, $headers = NULL) {
  // Override from header. Using store_mail instead of site_mail, double fallback
  $from = variable_get('store_mail', variable_get('site_mail', ini_get('sendmail_from')));
  $headers = "From: $from\nReply-to: $from\nX-Mailer: Drupal\nReturn-path: $from\nErrors-to: $from" . $headers;
  return user_mail($to, $subject, $body, $headers);
}
?>

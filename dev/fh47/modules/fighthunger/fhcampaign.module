<?php
// $Id: campaign.module,v 1.186 2006/03/27 18:02:48 killes Exp $

/**
 * @file
 * Campaign management
 * 
 * Dependencies
 *   fhwalk.module
 *     Only for the fhwalk_vocabulary variable
 *  
SQL queries on gathering_campaign

ALTER TABLE `gathering_campaign` CHANGE `active` `status` INT( 2 ) NOT NULL DEFAULT '0';
    
 */

define('CAMPAIGN_STATUS_CLOSED', 0);
define('CAMPAIGN_STATUS_POST', 1);
define('CAMPAIGN_STATUS_ACTIVE', 2);

/**
 * Implementation of hook_help().
 */
function fhcampaign_help($section) {
  switch ($section) {
    case 'admin/help#fhcampaign':
      $output = '<p>'. t('The campaign module is used to create and manage <em>campaigns.') .'</p>';
      return $output;
    case 'admin/modules#description':
      return t('<strong>FH:</strong> Campaign management.');
    case 'node/add#campaign':
      return t('Create a new Wtw Campaign.');
  }
}

/**
 * Implementation of hook_form_alter().
 */
function fhcampaign_form_alter($form_id, &$form) {
  if($form_id == 'taxonomy_form_term' && $form['vid']['#value'] == _fhcampaign_vocabulary()) {
    $form['campaign'] = array('#type' => 'fieldset', '#title' => t('Campaign'), '#weight' => -18);
    if(isset($form['tid']) && $tid = $form['tid']['#value']) {
      $campaign = fhcampaign_get_campaign($tid);
    }
    $campaign = $campaign ? (array)$campaign : array();
    $form['campaign']['shortname'] = array(
      '#type' => 'textfield', 
      '#title' => t('Short name'), 
      '#default_value' => $campaign['shortname'], 
      '#maxlength' => 64, 
      '#required' => TRUE
    );
    $form['campaign']['startdate'] = array(
      '#type' => 'textfield', 
      '#title' => t('Date'), 
      '#default_value' => $campaign['startdate'], 
      '#description' => t('Enter the date (format year-month-day i.e. 2007-05-13).')
    );
    
    $status_help  = "<dl><dt><b>Campaign status</b></dt>";
    $status_help .= "<dt>Closed</dt><dd><b>Prohibit</b> new events from being added <b>and</b> comments</dd>";
    $status_help .= "<dt>Post Action</dt><dd><b>Prohibit</b> new events from being added <b>allows</b> comments</dd>";
    $status_help .= "<dt>Active</dt><dd><b>Allows</b> new events</dd>";
    
    $form['campaign']['status'] = array(
      '#type' => 'select', 
      '#title' => t('Status'), 
      '#options' => _fhcampaign_status(),
      '#default_value' => $campaign['status'], 
      '#description' => $status_help
    );
    $form['campaign']['longname'] = array(
      '#type' => 'textfield', 
      '#title' => t('Long name'), 
      '#default_value' => $campaign['longname'], 
    );
    $form['campaign']['longdesc'] = array(
      '#type' => 'textarea', 
      '#title' => t('Long description'), 
      '#default_value' => $campaign['longdesc'], 
    );    
  } elseif (isset($form['type']) && $type = $form['type']['#value']) {
    switch ($form_id) {
      case $type.'_node_settings':
        $form['workflow']['fhcampaign_support_'. $type] = array(
          '#type' => 'radios',
          '#title' => t('Campaigns'),
          '#options' => array(t('Disabled'), t('Enabled')),
          '#default_value' => variable_get('fhcampaign_support_'. $type, 0),
          '#description' => t('Enable campaigns for this content type'),
        );
        return $form;
      case $type.'_node_form':
        if (variable_get('fhcampaign_support_'.$type, 0) ) {
          $form['#after_build'][] = 'fhcampaign_check_taxonomy';
        } 
        break;
        
    }
  }
}

/**
 * Form callback: after build function for node forms
 * 
 * Restricts campaign taxonomy depending on permissions
 */
function fhcampaign_check_taxonomy($form) {
  $node = $form['#node'];
  $vid = _fhcampaign_vocabulary();
  // Bypass restrictions for some permissions
  if( user_access('administer walks') ) { 
    // Do nothing
    return $form;
  } elseif(isset($form['taxonomy'][$vid])) {
    // Do not allow editing
    $taxonomy = $form['taxonomy'][$vid];
    $campaigns = $taxonomy['#options']; // Quick. Get campaigns from form
    if($node->nid) {
      // Editing node. Keep current value
      $current = $taxonomy['#default_value'];
    } elseif($node->camid) {
      // New node. Get from parameters
      $current = array($node->camid);
    } 
    // Check and display
    if ($current) {
      $form['taxonomy'][$vid] = array('#type' => 'value', '#value' => $current);
      // Just for display
      $display = array();
      foreach($current as $tid) {
        $display[] = $campaigns[$tid];
      }
      $form['taxonomy']['campaign'] = array(
        '#type' => 'item',
        '#title' => $taxonomy['#title'],
        '#value' => count($display) ? theme('item_list', $display) : t('None')
      );
      return $form;

    } else {
      // Missing value. Error. Break form by no return.
      drupal_set_message(t('Missing campaign parameter'), 'error');      
    }
  }
  // If we reach here, something is wrong, no form displayed anyway
}

/**
 * Implementation of hook_taxonomy()
 */
function fhcampaign_taxonomy($op, $type, $object = NULL) {
  $object = $object ? (object)$object : NULL;
  if($type == 'term' && $object->vid == _fhcampaign_vocabulary()) {
    switch($op) {
      case 'insert':
      case 'update':
        fhcampaign_save_campaign($object);
        menu_rebuild();
        break;      
      case 'delete':
        db_query("DELETE FROM {gathering_campaign} WHERE camid = %d", $object->tid);
        menu_rebuild();
        break;
    }
  }
}

/**
 * Loads campaign data for content types, ordered by date, latest first
 * FETCH ALSO USING ONLY node id  
 */
function fhcampaign_node_get_campaigns($node) {
  $nid = is_numeric($node) ? $node : $node->nid;

  $list = array();
  // If node has taxonomy, check all terms
  if (is_array($node->taxonomy)) {
    $terms = array();
    foreach ($node->taxonomy as $term) {
      if (is_array($term)) {
        foreach ($term as $tid) {
          $terms[] = db_escape_string($tid);
        }
      }
      else if (is_object($term)) {
        $tems[] = db_escape_string($term->tid);
      }
      else if ($term) {
        $terms[] = db_escape_string($term);
      }
    }
    $result = db_query("SELECT t.*, c.* FROM {term_data} t INNER JOIN {gathering_campaign} c ON t.tid = c.camid WHERE t.vid = %d AND t.tid IN ('".implode("','", $terms) ."') ORDER BY c.startdate DESC", _fhcampaign_vocabulary());
    //drupal_set_message("DEBUG: fhcampaign_node_get_campaigns:".implode('', $terms));
  } else {
    $result = db_query("SELECT t.*, c.* FROM {term_data} t INNER JOIN {gathering_campaign} c ON t.tid = c.camid INNER JOIN {term_node} tn ON t.tid = tn.tid WHERE tn.nid = %d ORDER BY c.startdate DESC", $nid);
  }
  while($campaign = db_fetch_object($result)) {
    $list[] = $campaign;
  }
  return $list;
  
}
/**
 * Menu callback: Administer campaigns
 */
function fhcampaign_admin_campaigns() {
  if($vid = _fhcampaign_vocabulary()) {
    return taxonomy_overview_terms($vid);
  } else {
    drupal_set_message(t('You must set up the campaign vocabulary first'), 'error');
    drupal_goto('adming/settings/campaign');
  }
}

/**
 * Implementation of hook_menu().
 */
function fhcampaign_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array(
      'title' => t('campaigns'),
      'path' => 'admin/campaigns',
      'callback' => 'fhcampaign_admin_campaigns',
      'access' => user_access('administer walks')
    );
    
    // Campaign pages. Menu is rebuilt after campaign update so this can be in may_cache          
    foreach(fhcampaign_get_all_campaigns() as $campaign) {
      $items[] = array(
        'path' => $campaign->shortname,
        'callback' => 'fhcampaign_overview',
        'callback arguments' => array($campaign->shortname, $campaign->tid),
        'access' => TRUE
      );
      $items[] = array(
        'path' => "$campaign->shortname/overview",
        'callback' => 'fhcampaign_overview',
        'callback arguments' => array($campaign->shortname, $campaign->tid),
        'title' => t('Overview'),
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => 0,
        'access' => TRUE
      );
      // More tabs for active campaigns
      if ($campaign->status == CAMPAIGN_STATUS_ACTIVE) {
        $items[] = array(
          'path' => "$campaign->shortname/coordinate",
          'callback' => 'fhcampaign_coordinate',
          'callback arguments' => array($campaign->shortname, $campaign->tid),
          'title' => t('Coordinate'),
          'access' => user_access('coordinate walks'),
          'weight' => 1,
          'type' => MENU_LOCAL_TASK
        );
        $items[] = array(
          'path' => "$campaign->shortname/administer",
          'callback' => 'fhcampaign_administer',
          'callback arguments' => array($campaign->shortname, $campaign->tid),
          'title' => t('Administer'),
          'access' => user_access('administer walks'),
          'weight' => 2,
          'type' => MENU_LOCAL_TASK
        );
      }
    }  
  }

  return $items;
}

/**
 * Get campaign list
 * 
 * @param $status
 *   Campaign status, defaults to 'active, if === FALSE will get all campaigns
 */
function fhcampaign_list($status = CAMPAIGN_STATUS_ACTIVE, $index = 'tid', $field = 'name') {
  if($status === FALSE) {
    $result = db_query("SELECT t.*, c.* FROM {term_data} t INNER JOIN {gathering_campaign} c ON t.tid = c.camid WHERE t.vid = %d", _fhcampaign_vocabulary());
  } else {
    $result = db_query("SELECT t.*, c.* FROM {term_data} t INNER JOIN {gathering_campaign} c ON t.tid = c.camid WHERE t.vid = %d AND c.status = '%d'", _fhcampaign_vocabulary(), $status);
  }
  $list = array();
  while($campaign = db_fetch_object($result)) {
    $list[$campaign->$index] = $campaign->$field;
  }
  return $list;
}

/**
 * Get a list of countries for a given campaign
 *  
 * @param $tid taxonomy campaign tid
 * @return countries array
 */
function fhcampaign_country_list($tid) {
  $countries = array();
  $sql = "SELECT l.country FROM {location} l INNER JOIN {node} n ON n.nid = l.oid INNER JOIN {term_node} tn ON tn.nid = n.nid " .
    " WHERE l.type = 'node' AND tn.tid = %d";
  $result=db_query($sql, $tid);
  while($row = db_fetch_array($result)) {
    $countries[$row['country']] = fh_get_country_name($row['country']);
  }
  return $countries;
}

/**
 * Walk campaign home page
 *  
 * @ingroup fhwalk_core
 * @param $synonym path for campaign
 * @param $tid taxonomy campaign tid
 * @param $country optional country 
 * @return overview campaign page
 */  
function fhcampaign_overview($synonym, $tid, $country = '-' ) { // Was fhwalk_overview

  $term = taxonomy_get_term($tid);
  drupal_set_title($term->name);

// Walk status
  $status = variable_get("fhwalk_" . $tid . "_status", 0);
  $fhwalk_overview['status'] = $status;
  $fhwalk_overview['tid'] = $tid;

// Walk list
  if( $country && $country != '-') {
    $walk_list = module_invoke('fhwalk','get_walks',$tid, $country);
    $fhwalk_overview['walk_list'] = $walk_list;
  } else {
    $walk_list = module_invoke('fhwalk','get_walks', $tid);
  }

// Map
  $lat_max  = NULL;
  $long_max = NULL;
  $lat_min  = NULL;
  $long_min = NULL;
  foreach($walk_list as $key => $value) {
    $lat_max  = ($lat_max)  ?  max($lat_max,  $value['latitude'])  : $value['latitude'];
    $long_max = ($long_max) ?  max($long_max, $value['longitude']) : $value['longitude'];
    $lat_min  = ($lat_min)  ?  min($lat_min,  $value['latitude'])  : $value['latitude'];
    $long_min = ($long_min) ?  min($long_min, $value['longitude']) : $value['longitude'];
  }
/*      
  $gmap_string = "[gmap |id=map |center=$gmap_center_lat, $gmap_center_long " .
    "|zoom=$gmap_zoom |width=500px |height=400px |control=Small |type=Map " .
    "|markers=blue::$gmap_markers]";
*/ 

  $gmap_array = module_invoke('fhlocation', 'get_gmap_array', $walk_list, $country);
  $fhwalk_overview['gmap_array'] = $gmap_array ;
//  $fhwalk_overview['gmap'] = gmap_draw_map($fhwalk_overview['gmap_array']);

// Term
  $fhwalk_overview['term'] = $term;

// Country selection ONLY COUNTRIES WITH WALKS
/*
  if( $fhwalk_overview['status']==2 ) {
    $country_list = fh_get_country_list();
  } else {
    $country_list = array('' => '--') + fhcampaign_get_campaign_countries($tid);
  }
*/
  $country_list = array('' => '--') + fhcampaign_get_campaign_countries($tid);


  $form['tid'] = array('#type' => 'hidden', '#value' => $tid);
  $form['synonym'] = array('#type' => 'hidden', '#value' => $synonym);
  $form['country'] = array(
    '#type' => 'select',
    '#title' => t('Select a country to find a walk'),
    '#options' => $country_list,
    '#default_value' => $country,
    '#attributes' => array('onchange' => 'submit()'),
  );
  $form['submit'] = array(
    '#type' => 'submit', 
    '#value' => t('Submit'), 
    '#attributes' => array( 'style' => 'visibility:hidden' ) //trick to use fhwalk_overview_submit
  );
  $fhwalk_overview['country'] = $country;
  $fhwalk_overview['country_search_form'] = $form;
  $fhwalk_overview['country_search'] = drupal_get_form('fhcampaign_overview', $form);
    

// print node
//  $out .= gmap_draw_map($gmap_array);

//  $out .= $term->description;
//  $out .= $country_search;
//  $out .= theme('fhwalk_walklist', $walk_list);

  $out = theme('fhwalk_overview_node', $fhwalk_overview);     
    
// debug

//  $out .= "<hr />" . htmlentities($gmap_string) . "";
//  $out .= '<hr />$gmap_array: ' . htmlentities( print_r($gmap_array, true) );
/*
  $out .= "<hr />lat_max $lat_max, long_max $long_max, lat_min $lat_min, long_min $long_min";
  $span_lat = ($lat_max - $lat_min) / 180;
  $span_long = ($long_max - $long_min) / 360;
  $out .= '<hr />' . "span_lat: $span_lat, span_long: $span_long";
  $out .= '<br/> zoom: ' . $gmap_array['zoom'] . ' - ' . $gmap_array['span'];
*/ 

/*
  $out .= '<hr />' . "tid: $tid";
  $out .= '<hr />' . "country: $country";
  $out .= '<hr />' . "fhwalk_overview: " . print_r($fhwalk_overview, true);
*/  
  return $out;
}

// CHECK IF NEEDED !!!!
function fhcampaign_overview_submit($form_id, $form_values) { // Was fhwalk_overview_submit
  return $form_values['synonym'] . '/' . $form_values['country'];  
}

/**
 * Walk campaign administrator page.
 * (param come from callback on menu hook) 
 *  
 * @ingroup fhwalk_administer
 * @param $synonym campaign path
 * @param $tid taxonomy campaign tid
 */  
function fhcampaign_administer($synonym, $tid) {
  global $user;

//  array_intersect_key() only in php 5.1
//  $search_keys = array('coord'=> 1, 'country' => 2);
//  $sql_array = ($_REQUEST) ? array_intersect_key($_REQUEST, $search_keys) : array();
  $sql_array = array();
  if($_REQUEST['coord'])   $sql_array['coord']   = $_REQUEST['coord'];
  if($_REQUEST['country']) $sql_array['country'] = $_REQUEST['country'];

  $term = taxonomy_get_term($tid);
  drupal_set_title(t('Administer') . ": $term->name");
  
// Get list of walk coordinated
  $form['walk_status'] = array(
    '#type' => 'fieldset',
    '#title' => t('Walk List'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#weight' => -1
  );

  $form['walk_status']['list'] = array(
    '#value' => _fhwalk_administer_get_walk($tid, $sql_array),
  );
  
  $form['walk_status']['search'] = array(
    '#type' => 'fieldset',
    '#title' => t('Search'),
    '#collapsible' => TRUE,
    '#collapsed' => (count($sql_array)===0),
    '#weight' => 1
  );

// fetch only country with a campaign
  $countries = fhcampaign_get_campaign_countries($tid);
  $countries[''] = '< ALL >';
  $form['walk_status']['search']['country'] = array(
    '#type' => 'select',
    '#title' => t("Country"),
    '#options' => $countries,
    '#default_value' => ($sql_array['country'] ? $sql_array['country'] : ''), 
  );
  
  $coords = fhwalk_get_coordinators();
  $coords['all'] = '< ALL >'; 
  $coords['none'] = '< WITHOUT COORDINATOR >';
//  $coords = array_merge($coords, fhwalk_get_coordinators());

  $form['walk_status']['search']['coordinator'] = array(
    '#type' => 'select',
    '#title' => t("Coordinator"),
    '#options' => $coords, 
    '#default_value' => ($sql_array['coord'] ? $sql_array['coord'] : 'all'),
  );
  $form['walk_status']['search']['syn'] = array('#type' => 'hidden', '#value' => $synonym);
  $form['walk_status']['search']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search')
  );
  
  $output = drupal_get_form('fhcampaign_administer_search', $form);

/*
  $output .= "pippo dice ciao a tutti e stampa la request: $request";
  $output .= "e stampa la post: $post";
  $output .= "e stampa i coord: " . print_r(fhwalk_get_coordinators(), true);
*/
  return $output;
}

/**
 * Process administer search form.
 * Convert POST request value in GET value 
 *  
 * @ingroup fhwalk_administer
 * @param $form_id 
 * @param $form_values
 */
function fhcampaign_administer_search_submit($form_id, $form_values) {
  $msg = print_r($form_values, true);

  $get = array();
  if($form_values['country']<>'') $get['country'] = $form_values['country'];
  if($form_values['coordinator']<>'all') $get['coord']   = $form_values['coordinator'];
  unset($get[0]);
  $URLquerystring = drupal_query_string_encode($get);
  $url = $form_values['syn'] . '/administer';

  drupal_goto($url, $URLquerystring);
}

/**
 * Walk campaign coordinate page
 * (param come from callback on menu hook)
 *  
 * @ingroup fhwalk_coordinate
 * @param $synonym campaign path
 * @param $tid taxonomy campaign tid
 */  
function fhcampaign_coordinate($synonym, $tid) {
  global $user;

  $term = taxonomy_get_term($tid);
  drupal_set_title(t('Coordinate') . ": $term->name");

  // Get list of walk coordinated
  $form['walk_status'] = array(
    '#type' => 'fieldset',
    '#title' => t('Organiser Status') . $user->uid,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#weight' => -1
  );
  $form['walk_status']['list'] = array(
    '#value' => _fhwalk_coordinate_get_walk($tid, $user->uid),
  );
  $output = drupal_get_form('campaign_coordinate_form', $form);

  // Get email form
  $output .= fhwalk_coordinate_email_form($term);
  return $output;
}

/**
 * Get a list of country for a given campaign
 *  
 * @ingroup fhwalk_helpers
 * @param $tid taxonomy campaign tid
 * @return countries array
 */
function fhcampaign_get_campaign_countries($tid) {  // Was _fhwalk_get_country_campaign
  $countries = _location_get_iso3166_list();

  $sql = "SELECT DISTINCT l.country FROM {location} l " . 
    "JOIN {node} n ON n.nid=l.oid " .
    "JOIN {term_node} tn ON tn.nid=n.nid " .
    "WHERE l.type='node' AND tn.tid=%d;";
  $result=db_query($sql, $tid);
  while($row = db_fetch_array($result)) {
    $country_campaign[$row['country']] = $countries[$row['country']];
  } 
  asort($country_campaign);    

  return $country_campaign;
}
/**
 * @defgroup fh_database FH Database Layer
 * @{
 */

/**
 * Save campaign data
 */
function fhcampaign_save_campaign($campaign) {
  $campaign = (array)$campaign;
  db_query("DELETE FROM {gathering_campaign} WHERE camid = %d", $campaign['tid']);
  db_query("INSERT INTO {gathering_campaign} (camid, shortname, startdate, enddate, status, longname, longdesc) VALUES(%d, '%s', '%s', '%s', '%d', '%s', '%s')", $campaign['tid'], $campaign['shortname'], $campaign['startdate'], $campaign['enddate'], $campaign['status'], $campaign['longname'], $campaign['longdesc']);
  drupal_set_message(t('The campaign data has been updated.'));
}

/**
 * Get latest date from active campaign
 */
function fhcampaign_default_date() {
  return db_result(db_query("SELECT MAX(startdate) FROM {gathering_campaign} WHERE status = %d", CAMPAIGN_STATUS_ACTIVE));
}

/**
 * Get campaign data
 * 
 * @return
 *   Campaign object
 */
function fhcampaign_get_campaign($cid) {
  return db_fetch_object(db_query("SELECT t.*, c.* FROM {term_data} t INNER JOIN {gathering_campaign} c ON t.tid = c.camid WHERE t.tid = %d", $cid));
}

/**
 * Get all campaigns
 * 
 * @return
 *   Array of campaign objects indexed by camid
 */
function fhcampaign_get_all_campaigns() {
  $list = array();
  $result = db_query("SELECT t.*, c.* FROM {term_data} t INNER JOIN {gathering_campaign} c ON t.tid = c.camid");
  while($campaign = db_fetch_object($result)) {
    $list[$campaign->tid] = $campaign;
  }
  return $list;
}

/**
 * Get active campaigns
 * 
 * @return
 *   Array of campaign objects indexed by camid
 */
function fhcampaign_get_active_campaigns() {
  $list = array();
  $result = db_query("SELECT t.*, c.* FROM {term_data} t INNER JOIN {gathering_campaign} c ON t.tid = c.camid WHERE c.status =".CAMPAIGN_STATUS_ACTIVE);
  while($campaign = db_fetch_object($result)) {
    $list[$campaign->tid] = $campaign;
  }
  return $list;
}
/**
 * @} End of "defgroup fh_database".
 */
 
/**
 * Get campaign status
 *  
 * @param $sid  
 *    status id
 * @return 
 *    status or array of status (if $sid=-1)
 */ 
function _fhcampaign_status( $sid = -1) {
  $options = array(
    CAMPAIGN_STATUS_CLOSED => t("Closed"),
    CAMPAIGN_STATUS_POST => t("Post Action"), 
    CAMPAIGN_STATUS_ACTIVE => t("Active"));
  if ($sid >= 0) {
    return $options[$sid];
  } else {
    return $options;
  }
}

// Return vocabulary id
function _fhcampaign_vocabulary() {
  return variable_get('fhwalk_vocabulary', 0);
}
